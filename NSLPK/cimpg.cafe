--> I) Base case
--> init
open INV .
  :id(nslpk)
	op c : -> Cipher1 .
  	red inv100(init,c) .
close

--> II) Induction cases
--> 1. fkm11(s,r1,r2,r3)
open INV .
  :id(nslpk)
	op c : -> Cipher1 .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Cipher1 .
	op s : -> Sys .
	eq (r3 \in cenc1(nw(s))) = true .
    eq c = r3 .
	red inv100(s,c) implies inv100(fkm11(s,r1,r2,r3),c) .
close

open INV .
  :id(nslpk)
	op c : -> Cipher1 .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Cipher1 .
	op s : -> Sys .
	eq (r3 \in cenc1(nw(s))) = true .
    eq (c = r3) = false .
	red inv100(s,c) implies inv100(fkm11(s,r1,r2,r3),c) .
close

open INV .
  :id(nslpk)
	op c : -> Cipher1 .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Cipher1 .
	op s : -> Sys .
	eq (r3 \in cenc1(nw(s))) = false .
	red inv100(s,c) implies inv100(fkm11(s,r1,r2,r3),c) .
close

--> 2. fkm12(s,r1,r2,r3)
open INV .
  :id(nslpk)
	op c : -> Cipher1 .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Nonce .
	op s : -> Sys .
	eq (r3 \in cnonce(nw(s))) = true .
	eq c = enc1(r2,r3,r1) .
	eq r2 = intruder .
	red inv100(s,c) implies inv100(fkm12(s,r1,r2,r3),c) .
close

open INV .
  :id(nslpk)
	op c : -> Cipher1 .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Nonce .
	op s : -> Sys .
	eq (r3 \in cnonce(nw(s))) = true .
	eq c = enc1(r2,r3,r1) .
	eq (r2 = intruder) = false .
	red inv100(s,c) implies inv100(fkm12(s,r1,r2,r3),c) .
close

open INV .
  :id(nslpk)
	op c : -> Cipher1 .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Nonce .
	op s : -> Sys .
	eq (r3 \in cnonce(nw(s))) = true .
	eq (c = enc1(r2,r3,r1)) = false .
	red inv100(s,c) implies inv100(fkm12(s,r1,r2,r3),c) .
close

open INV .
  :id(nslpk)
	op c : -> Cipher1 .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Nonce .
	op s : -> Sys .
	eq (r3 \in cnonce(nw(s))) = false .
	red inv100(s,c) implies inv100(fkm12(s,r1,r2,r3),c) .
close

--> 3. fkm21(s,r1,r2,r3)
open INV .
  :id(nslpk)
	op c : -> Cipher1 .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Cipher2 .
	op s : -> Sys .
	eq (r3 \in cenc2(nw(s))) = true .
	red inv100(s,c) implies inv100(fkm21(s,r1,r2,r3),c) .
close

open INV .
  :id(nslpk)
	op c : -> Cipher1 .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Cipher2 .
	op s : -> Sys .
	eq (r3 \in cenc2(nw(s))) = false .
	red inv100(s,c) implies inv100(fkm21(s,r1,r2,r3),c) .
close

--> 4. fkm22(s,r1,r2,r3,r4)
open INV .
  :id(nslpk)
	op c : -> Cipher1 .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Nonce .
	op r4 : -> Nonce .
	op s : -> Sys .
	eq (r3 \in cnonce(nw(s))) = true .
	eq (r4 \in cnonce(nw(s))) = true .
	red inv100(s,c) implies inv100(fkm22(s,r1,r2,r3,r4),c) .
close

open INV .
  :id(nslpk)
	op c : -> Cipher1 .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Nonce .
	op r4 : -> Nonce .
	op s : -> Sys .
	eq (r3 \in cnonce(nw(s))) = true .
	eq (r4 \in cnonce(nw(s))) = false .
	red inv100(s,c) implies inv100(fkm22(s,r1,r2,r3,r4),c) .
close

open INV .
  :id(nslpk)
	op c : -> Cipher1 .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Nonce .
	op r4 : -> Nonce .
	op s : -> Sys .
	eq (r3 \in cnonce(nw(s))) = false .
	red inv100(s,c) implies inv100(fkm22(s,r1,r2,r3,r4),c) .
close

--> 5. fkm31(s,r1,r2,r3)
open INV .
  :id(nslpk)
	op c : -> Cipher1 .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Cipher3 .
	op s : -> Sys .
	eq (r3 \in cenc3(nw(s))) = true .
	red inv100(s,c) implies inv100(fkm31(s,r1,r2,r3),c) .
close

open INV .
  :id(nslpk)
	op c : -> Cipher1 .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Cipher3 .
	op s : -> Sys .
	eq (r3 \in cenc3(nw(s))) = false .
	red inv100(s,c) implies inv100(fkm31(s,r1,r2,r3),c) .
close

--> 6. fkm32(s,r1,r2,r3)
open INV .
  :id(nslpk)
	op c : -> Cipher1 .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Nonce .
	op s : -> Sys .
	eq (r3 \in cnonce(nw(s))) = true .
	red inv100(s,c) implies inv100(fkm32(s,r1,r2,r3),c) .
close

open INV .
  :id(nslpk)
	op c : -> Cipher1 .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Nonce .
	op s : -> Sys .
	eq (r3 \in cnonce(nw(s))) = false .
	red inv100(s,c) implies inv100(fkm32(s,r1,r2,r3),c) .
close

--> 7. sdm1(s,r1,r2,r3)
open INV .
  :id(nslpk)
	op c : -> Cipher1 .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Rand .
	op s : -> Sys .
	eq (r3 \in ur(s)) = true .
	red inv100(s,c) implies inv100(sdm1(s,r1,r2,r3),c) .
close

open INV .
  :id(nslpk)
	op c : -> Cipher1 .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Rand .
	op s : -> Sys .
	eq (r3 \in ur(s)) = false .
	eq c = enc1(r2,n(r1,r2,r3),r1) .
	eq r2 = intruder .
	red inv100(s,c) implies inv100(sdm1(s,r1,r2,r3),c) .
close

open INV .
  :id(nslpk)
	op c : -> Cipher1 .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Rand .
	op s : -> Sys .
	eq (r3 \in ur(s)) = false .
	eq c = enc1(r2,n(r1,r2,r3),r1) .
	eq (r2 = intruder) = false .
	red inv100(s,c) implies inv100(sdm1(s,r1,r2,r3),c) .
close

open INV .
  :id(nslpk)
	op c : -> Cipher1 .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Rand .
	op s : -> Sys .
	eq (r3 \in ur(s)) = false .
	eq (c = enc1(r2,n(r1,r2,r3),r1)) = false .
	red inv100(s,c) implies inv100(sdm1(s,r1,r2,r3),c) .
close

--> 8. sdm2(s,r1,r2,r3)
open INV .
  :id(nslpk)
	op c : -> Cipher1 .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op s : -> Sys .
  	eq r3 \in nw(s) = true .
  	eq m1?(r3) = true .
  	eq receiver(r3) = r1 .
  	eq key(cipher1(r3)) = r1 .
  	eq principal(cipher1(r3)) = sender(r3) .
  	eq r2 \in ur(s) = true .
	red inv100(s,c) implies inv100(sdm2(s,r1,r2,r3),c) .
close

open INV .
  :id(nslpk)
	op c : -> Cipher1 .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op s : -> Sys .
  	eq r3 \in nw(s) = true .
  	eq m1?(r3) = true .
  	eq receiver(r3) = r1 .
  	eq key(cipher1(r3)) = r1 .
  	eq principal(cipher1(r3)) = sender(r3) .
  	eq r2 \in ur(s) = false .
	red inv100(s,c) implies inv100(sdm2(s,r1,r2,r3),c) .
close

open INV .
  :id(nslpk)
	op c : -> Cipher1 .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op s : -> Sys .
  	eq r3 \in nw(s) = true .
  	eq m1?(r3) = true .
  	eq receiver(r3) = r1 .
  	eq key(cipher1(r3)) = r1 .
  	eq (principal(cipher1(r3)) = sender(r3)) = false .
	red inv100(s,c) implies inv100(sdm2(s,r1,r2,r3),c) .
close

open INV .
  :id(nslpk)
	op c : -> Cipher1 .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op s : -> Sys .
  	eq r3 \in nw(s) = true .
  	eq m1?(r3) = true .
  	eq receiver(r3) = r1 .
  	eq (key(cipher1(r3)) = r1) = false .
	red inv100(s,c) implies inv100(sdm2(s,r1,r2,r3),c) .
close

open INV .
  :id(nslpk)
	op c : -> Cipher1 .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op s : -> Sys .
  	eq r3 \in nw(s) = true .
  	eq m1?(r3) = true .
  	eq (receiver(r3) = r1) = false .
	red inv100(s,c) implies inv100(sdm2(s,r1,r2,r3),c) .
close

open INV .
  :id(nslpk)
	op c : -> Cipher1 .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op s : -> Sys .
  	eq r3 \in nw(s) = true .
  	eq m1?(r3) = false .
	red inv100(s,c) implies inv100(sdm2(s,r1,r2,r3),c) .
close

open INV .
  :id(nslpk)
	op c : -> Cipher1 .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op s : -> Sys .
  	eq r3 \in nw(s) = false .
	red inv100(s,c) implies inv100(sdm2(s,r1,r2,r3),c) .
close

--> 9. sdm3(s,r1,r2,r3,r4)
open INV .
  :id(nslpk)
	op c : -> Cipher1 .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
    eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
	eq sender(r3) = r1 .
	eq receiver(r3) = sender(r4) .
	eq key(cipher1(r3)) = sender(r4) .
    eq nonce(cipher1(r3)) = n(r1,sender(r4),r2) .
	eq principal(cipher1(r3)) = r1 .
	eq receiver(r4) = r1 .
	eq key(cipher2(r4)) = r1 .
    eq nonce1(cipher2(r4)) = n(r1,sender(r4),r2) .
	eq principal(cipher2(r4)) = sender(r4) .
	red inv100(s,c) implies inv100(sdm3(s,r1,r2,r3,r4),c) .
close

open INV .
  :id(nslpk)
	op c : -> Cipher1 .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
    eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
	eq sender(r3) = r1 .
	eq receiver(r3) = sender(r4) .
	eq key(cipher1(r3)) = sender(r4) .
    eq nonce(cipher1(r3)) = n(r1,sender(r4),r2) .
	eq principal(cipher1(r3)) = r1 .
	eq receiver(r4) = r1 .
	eq key(cipher2(r4)) = r1 .
    eq nonce1(cipher2(r4)) = n(r1,sender(r4),r2) .
	eq (principal(cipher2(r4)) = sender(r4)) = false .
	red inv100(s,c) implies inv100(sdm3(s,r1,r2,r3,r4),c) .
close

open INV .
  :id(nslpk)
	op c : -> Cipher1 .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
    eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
	eq sender(r3) = r1 .
	eq receiver(r3) = sender(r4) .
	eq key(cipher1(r3)) = sender(r4) .
    eq nonce(cipher1(r3)) = n(r1,sender(r4),r2) .
	eq principal(cipher1(r3)) = r1 .
	eq receiver(r4) = r1 .
	eq key(cipher2(r4)) = r1 .
    eq (nonce1(cipher2(r4)) = n(r1,sender(r4),r2)) = false .
	red inv100(s,c) implies inv100(sdm3(s,r1,r2,r3,r4),c) .
close

open INV .
  :id(nslpk)
	op c : -> Cipher1 .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
    eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
	eq sender(r3) = r1 .
	eq receiver(r3) = sender(r4) .
	eq key(cipher1(r3)) = sender(r4) .
    eq nonce(cipher1(r3)) = n(r1,sender(r4),r2) .
	eq principal(cipher1(r3)) = r1 .
	eq receiver(r4) = r1 .
	eq (key(cipher2(r4)) = r1) = false .
	red inv100(s,c) implies inv100(sdm3(s,r1,r2,r3,r4),c) .
close

open INV .
  :id(nslpk)
	op c : -> Cipher1 .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
    eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
	eq sender(r3) = r1 .
	eq receiver(r3) = sender(r4) .
	eq key(cipher1(r3)) = sender(r4) .
    eq nonce(cipher1(r3)) = n(r1,sender(r4),r2) .
	eq principal(cipher1(r3)) = r1 .
	eq (receiver(r4) = r1) = false .
	red inv100(s,c) implies inv100(sdm3(s,r1,r2,r3,r4),c) .
close

open INV .
  :id(nslpk)
	op c : -> Cipher1 .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
    eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
	eq sender(r3) = r1 .
	eq receiver(r3) = sender(r4) .
	eq key(cipher1(r3)) = sender(r4) .
    eq nonce(cipher1(r3)) = n(r1,sender(r4),r2) .
	eq (principal(cipher1(r3)) = r1) = false .
	red inv100(s,c) implies inv100(sdm3(s,r1,r2,r3,r4),c) .
close

open INV .
  :id(nslpk)
	op c : -> Cipher1 .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
    eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
	eq sender(r3) = r1 .
	eq receiver(r3) = sender(r4) .
	eq key(cipher1(r3)) = sender(r4) .
    eq (nonce(cipher1(r3)) = n(r1,sender(r4),r2)) = false .
	red inv100(s,c) implies inv100(sdm3(s,r1,r2,r3,r4),c) .
close

open INV .
  :id(nslpk)
	op c : -> Cipher1 .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
	eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
    eq sender(r3) = r1 .
    eq receiver(r3) = sender(r4) .
    eq (key(cipher1(r3)) = sender(r4)) = false .
	red inv100(s,c) implies inv100(sdm3(s,r1,r2,r3,r4),c) .
close

open INV .
  :id(nslpk)
	op c : -> Cipher1 .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
	eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
    eq sender(r3) = r1 .
    eq (receiver(r3) = sender(r4)) = false .
	red inv100(s,c) implies inv100(sdm3(s,r1,r2,r3,r4),c) .
close

open INV .
  :id(nslpk)
	op c : -> Cipher1 .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
	eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
    eq (sender(r3) = r1) = false .
	red inv100(s,c) implies inv100(sdm3(s,r1,r2,r3,r4),c) .
close

open INV .
  :id(nslpk)
	op c : -> Cipher1 .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
	eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq (creator(r3) = r1) = false .
	red inv100(s,c) implies inv100(sdm3(s,r1,r2,r3,r4),c) .
close

open INV .
  :id(nslpk)
	op c : -> Cipher1 .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
	eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = false .
	red inv100(s,c) implies inv100(sdm3(s,r1,r2,r3,r4),c) .
close

open INV .
  :id(nslpk)
	op c : -> Cipher1 .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
	eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = false .
	red inv100(s,c) implies inv100(sdm3(s,r1,r2,r3,r4),c) .
close

open INV .
  :id(nslpk)
	op c : -> Cipher1 .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
	eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = false .
	red inv100(s,c) implies inv100(sdm3(s,r1,r2,r3,r4),c) .
close

open INV .
  :id(nslpk)
	op c : -> Cipher1 .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
	eq (r3 \in nw(s)) = false .
	red inv100(s,c) implies inv100(sdm3(s,r1,r2,r3,r4),c) .
close

--> I) Base case
--> init
open INV .
  :id(nslpk)
	op c : -> Cipher2 .
  	red inv110(init,c) .
close

--> II) Induction cases
--> 1. fkm11(s,r1,r2,r3)
open INV .
  :id(nslpk)
	op c : -> Cipher2 .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Cipher1 .
	op s : -> Sys .
	eq (r3 \in cenc1(nw(s))) = true .
	red inv110(s,c) implies inv110(fkm11(s,r1,r2,r3),c) .
close

open INV .
  :id(nslpk)
	op c : -> Cipher2 .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Cipher1 .
	op s : -> Sys .
	eq (r3 \in cenc1(nw(s))) = false .
	red inv110(s,c) implies inv110(fkm11(s,r1,r2,r3),c) .
close

--> 2. fkm12(s,r1,r2,r3)
open INV .
  :id(nslpk)
	op c : -> Cipher2 .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Nonce .
	op s : -> Sys .
	eq (r3 \in cnonce(nw(s))) = true .
	red inv110(s,c) implies inv110(fkm12(s,r1,r2,r3),c) .
close

open INV .
  :id(nslpk)
	op c : -> Cipher2 .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Nonce .
	op s : -> Sys .
	eq (r3 \in cnonce(nw(s))) = false .
	red inv110(s,c) implies inv110(fkm12(s,r1,r2,r3),c) .
close

--> 3. fkm21(s,r1,r2,r3)
open INV .
  :id(nslpk)
	op c : -> Cipher2 .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Cipher2 .
	op s : -> Sys .
	eq (r3 \in cenc2(nw(s))) = true .
	eq c = r3 .
	red inv110(s,c) implies inv110(fkm21(s,r1,r2,r3),c) .
close

open INV .
  :id(nslpk)
	op c : -> Cipher2 .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Cipher2 .
	op s : -> Sys .
	eq (r3 \in cenc2(nw(s))) = true .
	eq (c = r3) = false .
	red inv110(s,c) implies inv110(fkm21(s,r1,r2,r3),c) .
close

open INV .
  :id(nslpk)
	op c : -> Cipher2 .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Cipher2 .
	op s : -> Sys .
	eq (r3 \in cenc2(nw(s))) = false .
	red inv110(s,c) implies inv110(fkm21(s,r1,r2,r3),c) .
close

--> 4. fkm22(s,r1,r2,r3,r4)
open INV .
  :id(nslpk)
	op c : -> Cipher2 .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Nonce .
	op r4 : -> Nonce .
	op s : -> Sys .
	eq (r3 \in cnonce(nw(s))) = true .
	eq (r4 \in cnonce(nw(s))) = true .
	eq c = enc2(r2,r3,r4,r1) .
    eq r2 = intruder .
	red inv110(s,c) implies inv110(fkm22(s,r1,r2,r3,r4),c) .
close

open INV .
  :id(nslpk)
	op c : -> Cipher2 .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Nonce .
	op r4 : -> Nonce .
	op s : -> Sys .
	eq (r3 \in cnonce(nw(s))) = true .
	eq (r4 \in cnonce(nw(s))) = true .
	eq c = enc2(r2,r3,r4,r1) .
    eq (r2 = intruder) = false .
	red inv110(s,c) implies inv110(fkm22(s,r1,r2,r3,r4),c) .
close

open INV .
  :id(nslpk)
	op c : -> Cipher2 .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Nonce .
	op r4 : -> Nonce .
	op s : -> Sys .
	eq (r3 \in cnonce(nw(s))) = true .
	eq (r4 \in cnonce(nw(s))) = true .
	eq (c = enc2(r2,r3,r4,r1)) = false .
	red inv110(s,c) implies inv110(fkm22(s,r1,r2,r3,r4),c) .
close

open INV .
  :id(nslpk)
	op c : -> Cipher2 .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Nonce .
	op r4 : -> Nonce .
	op s : -> Sys .
	eq (r3 \in cnonce(nw(s))) = true .
	eq (r4 \in cnonce(nw(s))) = false .
	red inv110(s,c) implies inv110(fkm22(s,r1,r2,r3,r4),c) .
close

open INV .
  :id(nslpk)
	op c : -> Cipher2 .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Nonce .
	op r4 : -> Nonce .
	op s : -> Sys .
	eq (r3 \in cnonce(nw(s))) = false .
	red inv110(s,c) implies inv110(fkm22(s,r1,r2,r3,r4),c) .
close

--> 5. fkm31(s,r1,r2,r3)
open INV .
  :id(nslpk)
	op c : -> Cipher2 .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Cipher3 .
	op s : -> Sys .
	eq (r3 \in cenc3(nw(s))) = true .
	red inv110(s,c) implies inv110(fkm31(s,r1,r2,r3),c) .
close

open INV .
  :id(nslpk)
	op c : -> Cipher2 .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Cipher3 .
	op s : -> Sys .
	eq (r3 \in cenc3(nw(s))) = false .
	red inv110(s,c) implies inv110(fkm31(s,r1,r2,r3),c) .
close

--> 6. fkm32(s,r1,r2,r3)
open INV .
  :id(nslpk)
	op c : -> Cipher2 .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Nonce .
	op s : -> Sys .
	eq (r3 \in cnonce(nw(s))) = true .
	red inv110(s,c) implies inv110(fkm32(s,r1,r2,r3),c) .
close

open INV .
  :id(nslpk)
	op c : -> Cipher2 .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Nonce .
	op s : -> Sys .
	eq (r3 \in cnonce(nw(s))) = false .
	red inv110(s,c) implies inv110(fkm32(s,r1,r2,r3),c) .
close

--> 7. sdm1(s,r1,r2,r3)
open INV .
  :id(nslpk)
	op c : -> Cipher2 .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Rand .
	op s : -> Sys .
	eq (r3 \in ur(s)) = true .
	red inv110(s,c) implies inv110(sdm1(s,r1,r2,r3),c) .
close

open INV .
  :id(nslpk)
	op c : -> Cipher2 .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Rand .
	op s : -> Sys .
	eq (r3 \in ur(s)) = false .
	red inv110(s,c) implies inv110(sdm1(s,r1,r2,r3),c) .
close

--> 8. sdm2(s,r1,r2,r3)
open INV .
  :id(nslpk)
	op c : -> Cipher2 .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op s : -> Sys .
  	eq r3 \in nw(s) = true .
  	eq m1?(r3) = true .
  	eq receiver(r3) = r1 .
  	eq key(cipher1(r3)) = r1 .
  	eq principal(cipher1(r3)) = sender(r3) .
  	eq r2 \in ur(s) = true .
	red inv110(s,c) implies inv110(sdm2(s,r1,r2,r3),c) .
close

open INV .
  :id(nslpk)
	op c : -> Cipher2 .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op s : -> Sys .
  	eq r3 \in nw(s) = true .
  	eq m1?(r3) = true .
  	eq receiver(r3) = r1 .
  	eq key(cipher1(r3)) = r1 .
  	eq principal(cipher1(r3)) = sender(r3) .
  	eq r2 \in ur(s) = false .
  	eq c = enc2(sender(r3),nonce(cipher1(r3)),n(r1,sender(r3),r2),r1) .
  	eq sender(r3) = intruder .
	red inv110(s,c) implies inv110(sdm2(s,r1,r2,r3),c) .
close

open INV .
  :id(nslpk)
	op c : -> Cipher2 .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op s : -> Sys .
  	eq r3 \in nw(s) = true .
  	eq m1?(r3) = true .
  	eq receiver(r3) = r1 .
  	eq key(cipher1(r3)) = r1 .
  	eq principal(cipher1(r3)) = sender(r3) .
  	eq r2 \in ur(s) = false .
  	eq c = enc2(sender(r3),nonce(cipher1(r3)),n(r1,sender(r3),r2),r1) .
  	eq (sender(r3) = intruder) = false .
	red inv110(s,c) implies inv110(sdm2(s,r1,r2,r3),c) .
close

open INV .
  :id(nslpk)
	op c : -> Cipher2 .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op s : -> Sys .
  	eq r3 \in nw(s) = true .
  	eq m1?(r3) = true .
  	eq receiver(r3) = r1 .
  	eq key(cipher1(r3)) = r1 .
  	eq principal(cipher1(r3)) = sender(r3) .
  	eq r2 \in ur(s) = false .
  	eq (c = enc2(sender(r3),nonce(cipher1(r3)),n(r1,sender(r3),r2),r1)) = false .
	red inv110(s,c) implies inv110(sdm2(s,r1,r2,r3),c) .
close

open INV .
  :id(nslpk)
	op c : -> Cipher2 .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op s : -> Sys .
  	eq r3 \in nw(s) = true .
  	eq m1?(r3) = true .
  	eq receiver(r3) = r1 .
  	eq key(cipher1(r3)) = r1 .
  	eq (principal(cipher1(r3)) = sender(r3)) = false .
	red inv110(s,c) implies inv110(sdm2(s,r1,r2,r3),c) .
close

open INV .
  :id(nslpk)
	op c : -> Cipher2 .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op s : -> Sys .
  	eq r3 \in nw(s) = true .
  	eq m1?(r3) = true .
  	eq receiver(r3) = r1 .
  	eq (key(cipher1(r3)) = r1) = false .
	red inv110(s,c) implies inv110(sdm2(s,r1,r2,r3),c) .
close

open INV .
  :id(nslpk)
	op c : -> Cipher2 .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op s : -> Sys .
  	eq r3 \in nw(s) = true .
  	eq m1?(r3) = true .
  	eq (receiver(r3) = r1) = false .
	red inv110(s,c) implies inv110(sdm2(s,r1,r2,r3),c) .
close

open INV .
  :id(nslpk)
	op c : -> Cipher2 .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op s : -> Sys .
  	eq r3 \in nw(s) = true .
  	eq m1?(r3) = false .
	red inv110(s,c) implies inv110(sdm2(s,r1,r2,r3),c) .
close

open INV .
  :id(nslpk)
	op c : -> Cipher2 .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op s : -> Sys .
  	eq r3 \in nw(s) = false .
	red inv110(s,c) implies inv110(sdm2(s,r1,r2,r3),c) .
close

--> 9. sdm3(s,r1,r2,r3,r4)
open INV .
  :id(nslpk)
	op c : -> Cipher2 .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
	eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
	eq sender(r3) = r1 .
	eq receiver(r3) = sender(r4) .
	eq key(cipher1(r3)) = sender(r4) .
    eq nonce(cipher1(r3)) = n(r1,sender(r4),r2) .
	eq principal(cipher1(r3)) = r1 .
	eq receiver(r4) = r1 .
	eq key(cipher2(r4)) = r1 .
    eq nonce1(cipher2(r4)) = n(r1,sender(r4),r2) .
	eq principal(cipher2(r4)) = sender(r4) .
	red inv110(s,c) implies inv110(sdm3(s,r1,r2,r3,r4),c) .
close

open INV .
  :id(nslpk)
	op c : -> Cipher2 .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
	eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
	eq sender(r3) = r1 .
	eq receiver(r3) = sender(r4) .
	eq key(cipher1(r3)) = sender(r4) .
    eq nonce(cipher1(r3)) = n(r1,sender(r4),r2) .
	eq principal(cipher1(r3)) = r1 .
	eq receiver(r4) = r1 .
	eq key(cipher2(r4)) = r1 .
    eq nonce1(cipher2(r4)) = n(r1,sender(r4),r2) .
	eq (principal(cipher2(r4)) = sender(r4)) = false .
	red inv110(s,c) implies inv110(sdm3(s,r1,r2,r3,r4),c) .
close

open INV .
  :id(nslpk)
	op c : -> Cipher2 .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
	eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
	eq sender(r3) = r1 .
	eq receiver(r3) = sender(r4) .
	eq key(cipher1(r3)) = sender(r4) .
    eq nonce(cipher1(r3)) = n(r1,sender(r4),r2) .
	eq principal(cipher1(r3)) = r1 .
	eq receiver(r4) = r1 .
	eq key(cipher2(r4)) = r1 .
    eq (nonce1(cipher2(r4)) = n(r1,sender(r4),r2)) = false .
	red inv110(s,c) implies inv110(sdm3(s,r1,r2,r3,r4),c) .
close

open INV .
  :id(nslpk)
	op c : -> Cipher2 .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
	eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
	eq sender(r3) = r1 .
	eq receiver(r3) = sender(r4) .
	eq key(cipher1(r3)) = sender(r4) .
    eq nonce(cipher1(r3)) = n(r1,sender(r4),r2) .
	eq principal(cipher1(r3)) = r1 .
	eq receiver(r4) = r1 .
	eq (key(cipher2(r4)) = r1) = false .
	red inv110(s,c) implies inv110(sdm3(s,r1,r2,r3,r4),c) .
close

open INV .
  :id(nslpk)
	op c : -> Cipher2 .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
	eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
	eq sender(r3) = r1 .
	eq receiver(r3) = sender(r4) .
	eq key(cipher1(r3)) = sender(r4) .
    eq nonce(cipher1(r3)) = n(r1,sender(r4),r2) .
	eq principal(cipher1(r3)) = r1 .
	eq (receiver(r4) = r1) = false .
	red inv110(s,c) implies inv110(sdm3(s,r1,r2,r3,r4),c) .
close

open INV .
  :id(nslpk)
	op c : -> Cipher2 .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
	eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
	eq sender(r3) = r1 .
	eq receiver(r3) = sender(r4) .
	eq key(cipher1(r3)) = sender(r4) .
    eq nonce(cipher1(r3)) = n(r1,sender(r4),r2) .
	eq (principal(cipher1(r3)) = r1) = false .
	red inv110(s,c) implies inv110(sdm3(s,r1,r2,r3,r4),c) .
close

open INV .
  :id(nslpk)
	op c : -> Cipher2 .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
	eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
	eq sender(r3) = r1 .
	eq receiver(r3) = sender(r4) .
	eq key(cipher1(r3)) = sender(r4) .
    eq (nonce(cipher1(r3)) = n(r1,sender(r4),r2)) = false .
	red inv110(s,c) implies inv110(sdm3(s,r1,r2,r3,r4),c) .
close

open INV .
  :id(nslpk)
	op c : -> Cipher2 .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
	eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
	eq sender(r3) = r1 .
	eq receiver(r3) = sender(r4) .
	eq (key(cipher1(r3)) = sender(r4)) = false .
	red inv110(s,c) implies inv110(sdm3(s,r1,r2,r3,r4),c) .
close

open INV .
  :id(nslpk)
	op c : -> Cipher2 .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
	eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
	eq sender(r3) = r1 .
	eq (receiver(r3) = sender(r4)) = false .
	red inv110(s,c) implies inv110(sdm3(s,r1,r2,r3,r4),c) .
close

open INV .
  :id(nslpk)
	op c : -> Cipher2 .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
	eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
	eq (sender(r3) = r1) = false .
	red inv110(s,c) implies inv110(sdm3(s,r1,r2,r3,r4),c) .
close

open INV .
  :id(nslpk)
	op c : -> Cipher2 .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
	eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq (creator(r3) = r1) = false .
	red inv110(s,c) implies inv110(sdm3(s,r1,r2,r3,r4),c) .
close

open INV .
  :id(nslpk)
	op c : -> Cipher2 .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
	eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = false .
	red inv110(s,c) implies inv110(sdm3(s,r1,r2,r3,r4),c) .
close

open INV .
  :id(nslpk)
	op c : -> Cipher2 .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
	eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = false .
	red inv110(s,c) implies inv110(sdm3(s,r1,r2,r3,r4),c) .
close

open INV .
  :id(nslpk)
	op c : -> Cipher2 .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
	eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = false .
	red inv110(s,c) implies inv110(sdm3(s,r1,r2,r3,r4),c) .
close

open INV .
  :id(nslpk)
	op c : -> Cipher2 .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
	eq (r3 \in nw(s)) = false .
	red inv110(s,c) implies inv110(sdm3(s,r1,r2,r3,r4),c) .
close

--> I) Base case
--> init
open INV .
  :id(nslpk)
	op c : -> Cipher3 .
  	red inv120(init,c) .
close

--> II) Induction cases
--> 1. fkm11(s,r1,r2,r3)
open INV .
  :id(nslpk)
	op c : -> Cipher3 .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Cipher1 .
	op s : -> Sys .
	eq (r3 \in cenc1(nw(s))) = true .
	red inv120(s,c) implies inv120(fkm11(s,r1,r2,r3),c) .
close

open INV .
  :id(nslpk)
	op c : -> Cipher3 .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Cipher1 .
	op s : -> Sys .
	eq (r3 \in cenc1(nw(s))) = false .
	red inv120(s,c) implies inv120(fkm11(s,r1,r2,r3),c) .
close

--> 2. fkm12(s,r1,r2,r3)
open INV .
  :id(nslpk)
	op c : -> Cipher3 .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Nonce .
	op s : -> Sys .
	eq (r3 \in cnonce(nw(s))) = true .
	red inv120(s,c) implies inv120(fkm12(s,r1,r2,r3),c) .
close

open INV .
  :id(nslpk)
	op c : -> Cipher3 .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Nonce .
	op s : -> Sys .
	eq (r3 \in cnonce(nw(s))) = false .
	red inv120(s,c) implies inv120(fkm12(s,r1,r2,r3),c) .
close

--> 3. fkm21(s,r1,r2,r3)
open INV .
  :id(nslpk)
	op c : -> Cipher3 .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Cipher2 .
	op s : -> Sys .
	eq (r3 \in cenc2(nw(s))) = true .
	red inv120(s,c) implies inv120(fkm21(s,r1,r2,r3),c) .
close

open INV .
  :id(nslpk)
	op c : -> Cipher3 .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Cipher2 .
	op s : -> Sys .
	eq (r3 \in cenc2(nw(s))) = false .
	red inv120(s,c) implies inv120(fkm21(s,r1,r2,r3),c) .
close

--> 4. fkm22(s,r1,r2,r3,r4)
open INV .
  :id(nslpk)
	op c : -> Cipher3 .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Nonce .
	op r4 : -> Nonce .
	op s : -> Sys .
	eq (r3 \in cnonce(nw(s))) = true .
	eq (r4 \in cnonce(nw(s))) = true .
	red inv120(s,c) implies inv120(fkm22(s,r1,r2,r3,r4),c) .
close

open INV .
  :id(nslpk)
	op c : -> Cipher3 .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Nonce .
	op r4 : -> Nonce .
	op s : -> Sys .
	eq (r3 \in cnonce(nw(s))) = true .
	eq (r4 \in cnonce(nw(s))) = false .
	red inv120(s,c) implies inv120(fkm22(s,r1,r2,r3,r4),c) .
close

open INV .
  :id(nslpk)
	op c : -> Cipher3 .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Nonce .
	op r4 : -> Nonce .
	op s : -> Sys .
	eq (r3 \in cnonce(nw(s))) = false .
	red inv120(s,c) implies inv120(fkm22(s,r1,r2,r3,r4),c) .
close

--> 5. fkm31(s,r1,r2,r3)
open INV .
  :id(nslpk)
	op c : -> Cipher3 .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Cipher3 .
	op s : -> Sys .
	eq (r3 \in cenc3(nw(s))) = true .
 	eq c = r3 .
	red inv120(s,c) implies inv120(fkm31(s,r1,r2,r3),c) .
close

open INV .
  :id(nslpk)
	op c : -> Cipher3 .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Cipher3 .
	op s : -> Sys .
	eq (r3 \in cenc3(nw(s))) = true .
    eq (c = r3) = false .
	red inv120(s,c) implies inv120(fkm31(s,r1,r2,r3),c) .
close

open INV .
  :id(nslpk)
	op c : -> Cipher3 .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Cipher3 .
	op s : -> Sys .
	eq (r3 \in cenc3(nw(s))) = false .
	red inv120(s,c) implies inv120(fkm31(s,r1,r2,r3),c) .
close

--> 6. fkm32(s,r1,r2,r3)
open INV .
  :id(nslpk)
	op c : -> Cipher3 .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Nonce .
	op s : -> Sys .
	eq (r3 \in cnonce(nw(s))) = true .
	eq c = enc3(r2,r3) .
  	eq r2 = intruder .
  	red inv120(s,c) implies inv120(fkm32(s,r1,r2,r3),c) .
close

open INV .
  :id(nslpk)
	op c : -> Cipher3 .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Nonce .
	op s : -> Sys .
	eq (r3 \in cnonce(nw(s))) = true .
	eq c = enc3(r2,r3) .
    eq (r2 = intruder) = false .
	red inv120(s,c) implies inv120(fkm32(s,r1,r2,r3),c) .
close

open INV .
  :id(nslpk)
	op c : -> Cipher3 .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Nonce .
	op s : -> Sys .
	eq (r3 \in cnonce(nw(s))) = true .
	eq (c = enc3(r2,r3)) = false .
	red inv120(s,c) implies inv120(fkm32(s,r1,r2,r3),c) .
close

open INV .
  :id(nslpk)
	op c : -> Cipher3 .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Nonce .
	op s : -> Sys .
	eq (r3 \in cnonce(nw(s))) = false .
	red inv120(s,c) implies inv120(fkm32(s,r1,r2,r3),c) .
close

--> 7. sdm1(s,r1,r2,r3)
open INV .
  :id(nslpk)
	op c : -> Cipher3 .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Rand .
	op s : -> Sys .
	eq (r3 \in ur(s)) = true .
	red inv120(s,c) implies inv120(sdm1(s,r1,r2,r3),c) .
close

open INV .
  :id(nslpk)
	op c : -> Cipher3 .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Rand .
	op s : -> Sys .
	eq (r3 \in ur(s)) = false .
	red inv120(s,c) implies inv120(sdm1(s,r1,r2,r3),c) .
close

--> 8. sdm2(s,r1,r2,r3)
open INV .
  :id(nslpk)
	op c : -> Cipher3 .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op s : -> Sys .
  	eq r3 \in nw(s) = true .
  	eq m1?(r3) = true .
  	eq receiver(r3) = r1 .
  	eq key(cipher1(r3)) = r1 .
  	eq principal(cipher1(r3)) = sender(r3) .
  	eq r2 \in ur(s) = true .
	red inv120(s,c) implies inv120(sdm2(s,r1,r2,r3),c) .
close

open INV .
  :id(nslpk)
	op c : -> Cipher3 .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op s : -> Sys .
  	eq r3 \in nw(s) = true .
  	eq m1?(r3) = true .
  	eq receiver(r3) = r1 .
  	eq key(cipher1(r3)) = r1 .
  	eq principal(cipher1(r3)) = sender(r3) .
  	eq r2 \in ur(s) = false .
	red inv120(s,c) implies inv120(sdm2(s,r1,r2,r3),c) .
close

open INV .
  :id(nslpk)
	op c : -> Cipher3 .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op s : -> Sys .
  	eq r3 \in nw(s) = true .
  	eq m1?(r3) = true .
  	eq receiver(r3) = r1 .
  	eq key(cipher1(r3)) = r1 .
  	eq (principal(cipher1(r3)) = sender(r3)) = false .
	red inv120(s,c) implies inv120(sdm2(s,r1,r2,r3),c) .
close

open INV .
  :id(nslpk)
	op c : -> Cipher3 .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op s : -> Sys .
  	eq r3 \in nw(s) = true .
  	eq m1?(r3) = true .
  	eq receiver(r3) = r1 .
  	eq (key(cipher1(r3)) = r1) = false .
	red inv120(s,c) implies inv120(sdm2(s,r1,r2,r3),c) .
close

open INV .
  :id(nslpk)
	op c : -> Cipher3 .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op s : -> Sys .
  	eq r3 \in nw(s) = true .
  	eq m1?(r3) = true .
  	eq (receiver(r3) = r1) = false .
	red inv120(s,c) implies inv120(sdm2(s,r1,r2,r3),c) .
close

open INV .
  :id(nslpk)
	op c : -> Cipher3 .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op s : -> Sys .
  	eq r3 \in nw(s) = true .
  	eq m1?(r3) = false .
	red inv120(s,c) implies inv120(sdm2(s,r1,r2,r3),c) .
close

open INV .
  :id(nslpk)
	op c : -> Cipher3 .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op s : -> Sys .
  	eq r3 \in nw(s) = false .
	red inv120(s,c) implies inv120(sdm2(s,r1,r2,r3),c) .
close

--> 9. sdm3(s,r1,r2,r3,r4)
open INV .
  :id(nslpk)
	op c : -> Cipher3 .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
    eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
	eq sender(r3) = r1 .
	eq receiver(r3) = sender(r4) .
	eq key(cipher1(r3)) = sender(r4) .
    eq nonce(cipher1(r3)) = n(r1,sender(r4),r2) .
	eq principal(cipher1(r3)) = r1 .
	eq receiver(r4) = r1 .
	eq key(cipher2(r4)) = r1 .
    eq nonce1(cipher2(r4)) = n(r1,sender(r4),r2) .
	eq principal(cipher2(r4)) = sender(r4) .

	eq c = enc3(sender(r4),nonce2(cipher2(r4))) .
    eq sender(r4) = intruder .
  	red inv120(s,c) implies inv120(sdm3(s,r1,r2,r3,r4),c) .
close

open INV .
  :id(nslpk)
	op c : -> Cipher3 .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
    eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
	eq sender(r3) = r1 .
	eq receiver(r3) = sender(r4) .
	eq key(cipher1(r3)) = sender(r4) .
    eq nonce(cipher1(r3)) = n(r1,sender(r4),r2) .
	eq principal(cipher1(r3)) = r1 .
	eq receiver(r4) = r1 .
	eq key(cipher2(r4)) = r1 .
    eq nonce1(cipher2(r4)) = n(r1,sender(r4),r2) .
	eq principal(cipher2(r4)) = sender(r4) .

	eq c = enc3(sender(r4),nonce2(cipher2(r4))) .
    eq (sender(r4) = intruder) = false .
  	red inv120(s,c) implies inv120(sdm3(s,r1,r2,r3,r4),c) .
close

open INV .
  :id(nslpk)
	op c : -> Cipher3 .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
    eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
	eq sender(r3) = r1 .
	eq receiver(r3) = sender(r4) .
	eq key(cipher1(r3)) = sender(r4) .
    eq nonce(cipher1(r3)) = n(r1,sender(r4),r2) .
	eq principal(cipher1(r3)) = r1 .
	eq receiver(r4) = r1 .
	eq key(cipher2(r4)) = r1 .
    eq nonce1(cipher2(r4)) = n(r1,sender(r4),r2) .
	eq principal(cipher2(r4)) = sender(r4) .

	eq (c = enc3(sender(r4),nonce2(cipher2(r4)))) = false .
  	red inv120(s,c) implies inv120(sdm3(s,r1,r2,r3,r4),c) .
close

open INV .
  :id(nslpk)
	op c : -> Cipher3 .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
	eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
	eq sender(r3) = r1 .
	eq receiver(r3) = sender(r4) .
	eq key(cipher1(r3)) = sender(r4) .
    eq nonce(cipher1(r3)) = n(r1,sender(r4),r2) .
	eq principal(cipher1(r3)) = r1 .
	eq receiver(r4) = r1 .
	eq key(cipher2(r4)) = r1 .
    eq nonce1(cipher2(r4)) = n(r1,sender(r4),r2) .
	eq (principal(cipher2(r4)) = sender(r4)) = false .
	red inv120(s,c) implies inv120(sdm3(s,r1,r2,r3,r4),c) .
close

open INV .
  :id(nslpk)
	op c : -> Cipher3 .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
	eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
	eq sender(r3) = r1 .
	eq receiver(r3) = sender(r4) .
	eq key(cipher1(r3)) = sender(r4) .
    eq nonce(cipher1(r3)) = n(r1,sender(r4),r2) .
	eq principal(cipher1(r3)) = r1 .
	eq receiver(r4) = r1 .
	eq key(cipher2(r4)) = r1 .
    eq (nonce1(cipher2(r4)) = n(r1,sender(r4),r2)) = false .
	red inv120(s,c) implies inv120(sdm3(s,r1,r2,r3,r4),c) .
close

open INV .
  :id(nslpk)
	op c : -> Cipher3 .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
	eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
	eq sender(r3) = r1 .
	eq receiver(r3) = sender(r4) .
	eq key(cipher1(r3)) = sender(r4) .
    eq nonce(cipher1(r3)) = n(r1,sender(r4),r2) .
	eq principal(cipher1(r3)) = r1 .
	eq receiver(r4) = r1 .
	eq (key(cipher2(r4)) = r1) = false .
	red inv120(s,c) implies inv120(sdm3(s,r1,r2,r3,r4),c) .
close

open INV .
  :id(nslpk)
	op c : -> Cipher3 .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
	eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
	eq sender(r3) = r1 .
	eq receiver(r3) = sender(r4) .
	eq key(cipher1(r3)) = sender(r4) .
    eq nonce(cipher1(r3)) = n(r1,sender(r4),r2) .
	eq principal(cipher1(r3)) = r1 .
	eq (receiver(r4) = r1) = false .
	red inv120(s,c) implies inv120(sdm3(s,r1,r2,r3,r4),c) .
close

open INV .
  :id(nslpk)
	op c : -> Cipher3 .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
	eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
	eq sender(r3) = r1 .
	eq receiver(r3) = sender(r4) .
	eq key(cipher1(r3)) = sender(r4) .
    eq nonce(cipher1(r3)) = n(r1,sender(r4),r2) .
	eq (principal(cipher1(r3)) = r1) = false .
	red inv120(s,c) implies inv120(sdm3(s,r1,r2,r3,r4),c) .
close

open INV .
  :id(nslpk)
	op c : -> Cipher3 .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
	eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
	eq sender(r3) = r1 .
	eq receiver(r3) = sender(r4) .
	eq key(cipher1(r3)) = sender(r4) .
    eq (nonce(cipher1(r3)) = n(r1,sender(r4),r2)) = false .
	red inv120(s,c) implies inv120(sdm3(s,r1,r2,r3,r4),c) .
close

open INV .
  :id(nslpk)
	op c : -> Cipher3 .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
	eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
    eq sender(r3) = r1 .
    eq receiver(r3) = sender(r4) .
    eq (key(cipher1(r3)) = sender(r4)) = false .
	red inv120(s,c) implies inv120(sdm3(s,r1,r2,r3,r4),c) .
close

open INV .
  :id(nslpk)
	op c : -> Cipher3 .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
	eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
    eq sender(r3) = r1 .
    eq (receiver(r3) = sender(r4)) = false .
	red inv120(s,c) implies inv120(sdm3(s,r1,r2,r3,r4),c) .
close

open INV .
  :id(nslpk)
	op c : -> Cipher3 .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
	eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
    eq (sender(r3) = r1) = false .
	red inv120(s,c) implies inv120(sdm3(s,r1,r2,r3,r4),c) .
close

open INV .
  :id(nslpk)
	op c : -> Cipher3 .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
	eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq (creator(r3) = r1) = false .
	red inv120(s,c) implies inv120(sdm3(s,r1,r2,r3,r4),c) .
close

open INV .
  :id(nslpk)
	op c : -> Cipher3 .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
	eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = false .
	red inv120(s,c) implies inv120(sdm3(s,r1,r2,r3,r4),c) .
close

open INV .
  :id(nslpk)
	op c : -> Cipher3 .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
	eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = false .
	red inv120(s,c) implies inv120(sdm3(s,r1,r2,r3,r4),c) .
close

open INV .
  :id(nslpk)
	op c : -> Cipher3 .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
	eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = false .
	red inv120(s,c) implies inv120(sdm3(s,r1,r2,r3,r4),c) .
close

open INV .
  :id(nslpk)
	op c : -> Cipher3 .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
	eq (r3 \in nw(s)) = false .
	red inv120(s,c) implies inv120(sdm3(s,r1,r2,r3,r4),c) .
close

--> I) Base case
--> init
open INV . 
 :id(nslpk)
	op n : -> Nonce .
	op s : -> Sys .
	red inv130(init,n) .
close

--> II) Induction cases
--> 1. fkm11(s,r1,r2,r3)
open INV . 
 :id(nslpk)
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Cipher1 .
	op s : -> Sys .
	eq (r3 \in cenc1(nw(s))) = true .
	eq key(r3) = intruder .
	red inv100(s,r3) implies inv130(s,n) implies inv130(fkm11(s,r1,r2,r3),n) .
close

open INV . 
 :id(nslpk)
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Cipher1 .
	op s : -> Sys .
	eq (r3 \in cenc1(nw(s))) = true .
	eq (key(r3) = intruder) = false .
	red inv130(s,n) implies inv130(fkm11(s,r1,r2,r3),n) .
close

open INV . 
 :id(nslpk)
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Cipher1 .
	op s : -> Sys .
	eq (r3 \in cenc1(nw(s))) = false .
	red inv130(s,n) implies inv130(fkm11(s,r1,r2,r3),n) .
close

--> 2. fkm12(s,r1,r2,r3)
open INV . 
 :id(nslpk)
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Nonce .
	op s : -> Sys .
	eq (r3 \in cnonce(nw(s))) = true .
  	eq n = r3 .
	red inv130(s,n) implies inv130(fkm12(s,r1,r2,r3),n) .
close

open INV . 
 :id(nslpk)
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Nonce .
	op s : -> Sys .
	eq (r3 \in cnonce(nw(s))) = true .
  	eq (n = r3) = false .
	red inv130(s,n) implies inv130(fkm12(s,r1,r2,r3),n) .
close

open INV . 
 :id(nslpk)
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Nonce .
	op s : -> Sys .
	eq (r3 \in cnonce(nw(s))) = false .
	red inv130(s,n) implies inv130(fkm12(s,r1,r2,r3),n) .
close

--> 3. fkm21(s,r1,r2,r3)
open INV . 
 :id(nslpk)
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Cipher2 .
	op s : -> Sys .
	eq (r3 \in cenc2(nw(s))) = true .
	eq key(r3) = intruder .
	red inv110(s,r3) implies inv130(s,n) implies inv130(fkm21(s,r1,r2,r3),n) .
close

open INV . 
 :id(nslpk)
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Cipher2 .
	op s : -> Sys .
	eq (r3 \in cenc2(nw(s))) = true .
	eq (key(r3) = intruder) = false .
	red inv130(s,n) implies inv130(fkm21(s,r1,r2,r3),n) .
close

open INV . 
 :id(nslpk)
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Cipher2 .
	op s : -> Sys .
	eq (r3 \in cenc2(nw(s))) = false .
	red inv130(s,n) implies inv130(fkm21(s,r1,r2,r3),n) .
close

--> 4. fkm22(s,r1,r2,r3,r4)
open INV . 
 :id(nslpk)
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Nonce .
	op r4 : -> Nonce .
	op s : -> Sys .
	eq (r3 \in cnonce(nw(s))) = true .
	eq (r4 \in cnonce(nw(s))) = true .
  	eq n = r3 .
	red inv130(s,n) implies inv130(fkm22(s,r1,r2,r3,r4),n) .
close

open INV . 
 :id(nslpk)
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Nonce .
	op r4 : -> Nonce .
	op s : -> Sys .
	eq (r3 \in cnonce(nw(s))) = true .
	eq (r4 \in cnonce(nw(s))) = true .
  	eq (n = r3) = false .
  	eq n = r4 .
	red inv130(s,n) implies inv130(fkm22(s,r1,r2,r3,r4),n) .
close

open INV . 
 :id(nslpk)
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Nonce .
	op r4 : -> Nonce .
	op s : -> Sys .
	eq (r3 \in cnonce(nw(s))) = true .
	eq (r4 \in cnonce(nw(s))) = true .
  	eq (n = r3) = false .
  	eq (n = r4) = false .
	red inv130(s,n) implies inv130(fkm22(s,r1,r2,r3,r4),n) .
close

open INV . 
 :id(nslpk)
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Nonce .
	op r4 : -> Nonce .
	op s : -> Sys .
	eq (r3 \in cnonce(nw(s))) = true .
	eq (r4 \in cnonce(nw(s))) = false .
	red inv130(s,n) implies inv130(fkm22(s,r1,r2,r3,r4),n) .
close

open INV . 
 :id(nslpk)
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Nonce .
	op r4 : -> Nonce .
	op s : -> Sys .
	eq (r3 \in cnonce(nw(s))) = false .
	red inv130(s,n) implies inv130(fkm22(s,r1,r2,r3,r4),n) .
close

--> 5. fkm31(s,r1,r2,r3)
open INV . 
 :id(nslpk)
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Cipher3 .
	op s : -> Sys .
	eq (r3 \in cenc3(nw(s))) = true .
	eq key(r3) = intruder .
	red inv120(s,r3) implies inv130(s,n) implies inv130(fkm31(s,r1,r2,r3),n) .
close

open INV . 
 :id(nslpk)
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Cipher3 .
	op s : -> Sys .
	eq (r3 \in cenc3(nw(s))) = true .
	eq (key(r3) = intruder) = false .
	red inv130(s,n) implies inv130(fkm31(s,r1,r2,r3),n) .
close

open INV . 
 :id(nslpk)
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Cipher3 .
	op s : -> Sys .
	eq (r3 \in cenc3(nw(s))) = false .
	red inv130(s,n) implies inv130(fkm31(s,r1,r2,r3),n) .
close

--> 6. fkm32(s,r1,r2,r3)
open INV . 
 :id(nslpk)
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Nonce .
	op s : -> Sys .
	eq (r3 \in cnonce(nw(s))) = true .
  	eq n = r3 .
	red inv130(s,n) implies inv130(fkm32(s,r1,r2,r3),n) .
close

open INV . 
 :id(nslpk)
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Nonce .
	op s : -> Sys .
	eq (r3 \in cnonce(nw(s))) = true .
  	eq (n = r3) = false .
	red inv130(s,n) implies inv130(fkm32(s,r1,r2,r3),n) .
close

open INV . 
 :id(nslpk)
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Nonce .
	op s : -> Sys .
	eq (r3 \in cnonce(nw(s))) = false .
	red inv130(s,n) implies inv130(fkm32(s,r1,r2,r3),n) .
close

--> 7. sdm1(s,r1,r2,r3)
open INV . 
 :id(nslpk)
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Rand .
	op s : -> Sys .
	eq (r3 \in ur(s)) = true .
	red inv130(s,n) implies inv130(sdm1(s,r1,r2,r3),n) .
close

open INV . 
 :id(nslpk)
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Rand .
	op s : -> Sys .
	eq (r3 \in ur(s)) = false .
  	eq n = n(r1,r2,r3) .
  	eq r1 = intruder .
  	red inv130(s,n) implies inv130(sdm1(s,r1,r2,r3),n) .
close

open INV . 
 :id(nslpk)
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Rand .
	op s : -> Sys .
	eq (r3 \in ur(s)) = false .
  	eq n = n(r1,r2,r3) .
  	eq (r1 = intruder) = false .
  	eq r2 = intruder .
  	red inv130(s,n) implies inv130(sdm1(s,r1,r2,r3),n) .
close

open INV . 
 :id(nslpk)
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Rand .
	op s : -> Sys .
	eq (r3 \in ur(s)) = false .
  	eq n = n(r1,r2,r3) .
  	eq (r1 = intruder) = false .
  	eq (r2 = intruder) = false .
  	red inv130(s,n) implies inv130(sdm1(s,r1,r2,r3),n) .
close

open INV . 
 :id(nslpk)
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Rand .
	op s : -> Sys .
	eq (r3 \in ur(s)) = false .
  	eq (n = n(r1,r2,r3)) = false .
  	red inv130(s,n) implies inv130(sdm1(s,r1,r2,r3),n) .
close

--> 8. sdm2(s,r1,r2,r3)
open INV . 
 :id(nslpk)
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op s : -> Sys .
	eq m1?(r3) = true .
	eq (r3 \in nw(s)) = true .
	eq key(cipher1(r3)) = r1 .
	eq receiver(r3) = r1 .
	eq principal(cipher1(r3)) = sender(r3) .
	eq (r2 \in ur(s)) = true .
	red inv130(s,n) implies inv130(sdm2(s,r1,r2,r3),n) .
close

open INV . 
 :id(nslpk)
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op s : -> Sys .
	eq m1?(r3) = true .
	eq (r3 \in nw(s)) = true .
	eq key(cipher1(r3)) = r1 .
	eq receiver(r3) = r1 .
	eq principal(cipher1(r3)) = sender(r3) .
	eq (r2 \in ur(s)) = false .
  	eq sender(r3) = intruder .
  	eq n = n(r1,intruder,r2) .
	red inv130(s,n) implies inv130(sdm2(s,r1,r2,r3),n) .
close

open INV . 
 :id(nslpk)
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op s : -> Sys .
	eq m1?(r3) = true .
	eq (r3 \in nw(s)) = true .
	eq key(cipher1(r3)) = r1 .
	eq receiver(r3) = r1 .
    eq principal(cipher1(r3)) = sender(r3) .
	eq (r2 \in ur(s)) = false .
  	eq sender(r3) = intruder .
  	eq (n = n(r1,intruder,r2)) = false .
  	eq n = nonce(cipher1(r3)) .
  	eq r1 = intruder .
	red inv130(s,n) implies inv130(sdm2(s,r1,r2,r3),n) .
close

open INV . 
 :id(nslpk)
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op s : -> Sys .
	eq m1?(r3) = true .
	eq (r3 \in nw(s)) = true .
	eq key(cipher1(r3)) = r1 .
	eq receiver(r3) = r1 .
	eq principal(cipher1(r3)) = sender(r3) .
	eq (r2 \in ur(s)) = false .
  	eq sender(r3) = intruder .
  	eq (n = n(r1,intruder,r2)) = false .
  	eq n = nonce(cipher1(r3)) .
  	eq (r1 = intruder) = false .
  	red inv140(s,cipher1(r3)) implies inv130(s,n) implies inv130(sdm2(s,r1,r2,r3),n) .
close

open INV . 
 :id(nslpk)
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op s : -> Sys .
	eq m1?(r3) = true .
	eq (r3 \in nw(s)) = true .
	eq key(cipher1(r3)) = r1 .
	eq receiver(r3) = r1 .
	eq principal(cipher1(r3)) = sender(r3) .
	eq (r2 \in ur(s)) = false .
  	eq sender(r3) = intruder .
  	eq (n = n(r1,intruder,r2)) = false .
  	eq (n = nonce(cipher1(r3))) = false .
	red inv130(s,n) implies inv130(sdm2(s,r1,r2,r3),n) .
close

open INV . 
 :id(nslpk)
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op s : -> Sys .
	eq m1?(r3) = true .
	eq (r3 \in nw(s)) = true .
	eq key(cipher1(r3)) = r1 .
	eq receiver(r3) = r1 .
	eq principal(cipher1(r3)) = sender(r3) .
	eq (r2 \in ur(s)) = false .
  	eq (sender(r3) = intruder) = false .
	red inv130(s,n) implies inv130(sdm2(s,r1,r2,r3),n) .
close

open INV . 
 :id(nslpk)
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op s : -> Sys .
	eq m1?(r3) = true .
	eq (r3 \in nw(s)) = true .
	eq key(cipher1(r3)) = r1 .
	eq receiver(r3) = r1 .
    eq (principal(cipher1(r3)) = sender(r3)) = false .
	red inv130(s,n) implies inv130(sdm2(s,r1,r2,r3),n) .
close

open INV . 
 :id(nslpk)
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op s : -> Sys .
	eq m1?(r3) = true .
	eq (r3 \in nw(s)) = true .
	eq key(cipher1(r3)) = r1 .
	eq (receiver(r3) = r1) = false .
	red inv130(s,n) implies inv130(sdm2(s,r1,r2,r3),n) .
close

open INV . 
 :id(nslpk)
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op s : -> Sys .
	eq m1?(r3) = true .
	eq (r3 \in nw(s)) = true .
	eq (key(cipher1(r3)) = r1) = false .
	red inv130(s,n) implies inv130(sdm2(s,r1,r2,r3),n) .
close

open INV . 
 :id(nslpk)
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op s : -> Sys .
	eq m1?(r3) = true .
	eq (r3 \in nw(s)) = false .
	red inv130(s,n) implies inv130(sdm2(s,r1,r2,r3),n) .
close

open INV . 
 :id(nslpk)
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op s : -> Sys .
	eq m1?(r3) = false .
	red inv130(s,n) implies inv130(sdm2(s,r1,r2,r3),n) .
close

--> 9. sdm3(s,r1,r2,r3,r4)
open INV . 
 :id(nslpk)
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
	eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
    eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
	eq sender(r3) = r1 .
	eq receiver(r3) = sender(r4) .
	eq key(cipher1(r3)) = sender(r4) .
    eq nonce(cipher1(r3)) = n(r1,sender(r4),r2) .
	eq principal(cipher1(r3)) = r1 .
	eq receiver(r4) = r1 .
	eq key(cipher2(r4)) = r1 .
    eq nonce1(cipher2(r4)) = n(r1,sender(r4),r2) .
	eq principal(cipher2(r4)) = sender(r4) .
-- 
  	eq sender(r4) = intruder .
  	eq n = nonce2(cipher2(r4)) .
  	eq r1 = intruder .
  	red inv130(s,n) implies inv130(sdm3(s,r1,r2,r3,r4),n) .
close

--> true
open INV . 
 :id(nslpk)
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
	eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
	eq sender(r3) = r1 .
	eq receiver(r3) = sender(r4) .
	eq key(cipher1(r3)) = sender(r4) .
  	eq nonce(cipher1(r3)) = n(r1,sender(r4),r2) .
	eq principal(cipher1(r3)) = r1 .
	eq receiver(r4) = r1 .
	eq key(cipher2(r4)) = r1 .
  	eq nonce1(cipher2(r4)) = n(r1,sender(r4),r2) .
	eq principal(cipher2(r4)) = sender(r4) .
-- 
  	eq sender(r4) = intruder .
  	eq n = nonce2(cipher2(r4)) .
  	eq (r1 = intruder) = false .
  	eq nonce2(cipher2(r4)) \in cnonce(nw(s)) = true .

  	red inv130(s,n) implies inv130(sdm3(s,r1,r2,r3,r4),n) .
close

open INV . 
 :id(nslpk)
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
	eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
	eq sender(r3) = r1 .
	eq receiver(r3) = sender(r4) .
	eq key(cipher1(r3)) = sender(r4) .
  	eq nonce(cipher1(r3)) = n(r1,sender(r4),r2) .
	eq principal(cipher1(r3)) = r1 .
	eq receiver(r4) = r1 .
	eq key(cipher2(r4)) = r1 .
  	eq nonce1(cipher2(r4)) = n(r1,sender(r4),r2) .
	eq principal(cipher2(r4)) = sender(r4) .
-- 
  	eq sender(r4) = intruder .
  	eq n = nonce2(cipher2(r4)) .
  	eq (r1 = intruder) = false .
  	eq nonce2(cipher2(r4)) \in cnonce(nw(s)) = false .

  	red inv150(s,cipher2(r4))
    implies inv130(s,n) implies inv130(sdm3(s,r1,r2,r3,r4),n) .
close

open INV . 
 :id(nslpk)
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
	eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
	eq sender(r3) = r1 .
	eq receiver(r3) = sender(r4) .
	eq key(cipher1(r3)) = sender(r4) .
  	eq nonce(cipher1(r3)) = n(r1,sender(r4),r2) .
	eq principal(cipher1(r3)) = r1 .
	eq receiver(r4) = r1 .
	eq key(cipher2(r4)) = r1 .
  	eq nonce1(cipher2(r4)) = n(r1,sender(r4),r2) .
	eq principal(cipher2(r4)) = sender(r4) .
-- 
  	eq sender(r4) = intruder .
  	eq (n = nonce2(cipher2(r4))) = false .
  	red inv130(s,n) implies inv130(sdm3(s,r1,r2,r3,r4),n) .
close

open INV . 
 :id(nslpk)
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
	eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
	eq sender(r3) = r1 .
	eq receiver(r3) = sender(r4) .
	eq key(cipher1(r3)) = sender(r4) .
  	eq nonce(cipher1(r3)) = n(r1,sender(r4),r2) .
	eq principal(cipher1(r3)) = r1 .
	eq receiver(r4) = r1 .
	eq key(cipher2(r4)) = r1 .
  	eq nonce1(cipher2(r4)) = n(r1,sender(r4),r2) .
	eq principal(cipher2(r4)) = sender(r4) .
-- 
  	eq (sender(r4) = intruder) = false .
  	red inv130(s,n) implies inv130(sdm3(s,r1,r2,r3,r4),n) .
close

open INV . 
 :id(nslpk)
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
	eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
	eq sender(r3) = r1 .
	eq receiver(r3) = sender(r4) .
	eq key(cipher1(r3)) = sender(r4) .
  	eq nonce(cipher1(r3)) = n(r1,sender(r4),r2) .
	eq principal(cipher1(r3)) = r1 .
	eq receiver(r4) = r1 .
	eq key(cipher2(r4)) = r1 .
  	eq nonce1(cipher2(r4)) = n(r1,sender(r4),r2) .
	eq (principal(cipher2(r4)) = sender(r4)) = false .
  	red inv130(s,n) implies inv130(sdm3(s,r1,r2,r3,r4),n) .
close

open INV . 
 :id(nslpk)
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
	eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
	eq sender(r3) = r1 .
	eq receiver(r3) = sender(r4) .
	eq key(cipher1(r3)) = sender(r4) .
  	eq nonce(cipher1(r3)) = n(r1,sender(r4),r2) .
	eq principal(cipher1(r3)) = r1 .
	eq receiver(r4) = r1 .
	eq key(cipher2(r4)) = r1 .
  	eq (nonce1(cipher2(r4)) = n(r1,sender(r4),r2)) = false .
  red inv130(s,n) implies inv130(sdm3(s,r1,r2,r3,r4),n) .
close

open INV . 
 :id(nslpk)
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
	eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
	eq sender(r3) = r1 .
	eq receiver(r3) = sender(r4) .
	eq key(cipher1(r3)) = sender(r4) .
  	eq nonce(cipher1(r3)) = n(r1,sender(r4),r2) .
	eq principal(cipher1(r3)) = r1 .
	eq receiver(r4) = r1 .
	eq (key(cipher2(r4)) = r1) = false .
  red inv130(s,n) implies inv130(sdm3(s,r1,r2,r3,r4),n) .
close

open INV . 
 :id(nslpk)
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
	eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
	eq sender(r3) = r1 .
	eq receiver(r3) = sender(r4) .
	eq key(cipher1(r3)) = sender(r4) .
  	eq nonce(cipher1(r3)) = n(r1,sender(r4),r2) .
	eq principal(cipher1(r3)) = r1 .
	eq (receiver(r4) = r1) = false .
  red inv130(s,n) implies inv130(sdm3(s,r1,r2,r3,r4),n) .
close

open INV . 
 :id(nslpk)
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
	eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
	eq sender(r3) = r1 .
	eq receiver(r3) = sender(r4) .
	eq key(cipher1(r3)) = sender(r4) .
  	eq nonce(cipher1(r3)) = n(r1,sender(r4),r2) .
	eq (principal(cipher1(r3)) = r1) = false .
  red inv130(s,n) implies inv130(sdm3(s,r1,r2,r3,r4),n) .
close

open INV . 
 :id(nslpk)
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
	eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
	eq sender(r3) = r1 .
	eq receiver(r3) = sender(r4) .
	eq key(cipher1(r3)) = sender(r4) .
  	eq (nonce(cipher1(r3)) = n(r1,sender(r4),r2)) = false .
  red inv130(s,n) implies inv130(sdm3(s,r1,r2,r3,r4),n) .
close

open INV . 
 :id(nslpk)
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
	eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
	eq sender(r3) = r1 .
	eq receiver(r3) = sender(r4) .
	eq (key(cipher1(r3)) = sender(r4)) = false .
  red inv130(s,n) implies inv130(sdm3(s,r1,r2,r3,r4),n) .
close

open INV . 
 :id(nslpk)
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
	eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
	eq sender(r3) = r1 .
	eq (receiver(r3) = sender(r4)) = false .
  red inv130(s,n) implies inv130(sdm3(s,r1,r2,r3,r4),n) .
close

open INV . 
 :id(nslpk)
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
	eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
	eq (sender(r3) = r1) = false .
  red inv130(s,n) implies inv130(sdm3(s,r1,r2,r3,r4),n) .
close

open INV . 
 :id(nslpk)
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
	eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq (creator(r3) = r1) = false .
  red inv130(s,n) implies inv130(sdm3(s,r1,r2,r3,r4),n) .
close

open INV . 
 :id(nslpk)
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
	eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = false .
  red inv130(s,n) implies inv130(sdm3(s,r1,r2,r3,r4),n) .
close

open INV . 
 :id(nslpk)
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
	eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = false .
  red inv130(s,n) implies inv130(sdm3(s,r1,r2,r3,r4),n) .
close

open INV . 
 :id(nslpk)
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
	eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = false .
  red inv130(s,n) implies inv130(sdm3(s,r1,r2,r3,r4),n) .
close

open INV . 
 :id(nslpk)
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
	eq (r3 \in nw(s)) = false .
  red inv130(s,n) implies inv130(sdm3(s,r1,r2,r3,r4),n) .
close

--> I) Base case
--> init
open INV .
  :id(nslpk)
	op c : -> Cipher1 .
  	red inv140(init,c) .
close

--> II) Induction cases
--> 1. fkm11(s,r1,r2,r3)
open INV .
  :id(nslpk)
	op c : -> Cipher1 .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Cipher1 .
	op s : -> Sys .
	eq (r3 \in cenc1(nw(s))) = true .
	eq key(r3) = intruder .
	red inv100(s,r3) implies inv140(s,c) implies inv140(fkm11(s,r1,r2,r3),c) .
close

open INV .
  :id(nslpk)
	op c : -> Cipher1 .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Cipher1 .
	op s : -> Sys .
	eq (r3 \in cenc1(nw(s))) = true .
	eq (key(r3) = intruder) = false .
    eq c = r3 .
	red inv140(s,c) implies inv140(fkm11(s,r1,r2,r3),c) .
close

open INV .
  :id(nslpk)
	op c : -> Cipher1 .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Cipher1 .
	op s : -> Sys .
	eq (r3 \in cenc1(nw(s))) = true .
	eq (key(r3) = intruder) = false .
    eq (c = r3) = false .
	red inv140(s,c) implies inv140(fkm11(s,r1,r2,r3),c) .
close

open INV .
  :id(nslpk)
	op c : -> Cipher1 .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Cipher1 .
	op s : -> Sys .
	eq (r3 \in cenc1(nw(s))) = false .
	red inv140(s,c) implies inv140(fkm11(s,r1,r2,r3),c) .
close

--> 2. fkm12(s,r1,r2,r3)
open INV .
  :id(nslpk)
	op c : -> Cipher1 .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Nonce .
	op s : -> Sys .
	eq (r3 \in cnonce(nw(s))) = true .
    eq c = enc1(r2,r3,r1) .
    eq r1 = intruder .
    eq r2 = intruder .
	red inv140(s,c) implies inv140(fkm12(s,r1,r2,r3),c) .
close

open INV .
  :id(nslpk)
	op c : -> Cipher1 .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Nonce .
	op s : -> Sys .
	eq (r3 \in cnonce(nw(s))) = true .
    eq c = enc1(r2,r3,r1) .
    eq r1 = intruder .
    eq (r2 = intruder) = false .
	red inv140(s,c) implies inv140(fkm12(s,r1,r2,r3),c) .
close

open INV .
  :id(nslpk)
	op c : -> Cipher1 .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Nonce .
	op s : -> Sys .
	eq (r3 \in cnonce(nw(s))) = true .
    eq c = enc1(r2,r3,r1) .
    eq (r1 = intruder) = false .
	red inv140(s,c) implies inv140(fkm12(s,r1,r2,r3),c) .
close

open INV .
  :id(nslpk)
	op c : -> Cipher1 .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Nonce .
	op s : -> Sys .
	eq (r3 \in cnonce(nw(s))) = true .
    eq (c = enc1(r2,r3,r1)) = false .
    eq r2 = intruder .
    eq nonce(c) = r3 .
	red inv140(s,c) implies inv140(fkm12(s,r1,r2,r3),c) .
close

open INV .
  :id(nslpk)
	op c : -> Cipher1 .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Nonce .
	op s : -> Sys .
	eq (r3 \in cnonce(nw(s))) = true .
    eq (c = enc1(r2,r3,r1)) = false .
    eq r2 = intruder .
    eq (nonce(c) = r3) = false .
 	red inv140(s,c) implies inv140(fkm12(s,r1,r2,r3),c) .
close

open INV .
  :id(nslpk)
	op c : -> Cipher1 .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Nonce .
	op s : -> Sys .
	eq (r3 \in cnonce(nw(s))) = true .
    eq (c = enc1(r2,r3,r1)) = false .
    eq (r2 = intruder) = false .
	red inv140(s,c) implies inv140(fkm12(s,r1,r2,r3),c) .
close

open INV .
  :id(nslpk)
	op c : -> Cipher1 .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Nonce .
	op s : -> Sys .
	eq (r3 \in cnonce(nw(s))) = false .
	red inv140(s,c) implies inv140(fkm12(s,r1,r2,r3),c) .
close

--> 3. fkm21(s,r1,r2,r3)
open INV .
  :id(nslpk)
	op c : -> Cipher1 .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Cipher2 .
	op s : -> Sys .
	eq (r3 \in cenc2(nw(s))) = true .
    eq key(r3) = intruder .
	red inv110(s,r3) implies inv140(s,c) implies inv140(fkm21(s,r1,r2,r3),c) .
close

open INV .
  :id(nslpk)
	op c : -> Cipher1 .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Cipher2 .
	op s : -> Sys .
	eq (r3 \in cenc2(nw(s))) = true .
    eq (key(r3) = intruder) = false .
	red inv140(s,c) implies inv140(fkm21(s,r1,r2,r3),c) .
close

open INV .
  :id(nslpk)
	op c : -> Cipher1 .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Cipher2 .
	op s : -> Sys .
	eq (r3 \in cenc2(nw(s))) = false .
	red inv140(s,c) implies inv140(fkm21(s,r1,r2,r3),c) .
close

--> 4. fkm22(s,r1,r2,r3,r4)
open INV .
  :id(nslpk)
	op c : -> Cipher1 .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Nonce .
	op r4 : -> Nonce .
	op s : -> Sys .
	eq (r3 \in cnonce(nw(s))) = true .
	eq (r4 \in cnonce(nw(s))) = true .
    eq r2 = intruder .
    eq nonce(c) = r3 .
	red inv140(s,c) implies inv140(fkm22(s,r1,r2,r3,r4),c) .
close

open INV .
  :id(nslpk)
	op c : -> Cipher1 .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Nonce .
	op r4 : -> Nonce .
	op s : -> Sys .
	eq (r3 \in cnonce(nw(s))) = true .
	eq (r4 \in cnonce(nw(s))) = true .
    eq r2 = intruder .
	eq (nonce(c) = r3) = false .
    eq nonce(c) = r4 .
	red inv140(s,c) implies inv140(fkm22(s,r1,r2,r3,r4),c) .
close

open INV .
  :id(nslpk)
	op c : -> Cipher1 .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Nonce .
	op r4 : -> Nonce .
	op s : -> Sys .
	eq (r3 \in cnonce(nw(s))) = true .
	eq (r4 \in cnonce(nw(s))) = true .
    eq r2 = intruder .
	eq (nonce(c) = r3) = false .
    eq (nonce(c) = r4) = false .
	red inv140(s,c) implies inv140(fkm22(s,r1,r2,r3,r4),c) .
close

open INV .
  :id(nslpk)
	op c : -> Cipher1 .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Nonce .
	op r4 : -> Nonce .
	op s : -> Sys .
	eq (r3 \in cnonce(nw(s))) = true .
	eq (r4 \in cnonce(nw(s))) = true .
    eq (r2 = intruder) = false .
	red inv140(s,c) implies inv140(fkm22(s,r1,r2,r3,r4),c) .
close

open INV .
  :id(nslpk)
	op c : -> Cipher1 .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Nonce .
	op r4 : -> Nonce .
	op s : -> Sys .
	eq (r3 \in cnonce(nw(s))) = true .
	eq (r4 \in cnonce(nw(s))) = false .
	red inv140(s,c) implies inv140(fkm22(s,r1,r2,r3,r4),c) .
close

open INV .
  :id(nslpk)
	op c : -> Cipher1 .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Nonce .
	op r4 : -> Nonce .
	op s : -> Sys .
	eq (r3 \in cnonce(nw(s))) = false .
	red inv140(s,c) implies inv140(fkm22(s,r1,r2,r3,r4),c) .
close

--> 5. fkm31(s,r1,r2,r3)
open INV .
  :id(nslpk)
	op c : -> Cipher1 .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Cipher3 .
	op s : -> Sys .
	eq (r3 \in cenc3(nw(s))) = true .
    eq key(r3) = intruder .
	red inv120(s,r3) implies inv140(s,c) implies inv140(fkm31(s,r1,r2,r3),c) .
close

open INV .
  :id(nslpk)
	op c : -> Cipher1 .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Cipher3 .
	op s : -> Sys .
	eq (r3 \in cenc3(nw(s))) = true .
    eq (key(r3) = intruder) = false .
	red inv140(s,c) implies inv140(fkm31(s,r1,r2,r3),c) .
close

open INV .
  :id(nslpk)
	op c : -> Cipher1 .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Cipher3 .
	op s : -> Sys .
	eq (r3 \in cenc3(nw(s))) = false .
	red inv140(s,c) implies inv140(fkm31(s,r1,r2,r3),c) .
close

--> 6. fkm32(s,r1,r2,r3)
open INV .
  :id(nslpk)
	op c : -> Cipher1 .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Nonce .
	op s : -> Sys .
	eq (r3 \in cnonce(nw(s))) = true .
    eq r2 = intruder .
    eq nonce(c) = r3 .
	red inv140(s,c) implies inv140(fkm32(s,r1,r2,r3),c) .
close

open INV .
  :id(nslpk)
	op c : -> Cipher1 .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Nonce .
	op s : -> Sys .
	eq (r3 \in cnonce(nw(s))) = true .
    eq r2 = intruder .
    eq (nonce(c) = r3) = false .
    red inv140(s,c) implies inv140(fkm32(s,r1,r2,r3),c) .
close

open INV .
  :id(nslpk)
	op c : -> Cipher1 .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Nonce .
	op s : -> Sys .
	eq (r3 \in cnonce(nw(s))) = true .
    eq (r2 = intruder) = false .
	red inv140(s,c) implies inv140(fkm32(s,r1,r2,r3),c) .
close

open INV .
  :id(nslpk)
	op c : -> Cipher1 .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Nonce .
	op s : -> Sys .
	eq (r3 \in cnonce(nw(s))) = false .
	red inv140(s,c) implies inv140(fkm32(s,r1,r2,r3),c) .
close

--> 7. sdm1(s,r1,r2,r3)
open INV .
  :id(nslpk)
	op c : -> Cipher1 .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Rand .
	op s : -> Sys .
	eq (r3 \in ur(s)) = true .
	red inv140(s,c) implies inv140(sdm1(s,r1,r2,r3),c) .
close

open INV .
  :id(nslpk)
	op c : -> Cipher1 .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Rand .
	op s : -> Sys .
	eq (r3 \in ur(s)) = false .
    eq c = enc1(r2,n(r1,r2,r3),r1) .
    eq r2 = intruder .
	red inv140(s,c) implies inv140(sdm1(s,r1,r2,r3),c) .
close

open INV .
  :id(nslpk)
	op c : -> Cipher1 .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Rand .
	op s : -> Sys .
	eq (r3 \in ur(s)) = false .
    eq c = enc1(r2,n(r1,r2,r3),r1) .
    eq (r2 = intruder) = false .
	eq r1 = intruder .
	eq n(intruder,r2,r3) \in cnonce(nw(s)) = true .
	red inv140(s,c) implies inv140(sdm1(s,r1,r2,r3),c) .
close

open INV .
  :id(nslpk)
	op c : -> Cipher1 .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Rand .
	op s : -> Sys .
	eq (r3 \in ur(s)) = false .
    eq c = enc1(r2,n(r1,r2,r3),r1) .
    eq (r2 = intruder) = false .
	eq r1 = intruder .
	eq n(intruder,r2,r3) \in cnonce(nw(s)) = false .
	red inv160(s,n(intruder,r2,r3)) 
	implies inv140(s,c) implies inv140(sdm1(s,r1,r2,r3),c) .
close

open INV .
  :id(nslpk)
	op c : -> Cipher1 .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Rand .
	op s : -> Sys .
	eq (r3 \in ur(s)) = false .
    eq c = enc1(r2,n(r1,r2,r3),r1) .
    eq (r2 = intruder) = false .
	eq (r1 = intruder) = false .
	red inv140(s,c) implies inv140(sdm1(s,r1,r2,r3),c) .
close

open INV .
  :id(nslpk)
	op c : -> Cipher1 .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Rand .
	op s : -> Sys .
	eq (r3 \in ur(s)) = false .
    eq (c = enc1(r2,n(r1,r2,r3),r1)) = false .
	eq r2 = intruder .
    eq nonce(c) = n(r1,intruder,r3) .
	red inv140(s,c) implies inv140(sdm1(s,r1,r2,r3),c) .
close

open INV .
  :id(nslpk)
	op c : -> Cipher1 .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Rand .
	op s : -> Sys .
	eq (r3 \in ur(s)) = false .
    eq (c = enc1(r2,n(r1,r2,r3),r1)) = false .
	eq r2 = intruder .
    eq (nonce(c) = n(r1,intruder,r3)) = false .
	red inv140(s,c) implies inv140(sdm1(s,r1,r2,r3),c) .
close

open INV .
  :id(nslpk)
	op c : -> Cipher1 .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Rand .
	op s : -> Sys .
	eq (r3 \in ur(s)) = false .
    eq (c = enc1(r2,n(r1,r2,r3),r1)) = false .
	eq (r2 = intruder) = false .
	red inv140(s,c) implies inv140(sdm1(s,r1,r2,r3),c) .
close

--> 8. sdm2(s,r1,r2,r3)
open INV .
  :id(nslpk)
	op c : -> Cipher1 .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op s : -> Sys .
  	eq r3 \in nw(s) = true .
  	eq m1?(r3) = true .
  	eq receiver(r3) = r1 .
  	eq key(cipher1(r3)) = r1 .
  	eq principal(cipher1(r3)) = sender(r3) .
  	eq r2 \in ur(s) = true .
	red inv140(s,c) implies inv140(sdm2(s,r1,r2,r3),c) .
close

open INV .
  :id(nslpk)
	op c : -> Cipher1 .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op s : -> Sys .
  	eq r3 \in nw(s) = true .
  	eq m1?(r3) = true .
  	eq receiver(r3) = r1 .
  	eq key(cipher1(r3)) = r1 .
  	eq principal(cipher1(r3)) = sender(r3) .
  	eq r2 \in ur(s) = false .
  	eq sender(r3) = intruder .
  	eq nonce(c) = n(r1,intruder,r2) .
	red inv140(s,c) implies inv140(sdm2(s,r1,r2,r3),c) .
close

open INV .
  :id(nslpk)
	op c : -> Cipher1 .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op s : -> Sys .
  	eq r3 \in nw(s) = true .
  	eq m1?(r3) = true .
  	eq receiver(r3) = r1 .
  	eq key(cipher1(r3)) = r1 .
  	eq principal(cipher1(r3)) = sender(r3) .
  	eq r2 \in ur(s) = false .
  	eq sender(r3) = intruder .
  	eq (nonce(c) = n(r1,intruder,r2)) = false .
  	eq nonce(c) = nonce(cipher1(r3)) .
	red inv140(s,c) implies inv140(sdm2(s,r1,r2,r3),c) .
close

open INV .
  :id(nslpk)
	op c : -> Cipher1 .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op s : -> Sys .
  	eq r3 \in nw(s) = true .
  	eq m1?(r3) = true .
  	eq receiver(r3) = r1 .
  	eq key(cipher1(r3)) = r1 .
  	eq principal(cipher1(r3)) = sender(r3) .
  	eq r2 \in ur(s) = false .
  	eq sender(r3) = intruder .
  	eq (nonce(c) = n(r1,intruder,r2)) = false .
  	eq (nonce(c) = nonce(cipher1(r3))) = false .
	red inv140(s,c) implies inv140(sdm2(s,r1,r2,r3),c) .
close

open INV .
  :id(nslpk)
	op c : -> Cipher1 .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op s : -> Sys .
  	eq r3 \in nw(s) = true .
  	eq m1?(r3) = true .
  	eq receiver(r3) = r1 .
  	eq key(cipher1(r3)) = r1 .
  	eq principal(cipher1(r3)) = sender(r3) .
  	eq r2 \in ur(s) = false .
  	eq (sender(r3) = intruder) = false .
	red inv140(s,c) implies inv140(sdm2(s,r1,r2,r3),c) .
close

open INV .
  :id(nslpk)
	op c : -> Cipher1 .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op s : -> Sys .
  	eq r3 \in nw(s) = true .
  	eq m1?(r3) = true .
  	eq receiver(r3) = r1 .
  	eq key(cipher1(r3)) = r1 .
  	eq (principal(cipher1(r3)) = sender(r3)) = false .
	red inv140(s,c) implies inv140(sdm2(s,r1,r2,r3),c) .
close

open INV .
  :id(nslpk)
	op c : -> Cipher1 .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op s : -> Sys .
  	eq r3 \in nw(s) = true .
  	eq m1?(r3) = true .
	eq receiver(r3) = r1 .
  	eq (key(cipher1(r3)) = r1) = false .
	red inv140(s,c) implies inv140(sdm2(s,r1,r2,r3),c) .
close

open INV .
  :id(nslpk)
	op c : -> Cipher1 .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op s : -> Sys .
  	eq r3 \in nw(s) = true .
  	eq m1?(r3) = true .
  	eq (receiver(r3) = r1) = false .
	red inv140(s,c) implies inv140(sdm2(s,r1,r2,r3),c) .
close

open INV .
  :id(nslpk)
	op c : -> Cipher1 .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op s : -> Sys .
  	eq r3 \in nw(s) = true .
  	eq m1?(r3) = false .
	red inv140(s,c) implies inv140(sdm2(s,r1,r2,r3),c) .
close

open INV .
  :id(nslpk)
	op c : -> Cipher1 .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op s : -> Sys .
  	eq r3 \in nw(s) = false .
	red inv140(s,c) implies inv140(sdm2(s,r1,r2,r3),c) .
close

--> 9. sdm3(s,r1,r2,r3,r4)
open INV .
  :id(nslpk)
	op c : -> Cipher1 .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
	eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
	eq sender(r3) = r1 .
	eq receiver(r3) = sender(r4) .
	eq key(cipher1(r3)) = sender(r4) .
    eq nonce(cipher1(r3)) = n(r1,sender(r4),r2) .
	eq principal(cipher1(r3)) = r1 .
	eq receiver(r4) = r1 .
	eq key(cipher2(r4)) = r1 .
    eq nonce1(cipher2(r4)) = n(r1,sender(r4),r2) .
	eq principal(cipher2(r4)) = sender(r4) .

    eq sender(r4) = intruder .
	eq nonce(c) = nonce2(cipher2(r4)) .
	red inv140(s,c) implies inv140(sdm3(s,r1,r2,r3,r4),c) .
close

open INV .
  :id(nslpk)
	op c : -> Cipher1 .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
	eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
	eq sender(r3) = r1 .
	eq receiver(r3) = sender(r4) .
	eq key(cipher1(r3)) = sender(r4) .
    eq nonce(cipher1(r3)) = n(r1,sender(r4),r2) .
	eq principal(cipher1(r3)) = r1 .
	eq receiver(r4) = r1 .
	eq key(cipher2(r4)) = r1 .
    eq nonce1(cipher2(r4)) = n(r1,sender(r4),r2) .
	eq principal(cipher2(r4)) = sender(r4) .

    eq sender(r4) = intruder .
	eq (nonce(c) = nonce2(cipher2(r4))) = false .
	red inv140(s,c) implies inv140(sdm3(s,r1,r2,r3,r4),c) .
close

open INV .
  :id(nslpk)
	op c : -> Cipher1 .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
	eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
	eq sender(r3) = r1 .
	eq receiver(r3) = sender(r4) .
	eq key(cipher1(r3)) = sender(r4) .
    eq nonce(cipher1(r3)) = n(r1,sender(r4),r2) .
	eq principal(cipher1(r3)) = r1 .
	eq receiver(r4) = r1 .
	eq key(cipher2(r4)) = r1 .
    eq nonce1(cipher2(r4)) = n(r1,sender(r4),r2) .
	eq principal(cipher2(r4)) = sender(r4) .

    eq (sender(r4) = intruder) = false .
	red inv140(s,c) implies inv140(sdm3(s,r1,r2,r3,r4),c) .
close

open INV .
  :id(nslpk)
	op c : -> Cipher1 .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
	eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
	eq sender(r3) = r1 .
	eq receiver(r3) = sender(r4) .
	eq key(cipher1(r3)) = sender(r4) .
    eq nonce(cipher1(r3)) = n(r1,sender(r4),r2) .
	eq principal(cipher1(r3)) = r1 .
	eq receiver(r4) = r1 .
	eq key(cipher2(r4)) = r1 .
    eq nonce1(cipher2(r4)) = n(r1,sender(r4),r2) .
	eq (principal(cipher2(r4)) = sender(r4)) = false .
	red inv140(s,c) implies inv140(sdm3(s,r1,r2,r3,r4),c) .
close

open INV .
  :id(nslpk)
	op c : -> Cipher1 .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
	eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
	eq sender(r3) = r1 .
	eq receiver(r3) = sender(r4) .
	eq key(cipher1(r3)) = sender(r4) .
    eq nonce(cipher1(r3)) = n(r1,sender(r4),r2) .
	eq principal(cipher1(r3)) = r1 .
	eq receiver(r4) = r1 .
	eq key(cipher2(r4)) = r1 .
    eq (nonce1(cipher2(r4)) = n(r1,sender(r4),r2)) = false .
	red inv140(s,c) implies inv140(sdm3(s,r1,r2,r3,r4),c) .
close

open INV .
  :id(nslpk)
	op c : -> Cipher1 .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
	eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
	eq sender(r3) = r1 .
	eq receiver(r3) = sender(r4) .
	eq key(cipher1(r3)) = sender(r4) .
    eq nonce(cipher1(r3)) = n(r1,sender(r4),r2) .
	eq principal(cipher1(r3)) = r1 .
	eq receiver(r4) = r1 .
	eq (key(cipher2(r4)) = r1) = false .
	red inv140(s,c) implies inv140(sdm3(s,r1,r2,r3,r4),c) .
close

open INV .
  :id(nslpk)
	op c : -> Cipher1 .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
	eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
	eq sender(r3) = r1 .
	eq receiver(r3) = sender(r4) .
	eq key(cipher1(r3)) = sender(r4) .
    eq nonce(cipher1(r3)) = n(r1,sender(r4),r2) .
	eq principal(cipher1(r3)) = r1 .
	eq (receiver(r4) = r1) = false .
	red inv140(s,c) implies inv140(sdm3(s,r1,r2,r3,r4),c) .
close

open INV .
  :id(nslpk)
	op c : -> Cipher1 .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
	eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
	eq sender(r3) = r1 .
	eq receiver(r3) = sender(r4) .
	eq key(cipher1(r3)) = sender(r4) .
    eq nonce(cipher1(r3)) = n(r1,sender(r4),r2) .
	eq (principal(cipher1(r3)) = r1) = false .
	red inv140(s,c) implies inv140(sdm3(s,r1,r2,r3,r4),c) .
close

open INV .
  :id(nslpk)
	op c : -> Cipher1 .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
	eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
	eq sender(r3) = r1 .
	eq receiver(r3) = sender(r4) .
	eq key(cipher1(r3)) = sender(r4) .
    eq (nonce(cipher1(r3)) = n(r1,sender(r4),r2)) = false .
	red inv140(s,c) implies inv140(sdm3(s,r1,r2,r3,r4),c) .
close

open INV .
  :id(nslpk)
	op c : -> Cipher1 .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
	eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
	eq sender(r3) = r1 .
	eq receiver(r3) = sender(r4) .
	eq (key(cipher1(r3)) = sender(r4)) = false .
	red inv140(s,c) implies inv140(sdm3(s,r1,r2,r3,r4),c) .
close

open INV .
  :id(nslpk)
	op c : -> Cipher1 .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
	eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
	eq sender(r3) = r1 .
	eq (receiver(r3) = sender(r4)) = false .
	red inv140(s,c) implies inv140(sdm3(s,r1,r2,r3,r4),c) .
close

open INV .
  :id(nslpk)
	op c : -> Cipher1 .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
	eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
	eq (sender(r3) = r1) = false .
	red inv140(s,c) implies inv140(sdm3(s,r1,r2,r3,r4),c) .
close

open INV .
  :id(nslpk)
	op c : -> Cipher1 .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
	eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq (creator(r3) = r1) = false .
	red inv140(s,c) implies inv140(sdm3(s,r1,r2,r3,r4),c) .
close

open INV .
  :id(nslpk)
	op c : -> Cipher1 .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
	eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = false .
	red inv140(s,c) implies inv140(sdm3(s,r1,r2,r3,r4),c) .
close

open INV .
  :id(nslpk)
	op c : -> Cipher1 .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
	eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = false .
	red inv140(s,c) implies inv140(sdm3(s,r1,r2,r3,r4),c) .
close

open INV .
  :id(nslpk)
	op c : -> Cipher1 .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
	eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = false .
	red inv140(s,c) implies inv140(sdm3(s,r1,r2,r3,r4),c) .
close

open INV .
  :id(nslpk)
	op c : -> Cipher1 .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
	eq (r3 \in nw(s)) = false .
	red inv140(s,c) implies inv140(sdm3(s,r1,r2,r3,r4),c) .
close

--> I) Base case
--> init
open INV .
  :id(nslpk)
	op c : -> Cipher2 .
  	red inv150(init,c) .
close

--> II) Induction cases
--> 1. fkm11(s,r1,r2,r3)
open INV .
  :id(nslpk)
	op c : -> Cipher2 .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Cipher1 .
	op s : -> Sys .
	eq (r3 \in cenc1(nw(s))) = true .
    eq key(r3) = intruder .
	red inv100(s,r3) implies inv150(s,c) implies inv150(fkm11(s,r1,r2,r3),c) .
close

open INV .
  :id(nslpk)
	op c : -> Cipher2 .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Cipher1 .
	op s : -> Sys .
	eq (r3 \in cenc1(nw(s))) = true .
    eq (key(r3) = intruder) = false .
	red inv150(s,c) implies inv150(fkm11(s,r1,r2,r3),c) .
close

open INV .
  :id(nslpk)
	op c : -> Cipher2 .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Cipher1 .
	op s : -> Sys .
	eq (r3 \in cenc1(nw(s))) = false .
	red inv150(s,c) implies inv150(fkm11(s,r1,r2,r3),c) .
close

--> 2. fkm12(s,r1,r2,r3)
open INV .
  :id(nslpk)
	op c : -> Cipher2 .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Nonce .
	op s : -> Sys .
	eq (r3 \in cnonce(nw(s))) = true .
    eq r2 = intruder .
    eq nonce2(c) = r3 . 
	red inv150(s,c) implies inv150(fkm12(s,r1,r2,r3),c) .
close

open INV .
  :id(nslpk)
	op c : -> Cipher2 .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Nonce .
	op s : -> Sys .
	eq (r3 \in cnonce(nw(s))) = true .
    eq r2 = intruder .
    eq (nonce2(c) = r3) = false . 
	red inv150(s,c) implies inv150(fkm12(s,r1,r2,r3),c) .
close

open INV .
  :id(nslpk)
	op c : -> Cipher2 .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Nonce .
	op s : -> Sys .
	eq (r3 \in cnonce(nw(s))) = true .
    eq (r2 = intruder) = false . 
	red inv150(s,c) implies inv150(fkm12(s,r1,r2,r3),c) .
close

open INV .
  :id(nslpk)
	op c : -> Cipher2 .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Nonce .
	op s : -> Sys .
	eq (r3 \in cnonce(nw(s))) = false .
	red inv150(s,c) implies inv150(fkm12(s,r1,r2,r3),c) .
close

--> 3. fkm21(s,r1,r2,r3)
open INV .
  :id(nslpk)
	op c : -> Cipher2 .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Cipher2 .
	op s : -> Sys .
	eq (r3 \in cenc2(nw(s))) = true .
    eq key(r3) = intruder .
	red inv110(s,r3) implies inv150(s,c) implies inv150(fkm21(s,r1,r2,r3),c) .
close

open INV .
  :id(nslpk)
	op c : -> Cipher2 .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Cipher2 .
	op s : -> Sys .
	eq (r3 \in cenc2(nw(s))) = true .
    eq (key(r3) = intruder) = false .
	eq c = r3 .
	red inv150(s,c) implies inv150(fkm21(s,r1,r2,r3),c) .
close

open INV .
  :id(nslpk)
	op c : -> Cipher2 .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Cipher2 .
	op s : -> Sys .
	eq (r3 \in cenc2(nw(s))) = true .
    eq (key(r3) = intruder) = false .
	eq (c = r3) = false .
	red inv150(s,c) implies inv150(fkm21(s,r1,r2,r3),c) .
close

open INV .
  :id(nslpk)
	op c : -> Cipher2 .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Cipher2 .
	op s : -> Sys .
	eq (r3 \in cenc2(nw(s))) = false .
	red inv150(s,c) implies inv150(fkm21(s,r1,r2,r3),c) .
close

--> 4. fkm22(s,r1,r2,r3,r4)
open INV .
  :id(nslpk)
	op c : -> Cipher2 .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Nonce .
	op r4 : -> Nonce .
	op s : -> Sys .
	eq (r3 \in cnonce(nw(s))) = true .
	eq (r4 \in cnonce(nw(s))) = true .

    eq c = enc2(r2,r3,r4,r1) .
	
    eq r1 = intruder .
    eq r2 = intruder .
	red inv150(s,c) implies inv150(fkm22(s,r1,r2,r3,r4),c) .
close

open INV .
  :id(nslpk)
	op c : -> Cipher2 .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Nonce .
	op r4 : -> Nonce .
	op s : -> Sys .
	eq (r3 \in cnonce(nw(s))) = true .
	eq (r4 \in cnonce(nw(s))) = true .

    eq c = enc2(r2,r3,r4,r1) .

    eq r1 = intruder .
    eq (r2 = intruder) = false .
	red inv150(s,c) implies inv150(fkm22(s,r1,r2,r3,r4),c) .
close

open INV .
  :id(nslpk)
	op c : -> Cipher2 .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Nonce .
	op r4 : -> Nonce .
	op s : -> Sys .
	eq (r3 \in cnonce(nw(s))) = true .
	eq (r4 \in cnonce(nw(s))) = true .

	eq c = enc2(r2,r3,r4,r1) .

    eq (r1 = intruder) = false .
	red inv150(s,c) implies inv150(fkm22(s,r1,r2,r3,r4),c) .
close

open INV .
  :id(nslpk)
	op c : -> Cipher2 .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Nonce .
	op r4 : -> Nonce .
	op s : -> Sys .
	eq (r3 \in cnonce(nw(s))) = true .
	eq (r4 \in cnonce(nw(s))) = true .

	eq (c = enc2(r2,r3,r4,r1)) = false .

	eq r2 = intruder .
    eq nonce2(c) = r3 .
	red inv150(s,c) implies inv150(fkm22(s,r1,r2,r3,r4),c) .
close

open INV .
  :id(nslpk)
	op c : -> Cipher2 .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Nonce .
	op r4 : -> Nonce .
	op s : -> Sys .
	eq (r3 \in cnonce(nw(s))) = true .
	eq (r4 \in cnonce(nw(s))) = true .

	eq (c = enc2(r2,r3,r4,r1)) = false .

	eq r2 = intruder .
    eq (nonce2(c) = r3) = false .
	eq nonce2(c) = r4 .
	red inv150(s,c) implies inv150(fkm22(s,r1,r2,r3,r4),c) .
close

open INV .
  :id(nslpk)
	op c : -> Cipher2 .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Nonce .
	op r4 : -> Nonce .
	op s : -> Sys .
	eq (r3 \in cnonce(nw(s))) = true .
	eq (r4 \in cnonce(nw(s))) = true .

	eq (c = enc2(r2,r3,r4,r1)) = false .

	eq r2 = intruder .
    eq (nonce2(c) = r3) = false .
	eq (nonce2(c) = r4) = false .
	red inv150(s,c) implies inv150(fkm22(s,r1,r2,r3,r4),c) .
close

open INV .
  :id(nslpk)
	op c : -> Cipher2 .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Nonce .
	op r4 : -> Nonce .
	op s : -> Sys .
	eq (r3 \in cnonce(nw(s))) = true .
	eq (r4 \in cnonce(nw(s))) = true .

	eq (c = enc2(r2,r3,r4,r1)) = false .

	eq (r2 = intruder) = false .
	red inv150(s,c) implies inv150(fkm22(s,r1,r2,r3,r4),c) .
close

open INV .
  :id(nslpk)
	op c : -> Cipher2 .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Nonce .
	op r4 : -> Nonce .
	op s : -> Sys .
	eq (r3 \in cnonce(nw(s))) = true .
	eq (r4 \in cnonce(nw(s))) = false .
	red inv150(s,c) implies inv150(fkm22(s,r1,r2,r3,r4),c) .
close


open INV .
  :id(nslpk)
	op c : -> Cipher2 .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Nonce .
	op r4 : -> Nonce .
	op s : -> Sys .
	eq (r3 \in cnonce(nw(s))) = false .
	red inv150(s,c) implies inv150(fkm22(s,r1,r2,r3,r4),c) .
close

--> 5. fkm31(s,r1,r2,r3)
open INV .
  :id(nslpk)
	op c : -> Cipher2 .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Cipher3 .
	op s : -> Sys .
	eq (r3 \in cenc3(nw(s))) = true .
    eq key(r3) = intruder .
	red inv120(s,r3) implies inv150(s,c) implies inv150(fkm31(s,r1,r2,r3),c) .
close

open INV .
  :id(nslpk)
	op c : -> Cipher2 .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Cipher3 .
	op s : -> Sys .
	eq (r3 \in cenc3(nw(s))) = true .
    eq (key(r3) = intruder) = false .
	red inv150(s,c) implies inv150(fkm31(s,r1,r2,r3),c) .
close

open INV .
  :id(nslpk)
	op c : -> Cipher2 .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Cipher3 .
	op s : -> Sys .
	eq (r3 \in cenc3(nw(s))) = false .
	red inv150(s,c) implies inv150(fkm31(s,r1,r2,r3),c) .
close

--> 6. fkm32(s,r1,r2,r3)
open INV .
  :id(nslpk)
	op c : -> Cipher2 .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Nonce .
	op s : -> Sys .
	eq (r3 \in cnonce(nw(s))) = true .
    eq r2 = intruder .
    eq nonce2(c) = r3 . 
	red inv150(s,c) implies inv150(fkm32(s,r1,r2,r3),c) .
close

open INV .
  :id(nslpk)
	op c : -> Cipher2 .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Nonce .
	op s : -> Sys .
	eq (r3 \in cnonce(nw(s))) = true .
    eq r2 = intruder .
    eq (nonce2(c) = r3) = false . 
	red inv150(s,c) implies inv150(fkm32(s,r1,r2,r3),c) .
close

open INV .
  :id(nslpk)
	op c : -> Cipher2 .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Nonce .
	op s : -> Sys .
	eq (r3 \in cnonce(nw(s))) = true .
    eq (r2 = intruder) = false . 
	red inv150(s,c) implies inv150(fkm32(s,r1,r2,r3),c) .
close

open INV .
  :id(nslpk)
	op c : -> Cipher2 .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Nonce .
	op s : -> Sys .
	eq (r3 \in cnonce(nw(s))) = false .
	red inv150(s,c) implies inv150(fkm32(s,r1,r2,r3),c) .
close

--> 7. sdm1(s,r1,r2,r3)
open INV .
  :id(nslpk)
	op c : -> Cipher2 .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Rand .
	op s : -> Sys .
	eq (r3 \in ur(s)) = true .
	red inv150(s,c) implies inv150(sdm1(s,r1,r2,r3),c) .
close

open INV .
  :id(nslpk)
	op c : -> Cipher2 .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Rand .
	op s : -> Sys .
	eq (r3 \in ur(s)) = false .
    eq r2 = intruder .
	eq nonce2(c) = n(r1,intruder,r3) .
	red inv150(s,c) implies inv150(sdm1(s,r1,r2,r3),c) .
close

open INV .
  :id(nslpk)
	op c : -> Cipher2 .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Rand .
	op s : -> Sys .
	eq (r3 \in ur(s)) = false .
    eq r2 = intruder .
	eq (nonce2(c) = n(r1,intruder,r3)) = false .
	red inv150(s,c) implies inv150(sdm1(s,r1,r2,r3),c) .
close

open INV .
  :id(nslpk)
	op c : -> Cipher2 .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Rand .
	op s : -> Sys .
	eq (r3 \in ur(s)) = false .
    eq (r2 = intruder) = false .
	red inv150(s,c) implies inv150(sdm1(s,r1,r2,r3),c) .
close

--> 8. sdm2(s,r1,r2,r3)
open INV .
  :id(nslpk)
	op c : -> Cipher2 .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op s : -> Sys .
  	eq r3 \in nw(s) = true .
  	eq m1?(r3) = true .
  	eq receiver(r3) = r1 .
  	eq key(cipher1(r3)) = r1 .
  	eq principal(cipher1(r3)) = sender(r3) .
  	eq r2 \in ur(s) = true .
	red inv150(s,c) implies inv150(sdm2(s,r1,r2,r3),c) .
close

open INV .
  :id(nslpk)
	op c : -> Cipher2 .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op s : -> Sys .
  	eq r3 \in nw(s) = true .
  	eq m1?(r3) = true .
  	eq receiver(r3) = r1 .
  	eq key(cipher1(r3)) = r1 .
  	eq principal(cipher1(r3)) = sender(r3) .
  	eq r2 \in ur(s) = false .

  	eq c = enc2(sender(r3),nonce(cipher1(r3)),n(r1,sender(r3),r2),r1) .
  
  	eq sender(r3) = intruder .
	red inv150(s,c) implies inv150(sdm2(s,r1,r2,r3),c) .
close

open INV .
  :id(nslpk)
	op c : -> Cipher2 .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op s : -> Sys .
  	eq r3 \in nw(s) = true .
  	eq m1?(r3) = true .
  	eq receiver(r3) = r1 .
  	eq key(cipher1(r3)) = r1 .
  	eq principal(cipher1(r3)) = sender(r3) .
  	eq r2 \in ur(s) = false .

  	eq c = enc2(sender(r3),nonce(cipher1(r3)),n(r1,sender(r3),r2),r1) .
  
  	eq (sender(r3) = intruder) = false .
  	eq r1 = intruder .
  	eq n(intruder,sender(r3),r2) \in cnonce(nw(s)) = true .
	red inv160(s,n(intruder,sender(r3),r2)) implies inv150(s,c) implies inv150(sdm2(s,r1,r2,r3),c) .
close

open INV .
  :id(nslpk)
	op c : -> Cipher2 .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op s : -> Sys .
  	eq r3 \in nw(s) = true .
  	eq m1?(r3) = true .
  	eq receiver(r3) = r1 .
  	eq key(cipher1(r3)) = r1 .
  	eq principal(cipher1(r3)) = sender(r3) .
  	eq r2 \in ur(s) = false .

  	eq c = enc2(sender(r3),nonce(cipher1(r3)),n(r1,sender(r3),r2),r1) .
  
  	eq (sender(r3) = intruder) = false .
  	eq r1 = intruder .
  	eq n(intruder,sender(r3),r2) \in cnonce(nw(s)) = false .
	red inv160(s,n(intruder,sender(r3),r2)) implies inv150(s,c) implies inv150(sdm2(s,r1,r2,r3),c) .
close

open INV .
  :id(nslpk)
	op c : -> Cipher2 .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op s : -> Sys .
  	eq r3 \in nw(s) = true .
  	eq m1?(r3) = true .
  	eq receiver(r3) = r1 .
  	eq key(cipher1(r3)) = r1 .
  	eq principal(cipher1(r3)) = sender(r3) .
  	eq r2 \in ur(s) = false .

  	eq c = enc2(sender(r3),nonce(cipher1(r3)),n(r1,sender(r3),r2),r1) .
  
  	eq (sender(r3) = intruder) = false .
  	eq (r1 = intruder) = false .
	red inv150(s,c) implies inv150(sdm2(s,r1,r2,r3),c) .
close

open INV .
  :id(nslpk)
	op c : -> Cipher2 .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op s : -> Sys .
  	eq r3 \in nw(s) = true .
  	eq m1?(r3) = true .
  	eq receiver(r3) = r1 .
  	eq key(cipher1(r3)) = r1 .
  	eq principal(cipher1(r3)) = sender(r3) .
  	eq r2 \in ur(s) = false .

  	eq (c = enc2(sender(r3),nonce(cipher1(r3)),n(r1,sender(r3),r2),r1)) = false .
  	eq sender(r3) = intruder .
  	eq nonce2(c) = nonce(cipher1(r3)) .
  	red inv150(s,c) implies inv150(sdm2(s,r1,r2,r3),c) .
close

open INV .
  :id(nslpk)
	op c : -> Cipher2 .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op s : -> Sys .
  	eq r3 \in nw(s) = true .
  	eq m1?(r3) = true .
  	eq receiver(r3) = r1 .
  	eq key(cipher1(r3)) = r1 .
  	eq principal(cipher1(r3)) = sender(r3) .
  	eq r2 \in ur(s) = false .

  	eq (c = enc2(sender(r3),nonce(cipher1(r3)),n(r1,sender(r3),r2),r1)) = false .
  	eq sender(r3) = intruder .
  	eq (nonce2(c) = nonce(cipher1(r3))) = false .
  	eq nonce2(c) = n(r1,intruder,r2) .
	red inv150(s,c) implies inv150(sdm2(s,r1,r2,r3),c) .
close

open INV .
  :id(nslpk)
	op c : -> Cipher2 .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op s : -> Sys .
  	eq r3 \in nw(s) = true .
  	eq m1?(r3) = true .
  	eq receiver(r3) = r1 .
  	eq key(cipher1(r3)) = r1 .
  	eq principal(cipher1(r3)) = sender(r3) .
  	eq r2 \in ur(s) = false .

  	eq (c = enc2(sender(r3),nonce(cipher1(r3)),n(r1,sender(r3),r2),r1)) = false .
  	eq sender(r3) = intruder .
  	eq (nonce2(c) = nonce(cipher1(r3))) = false .
  	eq (nonce2(c) = n(r1,intruder,r2)) = false .
	red inv150(s,c) implies inv150(sdm2(s,r1,r2,r3),c) .
close

open INV .
  :id(nslpk)
	op c : -> Cipher2 .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op s : -> Sys .
  	eq r3 \in nw(s) = true .
  	eq m1?(r3) = true .
  	eq receiver(r3) = r1 .
  	eq key(cipher1(r3)) = r1 .
  	eq principal(cipher1(r3)) = sender(r3) .
  	eq r2 \in ur(s) = false .

  	eq (c = enc2(sender(r3),nonce(cipher1(r3)),n(r1,sender(r3),r2),r1)) = false .
  	eq (sender(r3) = intruder) = false .
	red inv150(s,c) implies inv150(sdm2(s,r1,r2,r3),c) .
close

open INV .
  :id(nslpk)
	op c : -> Cipher2 .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op s : -> Sys .
  	eq r3 \in nw(s) = true .
  	eq m1?(r3) = true .
  	eq receiver(r3) = r1 .
  	eq key(cipher1(r3)) = r1 .
  	eq (principal(cipher1(r3)) = sender(r3)) = false .
	red inv150(s,c) implies inv150(sdm2(s,r1,r2,r3),c) .
close

open INV .
  :id(nslpk)
	op c : -> Cipher2 .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op s : -> Sys .
  	eq r3 \in nw(s) = true .
  	eq m1?(r3) = true .
  	eq receiver(r3) = r1 .
  	eq (key(cipher1(r3)) = r1) = false .
	red inv150(s,c) implies inv150(sdm2(s,r1,r2,r3),c) .
close

open INV .
  :id(nslpk)
	op c : -> Cipher2 .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op s : -> Sys .
  	eq r3 \in nw(s) = true .
  	eq m1?(r3) = true .
  	eq (receiver(r3) = r1) = false .
	red inv150(s,c) implies inv150(sdm2(s,r1,r2,r3),c) .
close

open INV .
  :id(nslpk)
	op c : -> Cipher2 .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op s : -> Sys .
  	eq r3 \in nw(s) = true .
  	eq m1?(r3) = false .
	red inv150(s,c) implies inv150(sdm2(s,r1,r2,r3),c) .
close

open INV .
  :id(nslpk)
	op c : -> Cipher2 .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op s : -> Sys .
  	eq r3 \in nw(s) = false .
	red inv150(s,c) implies inv150(sdm2(s,r1,r2,r3),c) .
close

--> 9. sdm3(s,r1,r2,r3,r4)
open INV .
  :id(nslpk)
	op c : -> Cipher2 .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
    eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
	eq sender(r3) = r1 .
	eq receiver(r3) = sender(r4) .
	eq key(cipher1(r3)) = sender(r4) .
    eq nonce(cipher1(r3)) = n(r1,sender(r4),r2) .
	eq principal(cipher1(r3)) = r1 .
	eq receiver(r4) = r1 .
	eq key(cipher2(r4)) = r1 .
    eq nonce1(cipher2(r4)) = n(r1,sender(r4),r2) .
	eq principal(cipher2(r4)) = sender(r4) .

    eq sender(r4) = intruder .
    eq nonce2(c) = nonce2(cipher2(r4)) .
    red inv150(s,c) implies inv150(sdm3(s,r1,r2,r3,r4),c) .
close

open INV .
  :id(nslpk)
	op c : -> Cipher2 .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
    eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
	eq sender(r3) = r1 .
	eq receiver(r3) = sender(r4) .
	eq key(cipher1(r3)) = sender(r4) .
    eq nonce(cipher1(r3)) = n(r1,sender(r4),r2) .
	eq principal(cipher1(r3)) = r1 .
	eq receiver(r4) = r1 .
	eq key(cipher2(r4)) = r1 .
    eq nonce1(cipher2(r4)) = n(r1,sender(r4),r2) .
	eq principal(cipher2(r4)) = sender(r4) .

    eq sender(r4) = intruder .
    eq (nonce2(c) = nonce2(cipher2(r4))) = false .
    red inv150(s,c) implies inv150(sdm3(s,r1,r2,r3,r4),c) .
close

open INV .
  :id(nslpk)
	op c : -> Cipher2 .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
    eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
	eq sender(r3) = r1 .
	eq receiver(r3) = sender(r4) .
	eq key(cipher1(r3)) = sender(r4) .
    eq nonce(cipher1(r3)) = n(r1,sender(r4),r2) .
	eq principal(cipher1(r3)) = r1 .
	eq receiver(r4) = r1 .
	eq key(cipher2(r4)) = r1 .
    eq nonce1(cipher2(r4)) = n(r1,sender(r4),r2) .
	eq principal(cipher2(r4)) = sender(r4) .

    eq (sender(r4) = intruder) = false .
    red inv150(s,c) implies inv150(sdm3(s,r1,r2,r3,r4),c) .
close

open INV .
  :id(nslpk)
	op c : -> Cipher2 .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
    eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
	eq sender(r3) = r1 .
	eq receiver(r3) = sender(r4) .
	eq key(cipher1(r3)) = sender(r4) .
    eq nonce(cipher1(r3)) = n(r1,sender(r4),r2) .
	eq principal(cipher1(r3)) = r1 .
	eq receiver(r4) = r1 .
	eq key(cipher2(r4)) = r1 .
    eq nonce1(cipher2(r4)) = n(r1,sender(r4),r2) .
	eq (principal(cipher2(r4)) = sender(r4)) = false .
    red inv150(s,c) implies inv150(sdm3(s,r1,r2,r3,r4),c) .
close

open INV .
  :id(nslpk)
	op c : -> Cipher2 .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
    eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
	eq sender(r3) = r1 .
	eq receiver(r3) = sender(r4) .
	eq key(cipher1(r3)) = sender(r4) .
    eq nonce(cipher1(r3)) = n(r1,sender(r4),r2) .
	eq principal(cipher1(r3)) = r1 .
	eq receiver(r4) = r1 .
	eq key(cipher2(r4)) = r1 .
    eq (nonce1(cipher2(r4)) = n(r1,sender(r4),r2)) = false .
    red inv150(s,c) implies inv150(sdm3(s,r1,r2,r3,r4),c) .
close

open INV .
  :id(nslpk)
	op c : -> Cipher2 .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
    eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
	eq sender(r3) = r1 .
	eq receiver(r3) = sender(r4) .
	eq key(cipher1(r3)) = sender(r4) .
    eq nonce(cipher1(r3)) = n(r1,sender(r4),r2) .
	eq principal(cipher1(r3)) = r1 .
	eq receiver(r4) = r1 .
	eq (key(cipher2(r4)) = r1) = false .
    red inv150(s,c) implies inv150(sdm3(s,r1,r2,r3,r4),c) .
close

open INV .
  :id(nslpk)
	op c : -> Cipher2 .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
    eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
	eq sender(r3) = r1 .
	eq receiver(r3) = sender(r4) .
	eq key(cipher1(r3)) = sender(r4) .
    eq nonce(cipher1(r3)) = n(r1,sender(r4),r2) .
	eq principal(cipher1(r3)) = r1 .
	eq (receiver(r4) = r1) = false .
    red inv150(s,c) implies inv150(sdm3(s,r1,r2,r3,r4),c) .
close

open INV .
  :id(nslpk)
	op c : -> Cipher2 .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
    eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
	eq sender(r3) = r1 .
	eq receiver(r3) = sender(r4) .
	eq key(cipher1(r3)) = sender(r4) .
    eq nonce(cipher1(r3)) = n(r1,sender(r4),r2) .
	eq (principal(cipher1(r3)) = r1) = false .
    red inv150(s,c) implies inv150(sdm3(s,r1,r2,r3,r4),c) .
close

open INV .
  :id(nslpk)
	op c : -> Cipher2 .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
    eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
	eq sender(r3) = r1 .
	eq receiver(r3) = sender(r4) .
	eq key(cipher1(r3)) = sender(r4) .
    eq (nonce(cipher1(r3)) = n(r1,sender(r4),r2)) = false .
    red inv150(s,c) implies inv150(sdm3(s,r1,r2,r3,r4),c) .
close

open INV .
  :id(nslpk)
	op c : -> Cipher2 .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
	eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
    eq sender(r3) = r1 .
    eq receiver(r3) = sender(r4) .
    eq (key(cipher1(r3)) = sender(r4)) = false .
	red inv150(s,c) implies inv150(sdm3(s,r1,r2,r3,r4),c) .
close

open INV .
  :id(nslpk)
	op c : -> Cipher2 .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
	eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
    eq sender(r3) = r1 .
    eq (receiver(r3) = sender(r4)) = false .
	red inv150(s,c) implies inv150(sdm3(s,r1,r2,r3,r4),c) .
close

open INV .
  :id(nslpk)
	op c : -> Cipher2 .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
	eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
    eq (sender(r3) = r1) = false .
	red inv150(s,c) implies inv150(sdm3(s,r1,r2,r3,r4),c) .
close

open INV .
  :id(nslpk)
	op c : -> Cipher2 .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
	eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq (creator(r3) = r1) = false .
	red inv150(s,c) implies inv150(sdm3(s,r1,r2,r3,r4),c) .
close

open INV .
  :id(nslpk)
	op c : -> Cipher2 .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
	eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = false .
	red inv150(s,c) implies inv150(sdm3(s,r1,r2,r3,r4),c) .
close

open INV .
  :id(nslpk)
	op c : -> Cipher2 .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
	eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = false .
	red inv150(s,c) implies inv150(sdm3(s,r1,r2,r3,r4),c) .
close

open INV .
  :id(nslpk)
	op c : -> Cipher2 .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
	eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = false .
	red inv150(s,c) implies inv150(sdm3(s,r1,r2,r3,r4),c) .
close

open INV .
  :id(nslpk)
	op c : -> Cipher2 .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
	eq (r3 \in nw(s)) = false .
	red inv150(s,c) implies inv150(sdm3(s,r1,r2,r3,r4),c) .
close

--> I) Base case
--> init
open INV .
  :id(nslpk)
	op n : -> Nonce .
  	red inv160(init,n) .
close

--> II) Induction cases
--> 1. fkm11(s,r1,r2,r3)
open INV .
  :id(nslpk)
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Cipher1 .
	op s : -> Sys .
	eq (r3 \in cenc1(nw(s))) = true .
    eq key(r3) = intruder .
	red inv100(s,r3) implies inv160(s,n) implies inv160(fkm11(s,r1,r2,r3),n) .
close

open INV .
  :id(nslpk)
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Cipher1 .
	op s : -> Sys .
	eq (r3 \in cenc1(nw(s))) = true .
    eq (key(r3) = intruder) = false .
	red inv160(s,n) implies inv160(fkm11(s,r1,r2,r3),n) .
close

open INV .
  :id(nslpk)
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Cipher1 .
	op s : -> Sys .
	eq (r3 \in cenc1(nw(s))) = false .
	red inv160(s,n) implies inv160(fkm11(s,r1,r2,r3),n) .
close

--> 2. fkm12(s,r1,r2,r3)
open INV .
  :id(nslpk)
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Nonce .
	op s : -> Sys .
	eq (r3 \in cnonce(nw(s))) = true .
    eq r2 = intruder .
    eq n = r3 . 
	red inv160(s,n) implies inv160(fkm12(s,r1,r2,r3),n) .
close

open INV .
  :id(nslpk)
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Nonce .
	op s : -> Sys .
	eq (r3 \in cnonce(nw(s))) = true .
    eq r2 = intruder .
    eq (n = r3) = false .
	red inv160(s,n) implies inv160(fkm12(s,r1,r2,r3),n) .
close

open INV .
  :id(nslpk)
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Nonce .
	op s : -> Sys .
	eq (r3 \in cnonce(nw(s))) = true .
    eq (r2 = intruder) = false .
	red inv160(s,n) implies inv160(fkm12(s,r1,r2,r3),n) .
close

open INV .
  :id(nslpk)
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Nonce .
	op s : -> Sys .
	eq (r3 \in cnonce(nw(s))) = false .
	red inv160(s,n) implies inv160(fkm12(s,r1,r2,r3),n) .
close

--> 3. fkm21(s,r1,r2,r3)
open INV .
  :id(nslpk)
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Cipher2 .
	op s : -> Sys .
	eq (r3 \in cenc2(nw(s))) = true .
    eq key(r3) = intruder .
	red inv110(s,r3) implies inv160(s,n) implies inv160(fkm21(s,r1,r2,r3),n) .
close

open INV .
  :id(nslpk)
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Cipher2 .
	op s : -> Sys .
	eq (r3 \in cenc2(nw(s))) = true .
    eq (key(r3) = intruder) = false .
	red inv160(s,n) implies inv160(fkm21(s,r1,r2,r3),n) .
close

open INV .
  :id(nslpk)
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Cipher2 .
	op s : -> Sys .
	eq (r3 \in cenc2(nw(s))) = false .
	red inv160(s,n) implies inv160(fkm21(s,r1,r2,r3),n) .
close

--> 4. fkm22(s,r1,r2,r3,r4)
open INV .
  :id(nslpk)
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Nonce .
	op r4 : -> Nonce .
	op s : -> Sys .
	eq (r3 \in cnonce(nw(s))) = true .
	eq (r4 \in cnonce(nw(s))) = true .
	
    eq r2 = intruder .
    eq n = r3 .
	red inv160(s,n) implies inv160(fkm22(s,r1,r2,r3,r4),n) .
close

open INV .
  :id(nslpk)
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Nonce .
	op r4 : -> Nonce .
	op s : -> Sys .
	eq (r3 \in cnonce(nw(s))) = true .
	eq (r4 \in cnonce(nw(s))) = true .
	
    eq r2 = intruder .
    eq (n = r3) = false .
	eq n = r4 .
	red inv160(s,n) implies inv160(fkm22(s,r1,r2,r3,r4),n) .
close

open INV .
  :id(nslpk)
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Nonce .
	op r4 : -> Nonce .
	op s : -> Sys .
	eq (r3 \in cnonce(nw(s))) = true .
	eq (r4 \in cnonce(nw(s))) = true .
	
    eq r2 = intruder .
    eq (n = r3) = false .
	eq (n = r4) = false .
	red inv160(s,n) implies inv160(fkm22(s,r1,r2,r3,r4),n) .
close

open INV .
  :id(nslpk)
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Nonce .
	op r4 : -> Nonce .
	op s : -> Sys .
	eq (r3 \in cnonce(nw(s))) = true .
	eq (r4 \in cnonce(nw(s))) = true .
    eq (r2 = intruder) = false .
	red inv160(s,n) implies inv160(fkm22(s,r1,r2,r3,r4),n) .
close

open INV .
  :id(nslpk)
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Nonce .
	op r4 : -> Nonce .
	op s : -> Sys .
	eq (r3 \in cnonce(nw(s))) = true .
	eq (r4 \in cnonce(nw(s))) = false .
	red inv160(s,n) implies inv160(fkm22(s,r1,r2,r3,r4),n) .
close

open INV .
  :id(nslpk)
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Nonce .
	op r4 : -> Nonce .
	op s : -> Sys .
	eq (r3 \in cnonce(nw(s))) = false .
	red inv160(s,n) implies inv160(fkm22(s,r1,r2,r3,r4),n) .
close

--> 5. fkm31(s,r1,r2,r3)
open INV .
  :id(nslpk)
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Cipher3 .
	op s : -> Sys .
	eq (r3 \in cenc3(nw(s))) = true .
    eq key(r3) = intruder .
	red inv120(s,r3) implies inv160(s,n) implies inv160(fkm31(s,r1,r2,r3),n) .
close

open INV .
  :id(nslpk)
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Cipher3 .
	op s : -> Sys .
	eq (r3 \in cenc3(nw(s))) = true .
    eq (key(r3) = intruder) = false .
	red inv160(s,n) implies inv160(fkm31(s,r1,r2,r3),n) .
close

open INV .
  :id(nslpk)
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Cipher3 .
	op s : -> Sys .
	eq (r3 \in cenc3(nw(s))) = false .
	red inv160(s,n) implies inv160(fkm31(s,r1,r2,r3),n) .
close

--> 6. fkm32(s,r1,r2,r3)
open INV .
  :id(nslpk)
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Nonce .
	op s : -> Sys .
	eq (r3 \in cnonce(nw(s))) = true .
    eq r2 = intruder .
    eq n = r3 . 
	red inv160(s,n) implies inv160(fkm32(s,r1,r2,r3),n) .
close

open INV .
  :id(nslpk)
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Nonce .
	op s : -> Sys .
	eq (r3 \in cnonce(nw(s))) = true .
    eq r2 = intruder .
    eq (n = r3) = false .
	red inv160(s,n) implies inv160(fkm32(s,r1,r2,r3),n) .
close

open INV .
  :id(nslpk)
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Nonce .
	op s : -> Sys .
	eq (r3 \in cnonce(nw(s))) = true .
    eq (r2 = intruder) = false .
	red inv160(s,n) implies inv160(fkm32(s,r1,r2,r3),n) .
close

open INV .
  :id(nslpk)
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Nonce .
	op s : -> Sys .
	eq (r3 \in cnonce(nw(s))) = false .
	red inv160(s,n) implies inv160(fkm32(s,r1,r2,r3),n) .
close

--> 7. sdm1(s,r1,r2,r3)
open INV .
  :id(nslpk)
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Rand .
	op s : -> Sys .
	eq (r3 \in ur(s)) = true .
	red inv160(s,n) implies inv160(sdm1(s,r1,r2,r3),n) .
close

open INV .
  :id(nslpk)
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Rand .
	op s : -> Sys .
	eq (r3 \in ur(s)) = false .
    eq r2 = intruder .
    eq n = n(r1,intruder,r3) . 
	red inv160(s,n) implies inv160(sdm1(s,r1,r2,r3),n) .
close

open INV .
  :id(nslpk)
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Rand .
	op s : -> Sys .
	eq (r3 \in ur(s)) = false .
    eq r2 = intruder .
    eq (n = n(r1,intruder,r3)) = false . 
	red inv160(s,n) implies inv160(sdm1(s,r1,r2,r3),n) .
close

open INV .
  :id(nslpk)
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Rand .
	op s : -> Sys .
	eq (r3 \in ur(s)) = false .
    eq (r2 = intruder) = false .
	red inv160(s,n) implies inv160(sdm1(s,r1,r2,r3),n) .
close

--> 8. sdm2(s,r1,r2,r3)
open INV .
  :id(nslpk)
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op s : -> Sys .
  	eq r3 \in nw(s) = true .
  	eq m1?(r3) = true .
  	eq receiver(r3) = r1 .
  	eq key(cipher1(r3)) = r1 .
  	eq principal(cipher1(r3)) = sender(r3) .
  	eq r2 \in ur(s) = true .
	red inv160(s,n) implies inv160(sdm2(s,r1,r2,r3),n) .
close

open INV .
  :id(nslpk)
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op s : -> Sys .
  	eq r3 \in nw(s) = true .
  	eq m1?(r3) = true .
  	eq receiver(r3) = r1 .
  	eq key(cipher1(r3)) = r1 .
  	eq principal(cipher1(r3)) = sender(r3) .
  	eq r2 \in ur(s) = false .

  	eq sender(r3) = intruder .
  	eq n = nonce(cipher1(r3)) .  
	red inv160(s,n) implies inv160(sdm2(s,r1,r2,r3),n) .
close

open INV .
  :id(nslpk)
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op s : -> Sys .
  	eq r3 \in nw(s) = true .
  	eq m1?(r3) = true .
  	eq receiver(r3) = r1 .
  	eq key(cipher1(r3)) = r1 .
  	eq principal(cipher1(r3)) = sender(r3) .
  	eq r2 \in ur(s) = false .

  	eq sender(r3) = intruder .
  	eq (n = nonce(cipher1(r3))) = false . 
  	eq n = n(r1,intruder,r2) . 
	red inv160(s,n) implies inv160(sdm2(s,r1,r2,r3),n) .
close

open INV .
  :id(nslpk)
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op s : -> Sys .
  	eq r3 \in nw(s) = true .
  	eq m1?(r3) = true .
  	eq receiver(r3) = r1 .
  	eq key(cipher1(r3)) = r1 .
  	eq principal(cipher1(r3)) = sender(r3) .
  	eq r2 \in ur(s) = false .

  	eq sender(r3) = intruder .
  	eq (n = nonce(cipher1(r3))) = false . 
  	eq (n = n(r1,intruder,r2)) = false . 
	red inv160(s,n) implies inv160(sdm2(s,r1,r2,r3),n) .
close

open INV .
  :id(nslpk)
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op s : -> Sys .
  	eq r3 \in nw(s) = true .
  	eq m1?(r3) = true .
  	eq receiver(r3) = r1 .
  	eq key(cipher1(r3)) = r1 .
  	eq principal(cipher1(r3)) = sender(r3) .
  	eq r2 \in ur(s) = false .

  	eq (sender(r3) = intruder) = false .
	red inv160(s,n) implies inv160(sdm2(s,r1,r2,r3),n) .
close

open INV .
  :id(nslpk)
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op s : -> Sys .
  	eq r3 \in nw(s) = true .
  	eq m1?(r3) = true .
  	eq receiver(r3) = r1 .
  	eq key(cipher1(r3)) = r1 .
  	eq (principal(cipher1(r3)) = sender(r3)) = false .
	red inv160(s,n) implies inv160(sdm2(s,r1,r2,r3),n) .
close

open INV .
  :id(nslpk)
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op s : -> Sys .
  	eq r3 \in nw(s) = true .
  	eq m1?(r3) = true .
  	eq receiver(r3) = r1 .
  	eq (key(cipher1(r3)) = r1) = false .
	red inv160(s,n) implies inv160(sdm2(s,r1,r2,r3),n) .
close

open INV .
  :id(nslpk)
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op s : -> Sys .
 	eq r3 \in nw(s) = true .
  	eq m1?(r3) = true .
  	eq (receiver(r3) = r1) = false .
	red inv160(s,n) implies inv160(sdm2(s,r1,r2,r3),n) .
close

open INV .
  :id(nslpk)
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op s : -> Sys .
  	eq r3 \in nw(s) = true .
  	eq m1?(r3) = false .
	red inv160(s,n) implies inv160(sdm2(s,r1,r2,r3),n) .
close

open INV .
  :id(nslpk)
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op s : -> Sys .
  	eq r3 \in nw(s) = false .
	red inv160(s,n) implies inv160(sdm2(s,r1,r2,r3),n) .
close

--> 9. sdm3(s,r1,r2,r3,r4)
open INV .
  :id(nslpk)
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
    eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
    eq sender(r3) = r1 .
    eq receiver(r3) = sender(r4) .
    eq key(cipher1(r3)) = sender(r4) .
	eq nonce(cipher1(r3)) = n(r1,sender(r4),r2) .
    eq principal(cipher1(r3)) = r1 .
    eq receiver(r4) = r1 .
	eq key(cipher2(r4)) = r1 .
    eq nonce1(cipher2(r4)) = n(r1,sender(r4),r2) .
	eq principal(cipher2(r4)) = sender(r4) .

    eq sender(r4) = intruder .
    eq n = nonce2(cipher2(r4)) .
	red inv160(s,n) implies inv160(sdm3(s,r1,r2,r3,r4),n) .
close

open INV .
  :id(nslpk)
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
    eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
    eq sender(r3) = r1 .
    eq receiver(r3) = sender(r4) .
    eq key(cipher1(r3)) = sender(r4) .
	eq nonce(cipher1(r3)) = n(r1,sender(r4),r2) .
    eq principal(cipher1(r3)) = r1 .
    eq receiver(r4) = r1 .
	eq key(cipher2(r4)) = r1 .
    eq nonce1(cipher2(r4)) = n(r1,sender(r4),r2) .
	eq principal(cipher2(r4)) = sender(r4) .

    eq sender(r4) = intruder .
    eq (n = nonce2(cipher2(r4))) = false .
	red inv160(s,n) implies inv160(sdm3(s,r1,r2,r3,r4),n) .
close

open INV .
  :id(nslpk)
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
    eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
    eq sender(r3) = r1 .
    eq receiver(r3) = sender(r4) .
    eq key(cipher1(r3)) = sender(r4) .
	eq nonce(cipher1(r3)) = n(r1,sender(r4),r2) .
    eq principal(cipher1(r3)) = r1 .
    eq receiver(r4) = r1 .
	eq key(cipher2(r4)) = r1 .
    eq nonce1(cipher2(r4)) = n(r1,sender(r4),r2) .
	eq principal(cipher2(r4)) = sender(r4) .

    eq (sender(r4) = intruder) = false .
	red inv160(s,n) implies inv160(sdm3(s,r1,r2,r3,r4),n) .
close

open INV .
  :id(nslpk)
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
    eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
    eq sender(r3) = r1 .
    eq receiver(r3) = sender(r4) .
    eq key(cipher1(r3)) = sender(r4) .
	eq nonce(cipher1(r3)) = n(r1,sender(r4),r2) .
    eq principal(cipher1(r3)) = r1 .
    eq receiver(r4) = r1 .
	eq key(cipher2(r4)) = r1 .
    eq nonce1(cipher2(r4)) = n(r1,sender(r4),r2) .
	eq (principal(cipher2(r4)) = sender(r4)) = false .
	red inv160(s,n) implies inv160(sdm3(s,r1,r2,r3,r4),n) .
close

open INV .
  :id(nslpk)
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
    eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
    eq sender(r3) = r1 .
    eq receiver(r3) = sender(r4) .
    eq key(cipher1(r3)) = sender(r4) .
	eq nonce(cipher1(r3)) = n(r1,sender(r4),r2) .
    eq principal(cipher1(r3)) = r1 .
    eq receiver(r4) = r1 .
	eq key(cipher2(r4)) = r1 .
    eq (nonce1(cipher2(r4)) = n(r1,sender(r4),r2)) = false .
	red inv160(s,n) implies inv160(sdm3(s,r1,r2,r3,r4),n) .
close

open INV .
  :id(nslpk)
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
    eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
    eq sender(r3) = r1 .
    eq receiver(r3) = sender(r4) .
    eq key(cipher1(r3)) = sender(r4) .
	eq nonce(cipher1(r3)) = n(r1,sender(r4),r2) .
    eq principal(cipher1(r3)) = r1 .
    eq receiver(r4) = r1 .
	eq (key(cipher2(r4)) = r1) = false .
	red inv160(s,n) implies inv160(sdm3(s,r1,r2,r3,r4),n) .
close

open INV .
  :id(nslpk)
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
    eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
    eq sender(r3) = r1 .
    eq receiver(r3) = sender(r4) .
    eq key(cipher1(r3)) = sender(r4) .
	eq nonce(cipher1(r3)) = n(r1,sender(r4),r2) .
    eq principal(cipher1(r3)) = r1 .
    eq (receiver(r4) = r1) = false .
	red inv160(s,n) implies inv160(sdm3(s,r1,r2,r3,r4),n) .
close

open INV .
  :id(nslpk)
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
    eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
    eq sender(r3) = r1 .
    eq receiver(r3) = sender(r4) .
    eq key(cipher1(r3)) = sender(r4) .
	eq nonce(cipher1(r3)) = n(r1,sender(r4),r2) .
    eq (principal(cipher1(r3)) = r1) = false .
	red inv160(s,n) implies inv160(sdm3(s,r1,r2,r3,r4),n) .
close

open INV .
  :id(nslpk)
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
    eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
    eq sender(r3) = r1 .
    eq receiver(r3) = sender(r4) .
    eq key(cipher1(r3)) = sender(r4) .
	eq (nonce(cipher1(r3)) = n(r1,sender(r4),r2)) = false .
	red inv160(s,n) implies inv160(sdm3(s,r1,r2,r3,r4),n) .
close

open INV .
  :id(nslpk)
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
	eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
    eq sender(r3) = r1 .
    eq receiver(r3) = sender(r4) .
    eq (key(cipher1(r3)) = sender(r4)) = false .
	red inv160(s,n) implies inv160(sdm3(s,r1,r2,r3,r4),n) .
close

open INV .
  :id(nslpk)
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
	eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
    eq sender(r3) = r1 .
    eq (receiver(r3) = sender(r4)) = false .
	red inv160(s,n) implies inv160(sdm3(s,r1,r2,r3,r4),n) .
close

open INV .
  :id(nslpk)
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
	eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
    eq (sender(r3) = r1) = false .
	red inv160(s,n) implies inv160(sdm3(s,r1,r2,r3,r4),n) .
close

open INV .
  :id(nslpk)
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
	eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq (creator(r3) = r1) = false .
	red inv160(s,n) implies inv160(sdm3(s,r1,r2,r3,r4),n) .
close

open INV .
  :id(nslpk)
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
	eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = false .
	red inv160(s,n) implies inv160(sdm3(s,r1,r2,r3,r4),n) .
close

open INV .
  :id(nslpk)
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
	eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = false .
	red inv160(s,n) implies inv160(sdm3(s,r1,r2,r3,r4),n) .
close

open INV .
  :id(nslpk)
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
	eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = false .
	red inv160(s,n) implies inv160(sdm3(s,r1,r2,r3,r4),n) .
close

open INV .
  :id(nslpk)
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
	eq (r3 \in nw(s)) = false .
	red inv160(s,n) implies inv160(sdm3(s,r1,r2,r3,r4),n) .
close

--> I) Base case
--> init
open INV .
  :id(nslpk)
	op p : -> Prin .
  op q : -> Prin .
	op q1 : -> Prin .
  op r : -> Rand .
	op n : -> Nonce .
  red inv170(init,p,q,q1,r,n) .
close

--> II) Induction cases
--> 1. fkm11(s,r1,r2,r3)
open INV .
  :id(nslpk)
  op p : -> Prin .
  op q : -> Prin .
	op q1 : -> Prin .
  op r : -> Rand .
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Cipher1 .
	op s : -> Sys .
	eq (r3 \in cenc1(nw(s))) = true .
  eq p = intruder .
	red inv170(s,p,q,q1,r,n) implies inv170(fkm11(s,r1,r2,r3),p,q,q1,r,n) .
close

open INV .
  :id(nslpk)
  op p : -> Prin .
  op q : -> Prin .
	op q1 : -> Prin .
  op r : -> Rand .
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Cipher1 .
	op s : -> Sys .
	eq (r3 \in cenc1(nw(s))) = true .
  eq (p = intruder) = false .
	red inv170(s,p,q,q1,r,n) implies inv170(fkm11(s,r1,r2,r3),p,q,q1,r,n) .
close

open INV .
  :id(nslpk)
  op p : -> Prin .
  op q : -> Prin .
	op q1 : -> Prin .
  op r : -> Rand .
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Cipher1 .
	op s : -> Sys .
	eq (r3 \in cenc1(nw(s))) = false .
	red inv170(s,p,q,q1,r,n) implies inv170(fkm11(s,r1,r2,r3),p,q,q1,r,n) .
close

--> 2. fkm12(s,r1,r2,r3)
open INV .
  :id(nslpk)
	op p : -> Prin .
  op q : -> Prin .
	op q1 : -> Prin .
  op r : -> Rand .
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Nonce .
	op s : -> Sys .
	eq (r3 \in cnonce(nw(s))) = true .
  eq p = intruder .
	red inv170(s,p,q,q1,r,n) implies inv170(fkm12(s,r1,r2,r3),p,q,q1,r,n) .
close

open INV .
  :id(nslpk)
	op p : -> Prin .
  op q : -> Prin .
	op q1 : -> Prin .
  op r : -> Rand .
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Nonce .
	op s : -> Sys .
	eq (r3 \in cnonce(nw(s))) = true .
  eq (p = intruder) = false .
	red inv170(s,p,q,q1,r,n) implies inv170(fkm12(s,r1,r2,r3),p,q,q1,r,n) .
close

open INV .
  :id(nslpk)
	op p : -> Prin .
  op q : -> Prin .
	op q1 : -> Prin .
  op r : -> Rand .
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Nonce .
	op s : -> Sys .
	eq (r3 \in cnonce(nw(s))) = false .
	red inv170(s,p,q,q1,r,n) implies inv170(fkm12(s,r1,r2,r3),p,q,q1,r,n) .
close

--> 3. fkm21(s,r1,r2,r3)
open INV .
  :id(nslpk)
  op p : -> Prin .
  op q : -> Prin .
  op q1 : -> Prin .
  op r : -> Rand .
  op n : -> Nonce .
  op r1 : -> Prin .
  op r2 : -> Prin .
  op r3 : -> Cipher2 .
  op s : -> Sys .
  eq r3 \in cenc2(nw(s)) = true .
  eq p = intruder .
  red inv170(s,p,q,q1,r,n) implies inv170(fkm21(s,r1,r2,r3),p,q,q1,r,n) .
close

open INV .
  :id(nslpk)
  op p : -> Prin .
  op q : -> Prin .
  op q1 : -> Prin .
  op r : -> Rand .
  op n : -> Nonce .
  op r1 : -> Prin .
  op r2 : -> Prin .
  op r3 : -> Cipher2 .
  op s : -> Sys .
  eq r3 \in cenc2(nw(s)) = true .
  eq (p = intruder) = false .
  eq m1(p,p,q,enc1(q,n(p,q,r),p)) \in nw(s) = true .
  eq q = intruder .
  red inv170(s,p,q,q1,r,n) implies inv170(fkm21(s,r1,r2,r3),p,q,q1,r,n) .
close

open INV .
  :id(nslpk)
  op p : -> Prin .
  op q : -> Prin .
  op q1 : -> Prin .
  op r : -> Rand .
  op n : -> Nonce .
  op r1 : -> Prin .
  op r2 : -> Prin .
  op r3 : -> Cipher2 .
  op s : -> Sys .
  eq r3 \in cenc2(nw(s)) = true .
  eq (p = intruder) = false .
  eq m1(p,p,q,enc1(q,n(p,q,r),p)) \in nw(s) = true .
  eq (q = intruder) = false .
  eq q1 = intruder .
  eq r1 = q .
  eq r2 = p .
  eq enc2(p,n(p,q,r),n,q) = r3 .
  eq m2(q,q,p,r3) \in nw(s) = true .
  red inv170(s,p,q,q1,r,n) implies inv170(fkm21(s,r1,r2,r3),p,q,q1,r,n) .
close

open INV .
  :id(nslpk)
  op p : -> Prin .
  op q : -> Prin .
  op q1 : -> Prin .
  op r : -> Rand .
  op n : -> Nonce .
  op r1 : -> Prin .
  op r2 : -> Prin .
  op r3 : -> Cipher2 .
  op s : -> Sys .
  eq r3 \in cenc2(nw(s)) = true .
  eq (p = intruder) = false .
  eq m1(p,p,q,enc1(q,n(p,q,r),p)) \in nw(s) = true .
  eq (q = intruder) = false .
  eq q1 = intruder .
  eq r1 = q .
  eq r2 = p .
  eq enc2(p,n(p,q,r),n,q) = r3 .
  eq m2(q,q,p,r3) \in nw(s) = false .
  red inv220(s,p,q,r,n) implies inv170(s,p,q,q1,r,n) implies inv170(fkm21(s,r1,r2,r3),p,q,q1,r,n) .
close

open INV .
  :id(nslpk)
  op p : -> Prin .
  op q : -> Prin .
  op q1 : -> Prin .
  op r : -> Rand .
  op n : -> Nonce .
  op r1 : -> Prin .
  op r2 : -> Prin .
  op r3 : -> Cipher2 .
  op s : -> Sys .
  eq r3 \in cenc2(nw(s)) = true .
  eq (p = intruder) = false .
  eq m1(p,p,q,enc1(q,n(p,q,r),p)) \in nw(s) = true .
  eq (q = intruder) = false .
  eq q1 = intruder .
  eq r1 = q .
  eq r2 = p .
  eq (enc2(p,n(p,q,r),n,q) = r3) = false .
  red inv170(s,p,q,q1,r,n) implies inv170(fkm21(s,r1,r2,r3),p,q,q1,r,n) .
close

open INV .
  :id(nslpk)
  op p : -> Prin .
  op q : -> Prin .
  op q1 : -> Prin .
  op r : -> Rand .
  op n : -> Nonce .
  op r1 : -> Prin .
  op r2 : -> Prin .
  op r3 : -> Cipher2 .
  op s : -> Sys .
  eq r3 \in cenc2(nw(s)) = true .
  eq (p = intruder) = false .
  eq m1(p,p,q,enc1(q,n(p,q,r),p)) \in nw(s) = true .
  eq (q = intruder) = false .
  eq q1 = intruder .
  eq r1 = q .
  eq (r2 = p) = false .
  red inv170(s,p,q,q1,r,n) implies inv170(fkm21(s,r1,r2,r3),p,q,q1,r,n) .
close

open INV .
  :id(nslpk)
  op p : -> Prin .
  op q : -> Prin .
  op q1 : -> Prin .
  op r : -> Rand .
  op n : -> Nonce .
  op r1 : -> Prin .
  op r2 : -> Prin .
  op r3 : -> Cipher2 .
  op s : -> Sys .
  eq r3 \in cenc2(nw(s)) = true .
  eq (p = intruder) = false .
  eq m1(p,p,q,enc1(q,n(p,q,r),p)) \in nw(s) = true .
  eq (q = intruder) = false .
  eq q1 = intruder .
  eq (r1 = q) = false .
  red inv170(s,p,q,q1,r,n) implies inv170(fkm21(s,r1,r2,r3),p,q,q1,r,n) .
close

open INV .
  :id(nslpk)
  op p : -> Prin .
  op q : -> Prin .
  op q1 : -> Prin .
  op r : -> Rand .
  op n : -> Nonce .
  op r1 : -> Prin .
  op r2 : -> Prin .
  op r3 : -> Cipher2 .
  op s : -> Sys .
  eq r3 \in cenc2(nw(s)) = true .
  eq (p = intruder) = false .
  eq m1(p,p,q,enc1(q,n(p,q,r),p)) \in nw(s) = true .
  eq (q = intruder) = false .
  eq (q1 = intruder) = false .
  red inv170(s,p,q,q1,r,n) implies inv170(fkm21(s,r1,r2,r3),p,q,q1,r,n) .
close

open INV .
  :id(nslpk)
  op p : -> Prin .
  op q : -> Prin .
  op q1 : -> Prin .
  op r : -> Rand .
  op n : -> Nonce .
  op r1 : -> Prin .
  op r2 : -> Prin .
  op r3 : -> Cipher2 .
  op s : -> Sys .
  eq r3 \in cenc2(nw(s)) = true .
  eq (p = intruder) = false .
  eq m1(p,p,q,enc1(q,n(p,q,r),p)) \in nw(s) = false .
  red inv170(s,p,q,q1,r,n) implies inv170(fkm21(s,r1,r2,r3),p,q,q1,r,n) .
close

open INV .
  :id(nslpk)
  op p : -> Prin .
  op q : -> Prin .
  op q1 : -> Prin .
  op r : -> Rand .
  op n : -> Nonce .
  op r1 : -> Prin .
  op r2 : -> Prin .
  op r3 : -> Cipher2 .
  op s : -> Sys .
  eq r3 \in cenc2(nw(s)) = false .
  red inv170(s,p,q,q1,r,n) implies inv170(fkm21(s,r1,r2,r3),p,q,q1,r,n) .
close

--> 4. fkm22(s,r1,r2,r3,r4)
open INV .
  :id(nslpk)
  op p : -> Prin .
  op q : -> Prin .
  op q1 : -> Prin .
  op r : -> Rand .
  op n : -> Nonce .
  op r1 : -> Prin .
  op r2 : -> Prin .
  op r3 : -> Nonce .
  op r4 : -> Nonce .
  op s : -> Sys .
  eq r3 = n(p,q,r) .
  eq (n(p,q,r) \in cnonce(nw(s))) = true .
  eq (r4 \in cnonce(nw(s))) = true .
  red inv130(s,r3) implies inv170(s,p,q,q1,r,n) implies inv170(fkm22(s,r1,r2,r3,r4),p,q,q1,r,n) .
close

open INV .
  :id(nslpk)
  op p : -> Prin .
  op q : -> Prin .
  op q1 : -> Prin .
  op r : -> Rand .
  op n : -> Nonce .
  op r1 : -> Prin .
  op r2 : -> Prin .
  op r3 : -> Nonce .
  op r4 : -> Nonce .
  op s : -> Sys .
  eq r3 = n(p,q,r) .
  eq (n(p,q,r) \in cnonce(nw(s))) = true .
  eq (r4 \in cnonce(nw(s))) = false .
  red inv170(s,p,q,q1,r,n) implies inv170(fkm22(s,r1,r2,r3,r4),p,q,q1,r,n) .
close

open INV .
  :id(nslpk)
  op p : -> Prin .
  op q : -> Prin .
  op q1 : -> Prin .
  op r : -> Rand .
  op n : -> Nonce .
  op r1 : -> Prin .
  op r2 : -> Prin .
  op r3 : -> Nonce .
  op r4 : -> Nonce .
  op s : -> Sys .
  eq r3 = n(p,q,r) .
  eq (n(p,q,r) \in cnonce(nw(s))) = false .
  red inv170(s,p,q,q1,r,n) implies inv170(fkm22(s,r1,r2,r3,r4),p,q,q1,r,n) .
close

open INV .
  :id(nslpk)
  op p : -> Prin .
  op q : -> Prin .
  op q1 : -> Prin .
  op r : -> Rand .
  op n : -> Nonce .
  op r1 : -> Prin .
  op r2 : -> Prin .
  op r3 : -> Nonce .
  op r4 : -> Nonce .
  op s : -> Sys .
  eq (r3 = n(p,q,r)) = false .
  eq (r3 \in cnonce(nw(s))) = true .
  eq (r4 \in cnonce(nw(s))) = true .
  red inv170(s,p,q,q1,r,n) implies inv170(fkm22(s,r1,r2,r3,r4),p,q,q1,r,n) .
close

open INV .
  :id(nslpk)
  op p : -> Prin .
  op q : -> Prin .
  op q1 : -> Prin .
  op r : -> Rand .
  op n : -> Nonce .
  op r1 : -> Prin .
  op r2 : -> Prin .
  op r3 : -> Nonce .
  op r4 : -> Nonce .
  op s : -> Sys .
  eq (r3 = n(p,q,r)) = false .
  eq (r3 \in cnonce(nw(s))) = true .
  eq (r4 \in cnonce(nw(s))) = false .
  red inv170(s,p,q,q1,r,n) implies inv170(fkm22(s,r1,r2,r3,r4),p,q,q1,r,n) .
close

open INV .
  :id(nslpk)
  op p : -> Prin .
  op q : -> Prin .
  op q1 : -> Prin .
  op r : -> Rand .
  op n : -> Nonce .
  op r1 : -> Prin .
  op r2 : -> Prin .
  op r3 : -> Nonce .
  op r4 : -> Nonce .
  op s : -> Sys .
  eq (r3 = n(p,q,r)) = false .
  eq (r3 \in cnonce(nw(s))) = false .
  red inv170(s,p,q,q1,r,n) implies inv170(fkm22(s,r1,r2,r3,r4),p,q,q1,r,n) .
close

--> 5. fkm31(s,r1,r2,r3)
open INV .
  :id(nslpk)
  op p : -> Prin .
  op q : -> Prin .
	op q1 : -> Prin .
  op r : -> Rand .
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Cipher3 .
	op s : -> Sys .
	eq (r3 \in cenc3(nw(s))) = true .
	red inv170(s,p,q,q1,r,n) implies inv170(fkm31(s,r1,r2,r3),p,q,q1,r,n) .
close

open INV .
  :id(nslpk)
  op p : -> Prin .
  op q : -> Prin .
	op q1 : -> Prin .
  op r : -> Rand .
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Cipher3 .
	op s : -> Sys .
	eq (r3 \in cenc3(nw(s))) = false .
	red inv170(s,p,q,q1,r,n) implies inv170(fkm31(s,r1,r2,r3),p,q,q1,r,n) .
close

--> 6. fkm32(s,r1,r2,r3)
open INV .
  :id(nslpk)
  op p : -> Prin .
  op q : -> Prin .
	op q1 : -> Prin .
  op r : -> Rand .
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Nonce .
	op s : -> Sys .
	eq (r3 \in cnonce(nw(s))) = true .
	red inv170(s,p,q,q1,r,n) implies inv170(fkm32(s,r1,r2,r3),p,q,q1,r,n) .
close

open INV .
  :id(nslpk)
  op p : -> Prin .
  op q : -> Prin .
	op q1 : -> Prin .
  op r : -> Rand .
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Nonce .
	op s : -> Sys .
	eq (r3 \in cnonce(nw(s))) = false .
	red inv170(s,p,q,q1,r,n) implies inv170(fkm32(s,r1,r2,r3),p,q,q1,r,n) .
close

--> 7. sdm1(s,r1,r2,r3)
open INV .
  :id(nslpk)
  op p : -> Prin .
  op q : -> Prin .
  op q1 : -> Prin .
  op r : -> Rand .
  op n : -> Nonce .
  op r1 : -> Prin .
  op r2 : -> Prin .
  op r3 : -> Rand .
  op s : -> Sys .
  eq (r3 \in ur(s)) = true .
  red inv170(s,p,q,q1,r,n) implies inv170(sdm1(s,r1,r2,r3),p,q,q1,r,n) .
close

open INV .
  :id(nslpk)
  op p : -> Prin .
  op q : -> Prin .
  op q1 : -> Prin .
  op r : -> Rand .
  op n : -> Nonce .
  op r1 : -> Prin .
  op r2 : -> Prin .
  op r3 : -> Rand .
  op s : -> Sys .
  eq (r3 \in ur(s)) = false .
  eq p = intruder .
  red inv170(s,p,q,q1,r,n) implies inv170(sdm1(s,r1,r2,r3),p,q,q1,r,n) .
close

open INV .
  :id(nslpk)
  op p : -> Prin .
  op q : -> Prin .
  op q1 : -> Prin .
  op r : -> Rand .
  op n : -> Nonce .
  op r1 : -> Prin .
  op r2 : -> Prin .
  op r3 : -> Rand .
  op s : -> Sys .
  eq (r3 \in ur(s)) = false .
  eq (p = intruder) = false .
  eq r = r3 .
  eq r2 = q .
  eq r1 = p .
  eq enc2(p,n(p,q,r3),n,q) \in cenc2(nw(s)) = true .
  red inv190(s,p,q,r,n) implies inv170(s,p,q,q1,r,n) implies inv170(sdm1(s,r1,r2,r3),p,q,q1,r,n) .
close

open INV .
  :id(nslpk)
  op p : -> Prin .
  op q : -> Prin .
  op q1 : -> Prin .
  op r : -> Rand .
  op n : -> Nonce .
  op r1 : -> Prin .
  op r2 : -> Prin .
  op r3 : -> Rand .
  op s : -> Sys .
  eq (r3 \in ur(s)) = false .
  eq (p = intruder) = false .
  eq r = r3 .
  eq r2 = q .
  eq r1 = p .
  eq enc2(p,n(p,q,r3),n,q) \in cenc2(nw(s)) = false .
  red inv170(s,p,q,q1,r,n) implies inv170(sdm1(s,r1,r2,r3),p,q,q1,r,n) .
close

open INV .
  :id(nslpk)
  op p : -> Prin .
  op q : -> Prin .
  op q1 : -> Prin .
  op r : -> Rand .
  op n : -> Nonce .
  op r1 : -> Prin .
  op r2 : -> Prin .
  op r3 : -> Rand .
  op s : -> Sys .
  eq (r3 \in ur(s)) = false .
  eq (p = intruder) = false .
  eq r = r3 .
  eq r2 = q .
  eq (r1 = p) = false .
  red inv170(s,p,q,q1,r,n) implies inv170(sdm1(s,r1,r2,r3),p,q,q1,r,n) .
close

open INV .
  :id(nslpk)
  op p : -> Prin .
  op q : -> Prin .
  op q1 : -> Prin .
  op r : -> Rand .
  op n : -> Nonce .
  op r1 : -> Prin .
  op r2 : -> Prin .
  op r3 : -> Rand .
  op s : -> Sys .
  eq (r3 \in ur(s)) = false .
  eq (p = intruder) = false .
  eq r = r3 .
  eq (r2 = q) = false .
  red inv170(s,p,q,q1,r,n) implies inv170(sdm1(s,r1,r2,r3),p,q,q1,r,n) .
close

open INV .
  :id(nslpk)
  op p : -> Prin .
  op q : -> Prin .
  op q1 : -> Prin .
  op r : -> Rand .
  op n : -> Nonce .
  op r1 : -> Prin .
  op r2 : -> Prin .
  op r3 : -> Rand .
  op s : -> Sys .
  eq (r3 \in ur(s)) = false .
  eq (p = intruder) = false .
  eq (r = r3) = false .
  red inv170(s,p,q,q1,r,n) implies inv170(sdm1(s,r1,r2,r3),p,q,q1,r,n) .
close

--> 8. sdm2(s,r1,r2,r3)
open INV .
  :id(nslpk)
  op p : -> Prin .
  op q : -> Prin .
	op q1 : -> Prin .
  op r : -> Rand .
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op s : -> Sys .
  eq r3 \in nw(s) = true .
  eq m1?(r3) = true .
  eq receiver(r3) = r1 .
  eq key(cipher1(r3)) = r1 .
  eq principal(cipher1(r3)) = sender(r3) .
  eq r2 \in ur(s) = true .
  red inv170(s,p,q,q1,r,n) implies inv170(sdm2(s,r1,r2,r3),p,q,q1,r,n) .
close

open INV .
  :id(nslpk)
  op p : -> Prin .
  op q : -> Prin .
	op q1 : -> Prin .
  op r : -> Rand .
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op s : -> Sys .
  eq r3 \in nw(s) = true .
  eq m1?(r3) = true .
  eq receiver(r3) = r1 .
  eq key(cipher1(r3)) = r1 .
  eq principal(cipher1(r3)) = sender(r3) .
  eq r2 \in ur(s) = false .
 	red inv170(s,p,q,q1,r,n) implies inv170(sdm2(s,r1,r2,r3),p,q,q1,r,n) .
close

open INV .
  :id(nslpk)
  op p : -> Prin .
  op q : -> Prin .
	op q1 : -> Prin .
  op r : -> Rand .
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op s : -> Sys .
  eq r3 \in nw(s) = true .
  eq m1?(r3) = true .
  eq receiver(r3) = r1 .
  eq key(cipher1(r3)) = r1 .
  eq (principal(cipher1(r3)) = sender(r3)) = false .
	red inv170(s,p,q,q1,r,n) implies inv170(sdm2(s,r1,r2,r3),p,q,q1,r,n) .
close

open INV .
  :id(nslpk)
  op p : -> Prin .
  op q : -> Prin .
	op q1 : -> Prin .
  op r : -> Rand .
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op s : -> Sys .
  eq r3 \in nw(s) = true .
  eq m1?(r3) = true .
  eq receiver(r3) = r1 .
  eq (key(cipher1(r3)) = r1) = false .
	red inv170(s,p,q,q1,r,n) implies inv170(sdm2(s,r1,r2,r3),p,q,q1,r,n) .
close

open INV .
  :id(nslpk)
  op p : -> Prin .
  op q : -> Prin .
	op q1 : -> Prin .
  op r : -> Rand .
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op s : -> Sys .
  eq r3 \in nw(s) = true .
  eq m1?(r3) = true .
  eq (receiver(r3) = r1) = false .
	red inv170(s,p,q,q1,r,n) implies inv170(sdm2(s,r1,r2,r3),p,q,q1,r,n) .
close

open INV .
  :id(nslpk)
  op p : -> Prin .
  op q : -> Prin .
	op q1 : -> Prin .
  op r : -> Rand .
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op s : -> Sys .
  eq r3 \in nw(s) = true .
  eq m1?(r3) = false .
	red inv170(s,p,q,q1,r,n) implies inv170(sdm2(s,r1,r2,r3),p,q,q1,r,n) .
close

open INV .
  :id(nslpk)
  op p : -> Prin .
  op q : -> Prin .
	op q1 : -> Prin .
  op r : -> Rand .
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op s : -> Sys .
  eq r3 \in nw(s) = false .
	red inv170(s,p,q,q1,r,n) implies inv170(sdm2(s,r1,r2,r3),p,q,q1,r,n) .
close

--> 9. sdm3(s,r1,r2,r3,r4)
open INV .
  :id(nslpk)
  op p : -> Prin .
  op q : -> Prin .
	op q1 : -> Prin .
  op r : -> Rand .
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
  eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
  eq sender(r3) = r1 .
  eq receiver(r3) = sender(r4) .
  eq key(cipher1(r3)) = sender(r4) .
	eq nonce(cipher1(r3)) = n(r1,sender(r4),r2) .
	eq principal(cipher1(r3)) = r1 .
  eq receiver(r4) = r1 .
	eq key(cipher2(r4)) = r1 .
  eq nonce1(cipher2(r4)) = n(r1,sender(r4),r2) .
	eq principal(cipher2(r4)) = sender(r4) .
	red inv170(s,p,q,q1,r,n) implies inv170(sdm3(s,r1,r2,r3,r4),p,q,q1,r,n) .
close

open INV .
  :id(nslpk)
  op p : -> Prin .
  op q : -> Prin .
	op q1 : -> Prin .
  op r : -> Rand .
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
  eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
  eq sender(r3) = r1 .
  eq receiver(r3) = sender(r4) .
  eq key(cipher1(r3)) = sender(r4) .
	eq nonce(cipher1(r3)) = n(r1,sender(r4),r2) .
	eq principal(cipher1(r3)) = r1 .
  eq receiver(r4) = r1 .
	eq key(cipher2(r4)) = r1 .
  eq nonce1(cipher2(r4)) = n(r1,sender(r4),r2) .
	eq (principal(cipher2(r4)) = sender(r4)) = false .
	red inv170(s,p,q,q1,r,n) implies inv170(sdm3(s,r1,r2,r3,r4),p,q,q1,r,n) .
close

open INV .
  :id(nslpk)
  op p : -> Prin .
  op q : -> Prin .
	op q1 : -> Prin .
  op r : -> Rand .
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
  eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
  eq sender(r3) = r1 .
  eq receiver(r3) = sender(r4) .
  eq key(cipher1(r3)) = sender(r4) .
	eq nonce(cipher1(r3)) = n(r1,sender(r4),r2) .
	eq principal(cipher1(r3)) = r1 .
  eq receiver(r4) = r1 .
	eq key(cipher2(r4)) = r1 .
  eq (nonce1(cipher2(r4)) = n(r1,sender(r4),r2)) = false .
	red inv170(s,p,q,q1,r,n) implies inv170(sdm3(s,r1,r2,r3,r4),p,q,q1,r,n) .
close

open INV .
  :id(nslpk)
  op p : -> Prin .
  op q : -> Prin .
	op q1 : -> Prin .
  op r : -> Rand .
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
  eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
  eq sender(r3) = r1 .
  eq receiver(r3) = sender(r4) .
  eq key(cipher1(r3)) = sender(r4) .
	eq nonce(cipher1(r3)) = n(r1,sender(r4),r2) .
	eq principal(cipher1(r3)) = r1 .
  eq receiver(r4) = r1 .
	eq (key(cipher2(r4)) = r1) = false .
	red inv170(s,p,q,q1,r,n) implies inv170(sdm3(s,r1,r2,r3,r4),p,q,q1,r,n) .
close

open INV .
  :id(nslpk)
  op p : -> Prin .
  op q : -> Prin .
	op q1 : -> Prin .
  op r : -> Rand .
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
  eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
  eq sender(r3) = r1 .
  eq receiver(r3) = sender(r4) .
  eq key(cipher1(r3)) = sender(r4) .
	eq nonce(cipher1(r3)) = n(r1,sender(r4),r2) .
	eq principal(cipher1(r3)) = r1 .
  eq (receiver(r4) = r1) = false .
	red inv170(s,p,q,q1,r,n) implies inv170(sdm3(s,r1,r2,r3,r4),p,q,q1,r,n) .
close

open INV .
  :id(nslpk)
  op p : -> Prin .
  op q : -> Prin .
	op q1 : -> Prin .
  op r : -> Rand .
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
  eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
  eq sender(r3) = r1 .
  eq receiver(r3) = sender(r4) .
  eq key(cipher1(r3)) = sender(r4) .
	eq nonce(cipher1(r3)) = n(r1,sender(r4),r2) .
	eq (principal(cipher1(r3)) = r1) = false .
	red inv170(s,p,q,q1,r,n) implies inv170(sdm3(s,r1,r2,r3,r4),p,q,q1,r,n) .
close

open INV .
  :id(nslpk)
  op p : -> Prin .
  op q : -> Prin .
	op q1 : -> Prin .
  op r : -> Rand .
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
  eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
  eq sender(r3) = r1 .
  eq receiver(r3) = sender(r4) .
  eq key(cipher1(r3)) = sender(r4) .
	eq (nonce(cipher1(r3)) = n(r1,sender(r4),r2)) = false .
	red inv170(s,p,q,q1,r,n) implies inv170(sdm3(s,r1,r2,r3,r4),p,q,q1,r,n) .
close

open INV .
  :id(nslpk)
  op p : -> Prin .
  op q : -> Prin .
	op q1 : -> Prin .
  op r : -> Rand .
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
  eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
  eq sender(r3) = r1 .
  eq receiver(r3) = sender(r4) .
  eq (key(cipher1(r3)) = sender(r4)) = false .
	red inv170(s,p,q,q1,r,n) implies inv170(sdm3(s,r1,r2,r3,r4),p,q,q1,r,n) .
close

open INV .
  :id(nslpk)
  op p : -> Prin .
  op q : -> Prin .
	op q1 : -> Prin .
  op r : -> Rand .
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
  eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
  eq sender(r3) = r1 .
  eq (receiver(r3) = sender(r4)) = false .
	red inv170(s,p,q,q1,r,n) implies inv170(sdm3(s,r1,r2,r3,r4),p,q,q1,r,n) .
close

open INV .
  :id(nslpk)
  op p : -> Prin .
  op q : -> Prin .
	op q1 : -> Prin .
  op r : -> Rand .
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
  eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
  eq (sender(r3) = r1) = false .
	red inv170(s,p,q,q1,r,n) implies inv170(sdm3(s,r1,r2,r3,r4),p,q,q1,r,n) .
close

open INV .
  :id(nslpk)
  op p : -> Prin .
  op q : -> Prin .
	op q1 : -> Prin .
  op r : -> Rand .
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
  eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq (creator(r3) = r1) = false .
	red inv170(s,p,q,q1,r,n) implies inv170(sdm3(s,r1,r2,r3,r4),p,q,q1,r,n) .
close

open INV .
  :id(nslpk)
  op p : -> Prin .
  op q : -> Prin .
	op q1 : -> Prin .
  op r : -> Rand .
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
  eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = false .
	red inv170(s,p,q,q1,r,n) implies inv170(sdm3(s,r1,r2,r3,r4),p,q,q1,r,n) .
close

open INV .
  :id(nslpk)
  op p : -> Prin .
  op q : -> Prin .
	op q1 : -> Prin .
  op r : -> Rand .
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
  eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = false .
	red inv170(s,p,q,q1,r,n) implies inv170(sdm3(s,r1,r2,r3,r4),p,q,q1,r,n) .
close

open INV .
  :id(nslpk)
  op p : -> Prin .
  op q : -> Prin .
	op q1 : -> Prin .
  op r : -> Rand .
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
  eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = false .
	red inv170(s,p,q,q1,r,n) implies inv170(sdm3(s,r1,r2,r3,r4),p,q,q1,r,n) .
close

open INV .
  :id(nslpk)
  op p : -> Prin .
  op q : -> Prin .
	op q1 : -> Prin .
  op r : -> Rand .
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
  eq (r3 \in nw(s)) = false .
	red inv170(s,p,q,q1,r,n) implies inv170(sdm3(s,r1,r2,r3,r4),p,q,q1,r,n) .
close

--> I) Base case
--> init
open INV .
  :id(nslpk)
  ops p q p1 : -> Prin .
  op r : -> Rand .
	op n : -> Nonce .
  red inv180(init,p,q,p1,r,n) .
close

--> II) Induction cases
--> 1. fkm11(s,r1,r2,r3)
open INV .
  :id(nslpk)
  ops p q p1 : -> Prin .
  op r : -> Rand .
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Cipher1 .
	op s : -> Sys .
	eq (r3 \in cenc1(nw(s))) = true .
	red inv180(s,p,q,p1,r,n) implies inv180(fkm11(s,r1,r2,r3),p,q,p1,r,n) .
close

open INV .
  :id(nslpk)
  ops p q p1 : -> Prin .
  op r : -> Rand .
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Cipher1 .
	op s : -> Sys .
	eq (r3 \in cenc1(nw(s))) = false .
	red inv180(s,p,q,p1,r,n) implies inv180(fkm11(s,r1,r2,r3),p,q,p1,r,n) .
close

--> 2. fkm12(s,r1,r2,r3)
open INV .
  :id(nslpk)
  ops p q p1 : -> Prin .
  op r : -> Rand .
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Nonce .
	op s : -> Sys .
	eq (r3 \in cnonce(nw(s))) = true .
	red inv180(s,p,q,p1,r,n) implies inv180(fkm12(s,r1,r2,r3),p,q,p1,r,n) .
close

open INV .
  :id(nslpk)
  ops p q p1 : -> Prin .
  op r : -> Rand .
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Nonce .
	op s : -> Sys .
	eq (r3 \in cnonce(nw(s))) = false .
	red inv180(s,p,q,p1,r,n) implies inv180(fkm12(s,r1,r2,r3),p,q,p1,r,n) .
close

--> 3. fkm21(s,r1,r2,r3)
open INV .
  :id(nslpk)
  ops p q p1 : -> Prin .
  op r : -> Rand .
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Cipher2 .
	op s : -> Sys .
	eq (r3 \in cenc2(nw(s))) = true .
	red inv180(s,p,q,p1,r,n) implies inv180(fkm21(s,r1,r2,r3),p,q,p1,r,n) .
close

open INV .
  :id(nslpk)
  ops p q p1 : -> Prin .
  op r : -> Rand .
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Cipher2 .
	op s : -> Sys .
	eq (r3 \in cenc2(nw(s))) = false .
	red inv180(s,p,q,p1,r,n) implies inv180(fkm21(s,r1,r2,r3),p,q,p1,r,n) .
close

--> 4. fkm22(s,r1,r2,r3,r4)
open INV .
  :id(nslpk)
  ops p q p1 : -> Prin .
  op r : -> Rand .
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Nonce .
	op r4 : -> Nonce .
	op s : -> Sys .
	eq (r3 \in cnonce(nw(s))) = true .
	eq (r4 \in cnonce(nw(s))) = true .
	red inv180(s,p,q,p1,r,n) implies inv180(fkm22(s,r1,r2,r3,r4),p,q,p1,r,n) .
close

open INV .
  :id(nslpk)
  ops p q p1 : -> Prin .
  op r : -> Rand .
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Nonce .
	op r4 : -> Nonce .
	op s : -> Sys .
	eq (r3 \in cnonce(nw(s))) = true .
	eq (r4 \in cnonce(nw(s))) = false .
	red inv180(s,p,q,p1,r,n) implies inv180(fkm22(s,r1,r2,r3,r4),p,q,p1,r,n) .
close

open INV .
  :id(nslpk)
  ops p q p1 : -> Prin .
  op r : -> Rand .
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Nonce .
	op r4 : -> Nonce .
	op s : -> Sys .
	eq (r3 \in cnonce(nw(s))) = false .
	red inv180(s,p,q,p1,r,n) implies inv180(fkm22(s,r1,r2,r3,r4),p,q,p1,r,n) .
close

--> 5. fkm31(s,r1,r2,r3)
open INV .
  :id(nslpk)
  ops p q p1 : -> Prin .
  op r : -> Rand .
  op n : -> Nonce .
  op r1 : -> Prin .
  op r2 : -> Prin .
  op r3 : -> Cipher3 .
  op s : -> Sys .
  eq r3 = enc3(q,n(q,p,r)) .
	eq enc3(q,n(q,p,r)) \in cenc3(nw(s)) = true .

  eq p1 = intruder .
  eq r1 = p .
  eq r2 = q .

  eq intruder = p .
	red inv180(s,p,q,p1,r,n) implies inv180(fkm31(s,r1,r2,r3),p,q,p1,r,n) .
close

open INV .
  :id(nslpk)
  ops p q p1 : -> Prin .
  op r : -> Rand .
  op n : -> Nonce .
  op r1 : -> Prin .
  op r2 : -> Prin .
  op r3 : -> Cipher3 .
  op s : -> Sys .
  eq r3 = enc3(q,n(q,p,r)) .
	eq enc3(q,n(q,p,r)) \in cenc3(nw(s)) = true .

  eq p1 = intruder .
  eq r1 = p .
  eq r2 = q .

  eq (intruder = p) = false .
  eq intruder = q .
	red inv180(s,p,q,p1,r,n) implies inv180(fkm31(s,r1,r2,r3),p,q,p1,r,n) .
close

open INV .
  :id(nslpk)
  ops p q p1 : -> Prin .
  op r : -> Rand .
  op n : -> Nonce .
  op r1 : -> Prin .
  op r2 : -> Prin .
  op r3 : -> Cipher3 .
  op s : -> Sys .
  eq r3 = enc3(q,n(q,p,r)) .
	eq enc3(q,n(q,p,r)) \in cenc3(nw(s)) = true .

  eq p1 = intruder .
  eq r1 = p .
  eq r2 = q .

  eq (intruder = p) = false .
  eq (intruder = q) = false .
  eq m3(p,p,q,enc3(q,n(q,p,r))) \in nw(s) = true .
	red inv180(s,p,q,p1,r,n) implies inv180(fkm31(s,r1,r2,r3),p,q,p1,r,n) .
close

open INV .
  :id(nslpk)
  ops p q p1 : -> Prin .
  op r : -> Rand .
  op n : -> Nonce .
  op r1 : -> Prin .
  op r2 : -> Prin .
  op r3 : -> Cipher3 .
  op s : -> Sys .
  eq r3 = enc3(q,n(q,p,r)) .
	eq enc3(q,n(q,p,r)) \in cenc3(nw(s)) = true .

  eq p1 = intruder .
  eq r1 = p .
  eq r2 = q .

  eq (intruder = p) = false .
  eq (intruder = q) = false .
  eq m3(p,p,q,enc3(q,n(q,p,r))) \in nw(s) = false .
	red inv230(s,p,q,r) implies inv180(s,p,q,p1,r,n) implies inv180(fkm31(s,r1,r2,r3),p,q,p1,r,n) .
close

open INV .
  :id(nslpk)
  ops p q p1 : -> Prin .
  op r : -> Rand .
  op n : -> Nonce .
  op r1 : -> Prin .
  op r2 : -> Prin .
  op r3 : -> Cipher3 .
  op s : -> Sys .
  eq r3 = enc3(q,n(q,p,r)) .
	eq enc3(q,n(q,p,r)) \in cenc3(nw(s)) = true .

  eq p1 = intruder .
  eq r1 = p .
  eq (r2 = q) = false .
	red inv180(s,p,q,p1,r,n) implies inv180(fkm31(s,r1,r2,r3),p,q,p1,r,n) .
close

open INV .
  :id(nslpk)
  ops p q p1 : -> Prin .
  op r : -> Rand .
  op n : -> Nonce .
  op r1 : -> Prin .
  op r2 : -> Prin .
  op r3 : -> Cipher3 .
  op s : -> Sys .
  eq r3 = enc3(q,n(q,p,r)) .
	eq enc3(q,n(q,p,r)) \in cenc3(nw(s)) = true .

  eq p1 = intruder .
  eq (r1 = p) = false .
	red inv180(s,p,q,p1,r,n) implies inv180(fkm31(s,r1,r2,r3),p,q,p1,r,n) .
close

open INV .
  :id(nslpk)
  ops p q p1 : -> Prin .
  op r : -> Rand .
  op n : -> Nonce .
  op r1 : -> Prin .
  op r2 : -> Prin .
  op r3 : -> Cipher3 .
  op s : -> Sys .
  eq r3 = enc3(q,n(q,p,r)) .
	eq enc3(q,n(q,p,r)) \in cenc3(nw(s)) = true .
  eq (p1 = intruder) = false .
	red inv180(s,p,q,p1,r,n) implies inv180(fkm31(s,r1,r2,r3),p,q,p1,r,n) .
close

open INV .
  :id(nslpk)
  ops p q p1 : -> Prin .
  op r : -> Rand .
  op n : -> Nonce .
  op r1 : -> Prin .
  op r2 : -> Prin .
  op r3 : -> Cipher3 .
  op s : -> Sys .
  eq r3 = enc3(q,n(q,p,r)) .
	eq enc3(q,n(q,p,r)) \in cenc3(nw(s)) = false .
	red inv180(s,p,q,p1,r,n) implies inv180(fkm31(s,r1,r2,r3),p,q,p1,r,n) .
close

open INV .
  :id(nslpk)
  ops p q p1 : -> Prin .
  op r : -> Rand .
  op n : -> Nonce .
  op r1 : -> Prin .
  op r2 : -> Prin .
  op r3 : -> Cipher3 .
  op s : -> Sys .
  eq (r3 = enc3(q,n(q,p,r))) = false .
	eq (r3 \in cenc3(nw(s))) = true .
	red inv180(s,p,q,p1,r,n) implies inv180(fkm31(s,r1,r2,r3),p,q,p1,r,n) .
close

open INV .
  :id(nslpk)
  ops p q p1 : -> Prin .
  op r : -> Rand .
  op n : -> Nonce .
  op r1 : -> Prin .
  op r2 : -> Prin .
  op r3 : -> Cipher3 .
  op s : -> Sys .
  eq (r3 = enc3(q,n(q,p,r))) = false .
	eq (r3 \in cenc3(nw(s))) = false .
	red inv180(s,p,q,p1,r,n) implies inv180(fkm31(s,r1,r2,r3),p,q,p1,r,n) .
close

--> 6. fkm32(s,r1,r2,r3)
open INV .
  :id(nslpk)
  ops p q p1 : -> Prin .
  op r : -> Rand .
  op n : -> Nonce .
  op r1 : -> Prin .
  op r2 : -> Prin .
  op r3 : -> Nonce .
  op s : -> Sys .
  eq r3 = n(q,p,r) .
  eq n(q,p,r) \in cnonce(nw(s)) = true .
  eq p1 = intruder .
  eq r1 = p .
  eq r2 = q .

  eq q = intruder .
	red inv180(s,p,q,p1,r,n) implies inv180(fkm32(s,r1,r2,r3),p,q,p1,r,n) .
close

open INV .
  :id(nslpk)
  ops p q p1 : -> Prin .
  op r : -> Rand .
  op n : -> Nonce .
  op r1 : -> Prin .
  op r2 : -> Prin .
  op r3 : -> Nonce .
  op s : -> Sys .
  eq r3 = n(q,p,r) .
  eq n(q,p,r) \in cnonce(nw(s)) = true .
  eq p1 = intruder .
  eq r1 = p .
  eq r2 = q .

  eq (q = intruder) = false .
  eq p = intruder .
	red inv180(s,p,q,p1,r,n) implies inv180(fkm32(s,r1,r2,r3),p,q,p1,r,n) .
close

open INV .
  :id(nslpk)
  ops p q p1 : -> Prin .
  op r : -> Rand .
  op n : -> Nonce .
  op r1 : -> Prin .
  op r2 : -> Prin .
  op r3 : -> Nonce .
  op s : -> Sys .
  eq r3 = n(q,p,r) .
  eq n(q,p,r) \in cnonce(nw(s)) = true .
  eq p1 = intruder .
  eq r1 = p .
  eq r2 = q .

  eq (q = intruder) = false .
  eq (p = intruder) = false .
	red inv130(s,n(q,p,r)) implies inv180(s,p,q,p1,r,n) implies inv180(fkm32(s,r1,r2,r3),p,q,p1,r,n) .
close

open INV .
  :id(nslpk)
  ops p q p1 : -> Prin .
  op r : -> Rand .
  op n : -> Nonce .
  op r1 : -> Prin .
  op r2 : -> Prin .
  op r3 : -> Nonce .
  op s : -> Sys .
  eq r3 = n(q,p,r) .
  eq n(q,p,r) \in cnonce(nw(s)) = true .
  eq p1 = intruder .
  eq r1 = p .
  eq (r2 = q) = false .
	red inv180(s,p,q,p1,r,n) implies inv180(fkm32(s,r1,r2,r3),p,q,p1,r,n) .
close

open INV .
  :id(nslpk)
  ops p q p1 : -> Prin .
  op r : -> Rand .
  op n : -> Nonce .
  op r1 : -> Prin .
  op r2 : -> Prin .
  op r3 : -> Nonce .
  op s : -> Sys .
  eq r3 = n(q,p,r) .
  eq n(q,p,r) \in cnonce(nw(s)) = true .
  eq p1 = intruder .
  eq (r1 = p) = false .
	red inv180(s,p,q,p1,r,n) implies inv180(fkm32(s,r1,r2,r3),p,q,p1,r,n) .
close

open INV .
  :id(nslpk)
  ops p q p1 : -> Prin .
  op r : -> Rand .
  op n : -> Nonce .
  op r1 : -> Prin .
  op r2 : -> Prin .
  op r3 : -> Nonce .
  op s : -> Sys .
  eq r3 = n(q,p,r) .
  eq n(q,p,r) \in cnonce(nw(s)) = true .
  eq (p1 = intruder) = false .
	red inv180(s,p,q,p1,r,n) implies inv180(fkm32(s,r1,r2,r3),p,q,p1,r,n) .
close

open INV .
  :id(nslpk)
  ops p q p1 : -> Prin .
  op r : -> Rand .
  op n : -> Nonce .
  op r1 : -> Prin .
  op r2 : -> Prin .
  op r3 : -> Nonce .
  op s : -> Sys .
  eq r3 = n(q,p,r) .
  eq n(q,p,r) \in cnonce(nw(s)) = false .
	red inv180(s,p,q,p1,r,n) implies inv180(fkm32(s,r1,r2,r3),p,q,p1,r,n) .
close

open INV .
  :id(nslpk)
  ops p q p1 : -> Prin .
  op r : -> Rand .
  op n : -> Nonce .
  op r1 : -> Prin .
  op r2 : -> Prin .
  op r3 : -> Nonce .
  op s : -> Sys .
  eq (r3 = n(q,p,r)) = false .
  eq r3 \in cnonce(nw(s)) = true .
	red inv180(s,p,q,p1,r,n) implies inv180(fkm32(s,r1,r2,r3),p,q,p1,r,n) .
close

open INV .
  :id(nslpk)
  ops p q p1 : -> Prin .
  op r : -> Rand .
  op n : -> Nonce .
  op r1 : -> Prin .
  op r2 : -> Prin .
  op r3 : -> Nonce .
  op s : -> Sys .
  eq (r3 = n(q,p,r)) = false .
  eq r3 \in cnonce(nw(s)) = false .
	red inv180(s,p,q,p1,r,n) implies inv180(fkm32(s,r1,r2,r3),p,q,p1,r,n) .
close

--> 7. sdm1(s,r1,r2,r3)
open INV .
  :id(nslpk)
  ops p q p1 : -> Prin .
  op r : -> Rand .
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Rand .
	op s : -> Sys .
	eq (r3 \in ur(s)) = true .
	red inv180(s,p,q,p1,r,n) implies inv180(sdm1(s,r1,r2,r3),p,q,p1,r,n) .
close

open INV .
  :id(nslpk)
  ops p q p1 : -> Prin .
  op r : -> Rand .
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Rand .
	op s : -> Sys .
	eq (r3 \in ur(s)) = false .
	red inv180(s,p,q,p1,r,n) implies inv180(sdm1(s,r1,r2,r3),p,q,p1,r,n) .
close

--> 8. sdm2(s,r1,r2,r3)
open INV .
  :id(nslpk)
  ops p q p1 : -> Prin .
  op r : -> Rand .
  op n : -> Nonce .
  op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op s : -> Sys .
  eq r3 \in nw(s) = true .
  eq m1?(r3) = true .
  eq receiver(r3) = r1 .
  eq key(cipher1(r3)) = r1 .
  eq principal(cipher1(r3)) = sender(r3) .
  eq r2 \in ur(s) = true .
	red inv180(s,p,q,p1,r,n) implies inv180(sdm2(s,r1,r2,r3),p,q,p1,r,n) .
close

open INV .
  :id(nslpk)
  ops p q p1 : -> Prin .
  op r : -> Rand .
  op n : -> Nonce .
  op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op s : -> Sys .
  eq r3 \in nw(s) = true .
  eq m1?(r3) = true .
  eq receiver(r3) = r1 .
  eq key(cipher1(r3)) = r1 .
  eq principal(cipher1(r3)) = sender(r3) .
  eq r2 \in ur(s) = false .
  eq q = intruder .
	red inv180(s,p,q,p1,r,n) implies inv180(sdm2(s,r1,r2,r3),p,q,p1,r,n) .
close

open INV .
  :id(nslpk)
  ops p q p1 : -> Prin .
  op r : -> Rand .
  op n : -> Nonce .
  op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op s : -> Sys .
  eq r3 \in nw(s) = true .
  eq m1?(r3) = true .
  eq receiver(r3) = r1 .
  eq key(cipher1(r3)) = r1 .
  eq principal(cipher1(r3)) = sender(r3) .
  eq r2 \in ur(s) = false .
  eq (q = intruder) = false .

  eq r1 = q .
  eq sender(r3) = p .
  eq nonce(cipher1(r3)) = n .
  eq r = r2 .

  eq enc3(q,n(q,p,r2)) \in cenc3(nw(s)) = true .
	red inv240(s,p,q,r) implies inv180(s,p,q,p1,r,n) implies inv180(sdm2(s,r1,r2,r3),p,q,p1,r,n) .
close

open INV .
  :id(nslpk)
  ops p q p1 : -> Prin .
  op r : -> Rand .
  op n : -> Nonce .
  op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op s : -> Sys .
  eq r3 \in nw(s) = true .
  eq m1?(r3) = true .
  eq receiver(r3) = r1 .
  eq key(cipher1(r3)) = r1 .
  eq principal(cipher1(r3)) = sender(r3) .
  eq r2 \in ur(s) = false .
  eq (q = intruder) = false .

  eq r1 = q .
  eq sender(r3) = p .
  eq nonce(cipher1(r3)) = n .
  eq r = r2 .

  eq enc3(q,n(q,p,r2)) \in cenc3(nw(s)) = false .
	red inv180(s,p,q,p1,r,n) implies inv180(sdm2(s,r1,r2,r3),p,q,p1,r,n) .
close


open INV .
  :id(nslpk)
  ops p q p1 : -> Prin .
  op r : -> Rand .
  op n : -> Nonce .
  op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op s : -> Sys .
  eq r3 \in nw(s) = true .
  eq m1?(r3) = true .
  eq receiver(r3) = r1 .
  eq key(cipher1(r3)) = r1 .
  eq principal(cipher1(r3)) = sender(r3) .
  eq r2 \in ur(s) = false .
  eq (q = intruder) = false .

  eq r1 = q .
  eq sender(r3) = p .
  eq nonce(cipher1(r3)) = n .
  eq (r = r2) = false .
	red inv180(s,p,q,p1,r,n) implies inv180(sdm2(s,r1,r2,r3),p,q,p1,r,n) .
close

open INV .
  :id(nslpk)
  ops p q p1 : -> Prin .
  op r : -> Rand .
  op n : -> Nonce .
  op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op s : -> Sys .
  eq r3 \in nw(s) = true .
  eq m1?(r3) = true .
  eq receiver(r3) = r1 .
  eq key(cipher1(r3)) = r1 .
  eq principal(cipher1(r3)) = sender(r3) .
  eq r2 \in ur(s) = false .
  eq (q = intruder) = false .

  eq r1 = q .
  eq sender(r3) = p .
  eq (nonce(cipher1(r3)) = n) = false .
	red inv180(s,p,q,p1,r,n) implies inv180(sdm2(s,r1,r2,r3),p,q,p1,r,n) .
close

open INV .
  :id(nslpk)
  ops p q p1 : -> Prin .
  op r : -> Rand .
  op n : -> Nonce .
  op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op s : -> Sys .
  eq r3 \in nw(s) = true .
  eq m1?(r3) = true .
  eq receiver(r3) = r1 .
  eq key(cipher1(r3)) = r1 .
  eq principal(cipher1(r3)) = sender(r3) .
  eq r2 \in ur(s) = false .
  eq (q = intruder) = false .

  eq r1 = q .
  eq (sender(r3) = p) = false .
	red inv180(s,p,q,p1,r,n) implies inv180(sdm2(s,r1,r2,r3),p,q,p1,r,n) .
close

open INV .
  :id(nslpk)
  ops p q p1 : -> Prin .
  op r : -> Rand .
  op n : -> Nonce .
  op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op s : -> Sys .
  eq r3 \in nw(s) = true .
  eq m1?(r3) = true .
  eq receiver(r3) = r1 .
  eq key(cipher1(r3)) = r1 .
  eq principal(cipher1(r3)) = sender(r3) .
  eq r2 \in ur(s) = false .
  eq (q = intruder) = false .

  eq (r1 = q) = false .
	red inv180(s,p,q,p1,r,n) implies inv180(sdm2(s,r1,r2,r3),p,q,p1,r,n) .
close

open INV .
  :id(nslpk)
  ops p q p1 : -> Prin .
  op r : -> Rand .
  op n : -> Nonce .
  op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op s : -> Sys .
  eq r3 \in nw(s) = true .
  eq m1?(r3) = true .
  eq receiver(r3) = r1 .
  eq key(cipher1(r3)) = r1 .
  eq (principal(cipher1(r3)) = sender(r3)) = false .
	red inv180(s,p,q,p1,r,n) implies inv180(sdm2(s,r1,r2,r3),p,q,p1,r,n) .
close

open INV .
  :id(nslpk)
  ops p q p1 : -> Prin .
  op r : -> Rand .
  op n : -> Nonce .
  op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op s : -> Sys .
  eq r3 \in nw(s) = true .
  eq m1?(r3) = true .
  eq receiver(r3) = r1 .
  eq (key(cipher1(r3)) = r1) = false .
	red inv180(s,p,q,p1,r,n) implies inv180(sdm2(s,r1,r2,r3),p,q,p1,r,n) .
close

open INV .
  :id(nslpk)
  ops p q p1 : -> Prin .
  op r : -> Rand .
  op n : -> Nonce .
  op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op s : -> Sys .
  eq r3 \in nw(s) = true .
  eq m1?(r3) = true .
  eq (receiver(r3) = r1) = false .
	red inv180(s,p,q,p1,r,n) implies inv180(sdm2(s,r1,r2,r3),p,q,p1,r,n) .
close

open INV .
  :id(nslpk)
  ops p q p1 : -> Prin .
  op r : -> Rand .
  op n : -> Nonce .
  op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op s : -> Sys .
  eq r3 \in nw(s) = true .
  eq m1?(r3) = false .
	red inv180(s,p,q,p1,r,n) implies inv180(sdm2(s,r1,r2,r3),p,q,p1,r,n) .
close

open INV .
  :id(nslpk)
  ops p q p1 : -> Prin .
  op r : -> Rand .
  op n : -> Nonce .
  op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op s : -> Sys .
  eq r3 \in nw(s) = false .
	red inv180(s,p,q,p1,r,n) implies inv180(sdm2(s,r1,r2,r3),p,q,p1,r,n) .
close

--> 9. sdm3(s,r1,r2,r3,r4)
open INV .
  :id(nslpk)
  ops p q p1 : -> Prin .
  op r : -> Rand .
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
  eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
  eq sender(r3) = r1 .
  eq receiver(r3) = sender(r4) .
  eq key(cipher1(r3)) = sender(r4) .
	eq nonce(cipher1(r3)) = n(r1,sender(r4),r2) .
	eq principal(cipher1(r3)) = r1 .
  eq receiver(r4) = r1 .
	eq key(cipher2(r4)) = r1 .
  eq nonce1(cipher2(r4)) = n(r1,sender(r4),r2) .
	eq principal(cipher2(r4)) = sender(r4) .
	red inv180(s,p,q,p1,r,n) implies inv180(sdm3(s,r1,r2,r3,r4),p,q,p1,r,n) .
close

open INV .
  :id(nslpk)
  ops p q p1 : -> Prin .
  op r : -> Rand .
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
  eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
  eq sender(r3) = r1 .
  eq receiver(r3) = sender(r4) .
  eq key(cipher1(r3)) = sender(r4) .
	eq nonce(cipher1(r3)) = n(r1,sender(r4),r2) .
	eq principal(cipher1(r3)) = r1 .
  eq receiver(r4) = r1 .
	eq key(cipher2(r4)) = r1 .
  eq nonce1(cipher2(r4)) = n(r1,sender(r4),r2) .
	eq (principal(cipher2(r4)) = sender(r4)) = false .
	red inv180(s,p,q,p1,r,n) implies inv180(sdm3(s,r1,r2,r3,r4),p,q,p1,r,n) .
close

open INV .
  :id(nslpk)
  ops p q p1 : -> Prin .
  op r : -> Rand .
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
  eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
  eq sender(r3) = r1 .
  eq receiver(r3) = sender(r4) .
  eq key(cipher1(r3)) = sender(r4) .
	eq nonce(cipher1(r3)) = n(r1,sender(r4),r2) .
	eq principal(cipher1(r3)) = r1 .
  eq receiver(r4) = r1 .
	eq key(cipher2(r4)) = r1 .
  eq (nonce1(cipher2(r4)) = n(r1,sender(r4),r2)) = false .
	red inv180(s,p,q,p1,r,n) implies inv180(sdm3(s,r1,r2,r3,r4),p,q,p1,r,n) .
close

open INV .
  :id(nslpk)
  ops p q p1 : -> Prin .
  op r : -> Rand .
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
  eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
  eq sender(r3) = r1 .
  eq receiver(r3) = sender(r4) .
  eq key(cipher1(r3)) = sender(r4) .
	eq nonce(cipher1(r3)) = n(r1,sender(r4),r2) .
	eq principal(cipher1(r3)) = r1 .
  eq receiver(r4) = r1 .
	eq (key(cipher2(r4)) = r1) = false .
	red inv180(s,p,q,p1,r,n) implies inv180(sdm3(s,r1,r2,r3,r4),p,q,p1,r,n) .
close

open INV .
  :id(nslpk)
  ops p q p1 : -> Prin .
  op r : -> Rand .
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
  eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
  eq sender(r3) = r1 .
  eq receiver(r3) = sender(r4) .
  eq key(cipher1(r3)) = sender(r4) .
	eq nonce(cipher1(r3)) = n(r1,sender(r4),r2) .
	eq principal(cipher1(r3)) = r1 .
  eq (receiver(r4) = r1) = false .
	red inv180(s,p,q,p1,r,n) implies inv180(sdm3(s,r1,r2,r3,r4),p,q,p1,r,n) .
close

open INV .
  :id(nslpk)
  ops p q p1 : -> Prin .
  op r : -> Rand .
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
  eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
  eq sender(r3) = r1 .
  eq receiver(r3) = sender(r4) .
  eq key(cipher1(r3)) = sender(r4) .
	eq nonce(cipher1(r3)) = n(r1,sender(r4),r2) .
	eq (principal(cipher1(r3)) = r1) = false .
	red inv180(s,p,q,p1,r,n) implies inv180(sdm3(s,r1,r2,r3,r4),p,q,p1,r,n) .
close

open INV .
  :id(nslpk)
  ops p q p1 : -> Prin .
  op r : -> Rand .
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
  eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
  eq sender(r3) = r1 .
  eq receiver(r3) = sender(r4) .
  eq key(cipher1(r3)) = sender(r4) .
	eq (nonce(cipher1(r3)) = n(r1,sender(r4),r2)) = false .
	red inv180(s,p,q,p1,r,n) implies inv180(sdm3(s,r1,r2,r3,r4),p,q,p1,r,n) .
close

open INV .
  :id(nslpk)
  ops p q p1 : -> Prin .
  op r : -> Rand .
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
	eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
  eq sender(r3) = r1 .
  eq receiver(r3) = sender(r4) .
  eq (key(cipher1(r3)) = sender(r4)) = false .
	red inv180(s,p,q,p1,r,n) implies inv180(sdm3(s,r1,r2,r3,r4),p,q,p1,r,n) .
close

open INV .
  :id(nslpk)
  ops p q p1 : -> Prin .
  op r : -> Rand .
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
	eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
  eq sender(r3) = r1 .
  eq (receiver(r3) = sender(r4)) = false .
	red inv180(s,p,q,p1,r,n) implies inv180(sdm3(s,r1,r2,r3,r4),p,q,p1,r,n) .
close

open INV .
  :id(nslpk)
  ops p q p1 : -> Prin .
  op r : -> Rand .
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
	eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
  eq (sender(r3) = r1) = false .
	red inv180(s,p,q,p1,r,n) implies inv180(sdm3(s,r1,r2,r3,r4),p,q,p1,r,n) .
close

open INV .
  :id(nslpk)
  ops p q p1 : -> Prin .
  op r : -> Rand .
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
	eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq (creator(r3) = r1) = false .
	red inv180(s,p,q,p1,r,n) implies inv180(sdm3(s,r1,r2,r3,r4),p,q,p1,r,n) .
close

open INV .
  :id(nslpk)
  ops p q p1 : -> Prin .
  op r : -> Rand .
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
	eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = false .
	red inv180(s,p,q,p1,r,n) implies inv180(sdm3(s,r1,r2,r3,r4),p,q,p1,r,n) .
close

open INV .
  :id(nslpk)
  ops p q p1 : -> Prin .
  op r : -> Rand .
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
	eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = false .
	red inv180(s,p,q,p1,r,n) implies inv180(sdm3(s,r1,r2,r3,r4),p,q,p1,r,n) .
close

open INV .
  :id(nslpk)
  ops p q p1 : -> Prin .
  op r : -> Rand .
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
	eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = false .
	red inv180(s,p,q,p1,r,n) implies inv180(sdm3(s,r1,r2,r3,r4),p,q,p1,r,n) .
close

open INV .
  :id(nslpk)
  ops p q p1 : -> Prin .
  op r : -> Rand .
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
	eq (r3 \in nw(s)) = false .
	red inv180(s,p,q,p1,r,n) implies inv180(sdm3(s,r1,r2,r3,r4),p,q,p1,r,n) .
close

--> I) Base case
--> init
open INV .
  :id(nslpk)
	op p : -> Prin .
    op q : -> Prin .
    op r : -> Rand .
	op n : -> Nonce .
  	red inv190(init,p,q,r,n) .
close

--> II) Induction cases
--> 1. fkm11(s,r1,r2,r3)
open INV .
  :id(nslpk)
    op p : -> Prin .
    op q : -> Prin .
    op r : -> Rand .
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Cipher1 .
	op s : -> Sys .
	eq (r3 \in cenc1(nw(s))) = true .
	red inv190(s,p,q,r,n) implies inv190(fkm11(s,r1,r2,r3),p,q,r,n) .
close

open INV .
  :id(nslpk)
	op p : -> Prin .
    op q : -> Prin .
    op r : -> Rand .
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Cipher1 .
	op s : -> Sys .
	eq (r3 \in cenc1(nw(s))) = false .
	red inv190(s,p,q,r,n) implies inv190(fkm11(s,r1,r2,r3),p,q,r,n) .
close

--> 2. fkm12(s,r1,r2,r3)
open INV .
  :id(nslpk)
	op p : -> Prin .
    op q : -> Prin .
    op r : -> Rand .
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Nonce .
	op s : -> Sys .
	eq (r3 \in cnonce(nw(s))) = true .
	red inv190(s,p,q,r,n) implies inv190(fkm12(s,r1,r2,r3),p,q,r,n) .
close

open INV .
  :id(nslpk)
	op p : -> Prin .
    op q : -> Prin .
    op r : -> Rand .
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Nonce .
	op s : -> Sys .
	eq (r3 \in cnonce(nw(s))) = false .
	red inv190(s,p,q,r,n) implies inv190(fkm12(s,r1,r2,r3),p,q,r,n) .
close

--> 3. fkm21(s,r1,r2,r3)
open INV .
  :id(nslpk)
	op p : -> Prin .
    op q : -> Prin .
    op r : -> Rand .
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Cipher2 .
	op s : -> Sys .
	eq (r3 \in cenc2(nw(s))) = true .
  	eq enc2(p,n(p,q,r),n,q) = r3 .
	red inv190(s,p,q,r,n) implies inv190(fkm21(s,r1,r2,r3),p,q,r,n) .
close

open INV .
  :id(nslpk)
	op p : -> Prin .
    op q : -> Prin .
    op r : -> Rand .
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Cipher2 .
	op s : -> Sys .
	eq (r3 \in cenc2(nw(s))) = true .
	eq (enc2(p,n(p,q,r),n,q) = r3) = false .
	red inv190(s,p,q,r,n) implies inv190(fkm21(s,r1,r2,r3),p,q,r,n) .
close

open INV .
  :id(nslpk)
	op p : -> Prin .
    op q : -> Prin .
    op r : -> Rand .
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Cipher2 .
	op s : -> Sys .
	eq (r3 \in cenc2(nw(s))) = false .
	red inv190(s,p,q,r,n) implies inv190(fkm21(s,r1,r2,r3),p,q,r,n) .
close

--> 4. fkm22(s,r1,r2,r3,r4)
open INV .
  :id(nslpk)
	op p : -> Prin .
    op q : -> Prin .
    op r : -> Rand .
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Nonce .
	op r4 : -> Nonce .
	op s : -> Sys .
	eq (r3 \in cnonce(nw(s))) = true .
	eq (r4 \in cnonce(nw(s))) = true .
    eq p = intruder .
	red inv190(s,p,q,r,n) implies inv190(fkm22(s,r1,r2,r3,r4),p,q,r,n) .
close

open INV .
  :id(nslpk)
	op p : -> Prin .
    op q : -> Prin .
    op r : -> Rand .
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Nonce .
	op r4 : -> Nonce .
	op s : -> Sys .
	eq (r3 \in cnonce(nw(s))) = true .
	eq (r4 \in cnonce(nw(s))) = true .
  	eq (p = intruder) = false .
  	eq r \in ur(s) = true .
  	red inv190(s,p,q,r,n) implies inv190(fkm22(s,r1,r2,r3,r4),p,q,r,n) .
close

open INV .
  :id(nslpk)
	op p : -> Prin .
    op q : -> Prin .
    op r : -> Rand .
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Nonce .
	op r4 : -> Nonce .
	op s : -> Sys .
	eq (r3 \in cnonce(nw(s))) = true .
	eq (r4 \in cnonce(nw(s))) = true .
  	eq (p = intruder) = false .
  	eq r \in ur(s) = false .
  	eq n(p,q,r) = r3 .
  	red inv210(s,p,q,r) implies inv190(s,p,q,r,n) implies inv190(fkm22(s,r1,r2,r3,r4),p,q,r,n) .
close

open INV .
  :id(nslpk)
	op p : -> Prin .
    op q : -> Prin .
    op r : -> Rand .
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Nonce .
	op r4 : -> Nonce .
	op s : -> Sys .
	eq (r3 \in cnonce(nw(s))) = true .
	eq (r4 \in cnonce(nw(s))) = true .
  	eq (p = intruder) = false .
  	eq r \in ur(s) = false .
  	eq (n(p,q,r) = r3) = false .
  	eq n(p,q,r) = r4 .
  	red inv210(s,p,q,r) implies inv190(s,p,q,r,n) implies inv190(fkm22(s,r1,r2,r3,r4),p,q,r,n) .
close

open INV .
  :id(nslpk)
	op p : -> Prin .
    op q : -> Prin .
    op r : -> Rand .
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Nonce .
	op r4 : -> Nonce .
	op s : -> Sys .
	eq (r3 \in cnonce(nw(s))) = true .
	eq (r4 \in cnonce(nw(s))) = true .
  	eq (p = intruder) = false .
  	eq r \in ur(s) = false .
  	eq (n(p,q,r) = r3) = false .
  	eq (n(p,q,r) = r4) = false .
  	red inv190(s,p,q,r,n) implies inv190(fkm22(s,r1,r2,r3,r4),p,q,r,n) .
close

open INV .
  :id(nslpk)
	op p : -> Prin .
    op q : -> Prin .
    op r : -> Rand .
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Nonce .
	op r4 : -> Nonce .
	op s : -> Sys .
	eq (r3 \in cnonce(nw(s))) = true .
	eq (r4 \in cnonce(nw(s))) = false .
	red inv190(s,p,q,r,n) implies inv190(fkm22(s,r1,r2,r3,r4),p,q,r,n) .
close

open INV .
  :id(nslpk)
	op p : -> Prin .
    op q : -> Prin .
    op r : -> Rand .
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Nonce .
	op r4 : -> Nonce .
	op s : -> Sys .
	eq (r3 \in cnonce(nw(s))) = false .
	red inv190(s,p,q,r,n) implies inv190(fkm22(s,r1,r2,r3,r4),p,q,r,n) .
close

--> 5. fkm31(s,r1,r2,r3)
open INV .
  :id(nslpk)
	op p : -> Prin .
    op q : -> Prin .
    op r : -> Rand .
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Cipher3 .
	op s : -> Sys .
	eq (r3 \in cenc3(nw(s))) = true .
	red inv190(s,p,q,r,n) implies inv190(fkm31(s,r1,r2,r3),p,q,r,n) .
close

open INV .
  :id(nslpk)
	op p : -> Prin .
    op q : -> Prin .
    op r : -> Rand .
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Cipher3 .
	op s : -> Sys .
	eq (r3 \in cenc3(nw(s))) = false .
	red inv190(s,p,q,r,n) implies inv190(fkm31(s,r1,r2,r3),p,q,r,n) .
close

--> 6. fkm32(s,r1,r2,r3)
open INV .
  :id(nslpk)
	op p : -> Prin .
    op q : -> Prin .
    op r : -> Rand .
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Nonce .
	op s : -> Sys .
	eq (r3 \in cnonce(nw(s))) = true .
	red inv190(s,p,q,r,n) implies inv190(fkm32(s,r1,r2,r3),p,q,r,n) .
close

open INV .
  :id(nslpk)
	op p : -> Prin .
    op q : -> Prin .
    op r : -> Rand .
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Nonce .
	op s : -> Sys .
	eq (r3 \in cnonce(nw(s))) = false .
	red inv190(s,p,q,r,n) implies inv190(fkm32(s,r1,r2,r3),p,q,r,n) .
close

--> 7. sdm1(s,r1,r2,r3)
open INV .
  :id(nslpk)
	op p : -> Prin .
    op q : -> Prin .
    op r : -> Rand .
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Rand .
	op s : -> Sys .
	eq (r3 \in ur(s)) = true .
	red inv190(s,p,q,r,n) implies inv190(sdm1(s,r1,r2,r3),p,q,r,n) .
close

open INV .
  :id(nslpk)
	op p : -> Prin .
    op q : -> Prin .
    op r : -> Rand .
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Rand .
	op s : -> Sys .
	eq (r3 \in ur(s)) = false .
	red inv190(s,p,q,r,n) implies inv190(sdm1(s,r1,r2,r3),p,q,r,n) .
close

--> 8. sdm2(s,r1,r2,r3)
open INV .
  :id(nslpk)
	op p : -> Prin .
    op q : -> Prin .
    op r : -> Rand .
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op s : -> Sys .
  	eq r3 \in nw(s) = true .
  	eq m1?(r3) = true .
  	eq receiver(r3) = r1 .
  	eq key(cipher1(r3)) = r1 .
  	eq principal(cipher1(r3)) = sender(r3) .
  	eq r2 \in ur(s) = true .
  	red inv190(s,p,q,r,n) implies inv190(sdm2(s,r1,r2,r3),p,q,r,n) .
close

open INV .
  :id(nslpk)
	op p : -> Prin .
    op q : -> Prin .
    op r : -> Rand .
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op s : -> Sys .
  eq r3 \in nw(s) = true .
  eq m1?(r3) = true .
  eq receiver(r3) = r1 .
  eq key(cipher1(r3)) = r1 .
  eq principal(cipher1(r3)) = sender(r3) .
  eq r2 \in ur(s) = false .
 
  eq p = intruder .
  red inv190(s,p,q,r,n) implies inv190(sdm2(s,r1,r2,r3),p,q,r,n) .
close


open INV .
  :id(nslpk)
	op p : -> Prin .
    op q : -> Prin .
    op r : -> Rand .
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op s : -> Sys .
  eq r3 \in nw(s) = true .
  eq m1?(r3) = true .
  eq receiver(r3) = r1 .
  eq key(cipher1(r3)) = r1 .
  eq principal(cipher1(r3)) = sender(r3) .
  eq r2 \in ur(s) = false .
 
  eq (p = intruder) = false .

  eq r = r2 .
  red inv190(s,p,q,r,n) implies inv190(sdm2(s,r1,r2,r3),p,q,r,n) .
close

open INV .
  :id(nslpk)
	op p : -> Prin .
    op q : -> Prin .
    op r : -> Rand .
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op s : -> Sys .
  
  	eq r3 \in nw(s) = true .
  	eq m1?(r3) = true .
  	eq receiver(r3) = r1 .
  	eq key(cipher1(r3)) = r1 .
  	eq principal(cipher1(r3)) = sender(r3) .
  	eq r2 \in ur(s) = false .

  	eq (p = intruder) = false .
  	eq (r = r2) = false .
  	eq r \in ur(s) = true .
  	red inv190(s,p,q,r,n) implies inv190(sdm2(s,r1,r2,r3),p,q,r,n) .
close

open INV .
  :id(nslpk)
	op p : -> Prin .
    op q : -> Prin .
    op r : -> Rand .
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op s : -> Sys .
    eq r3 \in nw(s) = true .
  	eq m1?(r3) = true .
  	eq receiver(r3) = r1 .
  	eq key(cipher1(r3)) = r1 .
  	eq principal(cipher1(r3)) = sender(r3) .
  	eq r2 \in ur(s) = false .

  	eq (p = intruder) = false .
  	eq (r = r2) = false .
  	eq r \in ur(s) = false .

  	eq q = r1 .
  	eq r1 = intruder .
  	eq sender(r3) = p .
  	eq n(p,intruder,r) = nonce(cipher1(r3)) .
  	eq n(intruder,p,r2) = n .
  	red inv210(s,p,intruder,r) implies inv190(s,p,q,r,n) implies inv190(sdm2(s,r1,r2,r3),p,q,r,n) .
close

open INV .
  :id(nslpk)
	op p : -> Prin .
    op q : -> Prin .
    op r : -> Rand .
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op s : -> Sys .
    eq r3 \in nw(s) = true .
    eq m1?(r3) = true .
    eq receiver(r3) = r1 .
    eq key(cipher1(r3)) = r1 .
    eq principal(cipher1(r3)) = sender(r3) .
    eq r2 \in ur(s) = false .
  
  	eq (p = intruder) = false .
  	eq (r = r2) = false .
  	eq r \in ur(s) = false .

  	eq q = r1 .
  	eq r1 = intruder .
  	eq sender(r3) = p .
  	eq n(p,intruder,r) = nonce(cipher1(r3)) .
  	eq (n(intruder,p,r2) = n) = false .
  	red inv190(s,p,q,r,n) implies inv190(sdm2(s,r1,r2,r3),p,q,r,n) .
close

open INV .
  :id(nslpk)
	op p : -> Prin .
    op q : -> Prin .
    op r : -> Rand .
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op s : -> Sys .
  	eq r3 \in nw(s) = true .
  	eq m1?(r3) = true .
  	eq receiver(r3) = r1 .
  	eq key(cipher1(r3)) = r1 .
  	eq principal(cipher1(r3)) = sender(r3) .
  	eq r2 \in ur(s) = false .

  	eq (p = intruder) = false .
  	eq (r = r2) = false .
  	eq r \in ur(s) = false .

  	eq q = r1 .
  	eq r1 = intruder .
  	eq sender(r3) = p .
  	eq (n(p,intruder,r) = nonce(cipher1(r3))) = false . 
  	red inv190(s,p,q,r,n) implies inv190(sdm2(s,r1,r2,r3),p,q,r,n) .
close

open INV .
  :id(nslpk)
	op p : -> Prin .
    op q : -> Prin .
    op r : -> Rand . 
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op s : -> Sys .
  	eq r3 \in nw(s) = true .
  	eq m1?(r3) = true .
  	eq receiver(r3) = r1 .
  	eq key(cipher1(r3)) = r1 .
  	eq principal(cipher1(r3)) = sender(r3) .
  	eq r2 \in ur(s) = false .

  	eq (p = intruder) = false .
  	eq (r = r2) = false .
  	eq r \in ur(s) = false .

  	eq q = r1 .
  	eq r1 = intruder .
  	eq (sender(r3) = p) = false .
  	red inv190(s,p,q,r,n) implies inv190(sdm2(s,r1,r2,r3),p,q,r,n) .
close

open INV .
  :id(nslpk)
	op p : -> Prin .
    op q : -> Prin .
    op r : -> Rand .
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op s : -> Sys .
    eq r3 \in nw(s) = true .
    eq m1?(r3) = true .
    eq receiver(r3) = r1 .
    eq key(cipher1(r3)) = r1 .
    eq principal(cipher1(r3)) = sender(r3) .
    eq r2 \in ur(s) = false .

    eq (p = intruder) = false .
    eq (r = r2) = false .
    eq r \in ur(s) = false .

  	eq q = r1 .
  	eq (r1 = intruder) = false .

  	eq sender(r3) = p .
  	eq n(p,r1,r) = nonce(cipher1(r3)) .
  	eq n(r1,p,r2) = n .
  red inv200(s,p,q,r) implies inv190(s,p,q,r,n) implies inv190(sdm2(s,r1,r2,r3),p,q,r,n) .
close

open INV .
  :id(nslpk)
	op p : -> Prin .
    op q : -> Prin .
    op r : -> Rand .
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op s : -> Sys .
    eq r3 \in nw(s) = true .
    eq m1?(r3) = true .
    eq receiver(r3) = r1 .
    eq key(cipher1(r3)) = r1 .
    eq principal(cipher1(r3)) = sender(r3) .
    eq r2 \in ur(s) = false .

    eq (p = intruder) = false .
    eq (r = r2) = false .
    eq r \in ur(s) = false .

  	eq q = r1 .
  	eq (r1 = intruder) = false .

  	eq sender(r3) = p .
  	eq n(p,r1,r) = nonce(cipher1(r3)) .
  	eq (n(r1,p,r2) = n) = false .
  red inv190(s,p,q,r,n) implies inv190(sdm2(s,r1,r2,r3),p,q,r,n) .
close

open INV .
  :id(nslpk)
	op p : -> Prin .
    op q : -> Prin .
    op r : -> Rand .
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op s : -> Sys .
    eq r3 \in nw(s) = true .
    eq m1?(r3) = true .
    eq receiver(r3) = r1 .
    eq key(cipher1(r3)) = r1 .
    eq principal(cipher1(r3)) = sender(r3) .
    eq r2 \in ur(s) = false .

    eq (p = intruder) = false .
    eq (r = r2) = false .
    eq r \in ur(s) = false .
  
  	eq q = r1 .
  	eq (r1 = intruder) = false .

  	eq sender(r3) = p .
  	eq (n(p,r1,r) = nonce(cipher1(r3))) = false .
  red inv190(s,p,q,r,n) implies inv190(sdm2(s,r1,r2,r3),p,q,r,n) .
close
   
open INV .
  :id(nslpk)
	op p : -> Prin .
  	op q : -> Prin .
  	op r : -> Rand .
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op s : -> Sys .
  	eq r3 \in nw(s) = true .
  	eq m1?(r3) = true .
  	eq receiver(r3) = r1 .
  	eq key(cipher1(r3)) = r1 .
  	eq principal(cipher1(r3)) = sender(r3) .
  	eq r2 \in ur(s) = false .

  	eq (p = intruder) = false .
  	eq (r = r2) = false .
  	eq r \in ur(s) = false .

  	eq q = r1 .
  	eq (r1 = intruder) = false .

  	eq (sender(r3) = p) = false .
  	red inv190(s,p,q,r,n) implies inv190(sdm2(s,r1,r2,r3),p,q,r,n) .
close

open INV .
  :id(nslpk)
	op p : -> Prin .
  	op q : -> Prin .
  	op r : -> Rand .
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op s : -> Sys .
  	eq r3 \in nw(s) = true .
  	eq m1?(r3) = true .
  	eq receiver(r3) = r1 .
  	eq key(cipher1(r3)) = r1 .
  	eq principal(cipher1(r3)) = sender(r3) .
  	eq r2 \in ur(s) = false .

  	eq (p = intruder) = false .
  	eq (r = r2) = false .
  	eq r \in ur(s) = false .
  
  	eq (q = r1) = false .
  	red inv190(s,p,q,r,n) implies inv190(sdm2(s,r1,r2,r3),p,q,r,n) .
close

open INV .
  :id(nslpk)
	op p : -> Prin .
    op q : -> Prin .
    op r : -> Rand .
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op s : -> Sys .
    eq r3 \in nw(s) = true .
    eq m1?(r3) = true .
    eq receiver(r3) = r1 .
    eq key(cipher1(r3)) = r1 .
    eq (principal(cipher1(r3)) = sender(r3)) = false .
	red inv190(s,p,q,r,n) implies inv190(sdm2(s,r1,r2,r3),p,q,r,n) .
close

open INV .
  :id(nslpk)
	op p : -> Prin .
    op q : -> Prin .
    op r : -> Rand .
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op s : -> Sys .
    eq r3 \in nw(s) = true .
    eq m1?(r3) = true .
    eq receiver(r3) = r1 .
    eq (key(cipher1(r3)) = r1) = false .
	red inv190(s,p,q,r,n) implies inv190(sdm2(s,r1,r2,r3),p,q,r,n) .
close

open INV .
  :id(nslpk)
	op p : -> Prin .
    op q : -> Prin .
    op r : -> Rand .
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op s : -> Sys .
    eq r3 \in nw(s) = true .
    eq m1?(r3) = true .
    eq (receiver(r3) = r1) = false .
	red inv190(s,p,q,r,n) implies inv190(sdm2(s,r1,r2,r3),p,q,r,n) .
close

open INV .
  :id(nslpk)
	op p : -> Prin .
    op q : -> Prin .
    op r : -> Rand .
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op s : -> Sys .
    eq r3 \in nw(s) = true .
    eq m1?(r3) = false .
	red inv190(s,p,q,r,n) implies inv190(sdm2(s,r1,r2,r3),p,q,r,n) .
close

open INV .
  :id(nslpk)
	op p : -> Prin .
    op q : -> Prin .
    op r : -> Rand .
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op s : -> Sys .
    eq r3 \in nw(s) = false .
	red inv190(s,p,q,r,n) implies inv190(sdm2(s,r1,r2,r3),p,q,r,n) .
close

--> 9. sdm3(s,r1,r2,r3,r4)
open INV .
  :id(nslpk)
	op p : -> Prin .
    op q : -> Prin .
    op r : -> Rand .
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
    eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
    eq sender(r3) = r1 .
    eq receiver(r3) = sender(r4) .
    eq key(cipher1(r3)) = sender(r4) .
	eq nonce(cipher1(r3)) = n(r1,sender(r4),r2) .
	eq principal(cipher1(r3)) = r1 .
    eq receiver(r4) = r1 .
	eq key(cipher2(r4)) = r1 .
    eq nonce1(cipher2(r4)) = n(r1,sender(r4),r2) .
	eq principal(cipher2(r4)) = sender(r4) .
	red inv190(s,p,q,r,n) implies inv190(sdm3(s,r1,r2,r3,r4),p,q,r,n) .
close

open INV .
  :id(nslpk)
	op p : -> Prin .
    op q : -> Prin .
    op r : -> Rand .
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
    eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
    eq sender(r3) = r1 .
    eq receiver(r3) = sender(r4) .
    eq key(cipher1(r3)) = sender(r4) .
	eq nonce(cipher1(r3)) = n(r1,sender(r4),r2) .
	eq principal(cipher1(r3)) = r1 .
    eq receiver(r4) = r1 .
	eq key(cipher2(r4)) = r1 .
    eq nonce1(cipher2(r4)) = n(r1,sender(r4),r2) .
	eq (principal(cipher2(r4)) = sender(r4)) = false .
	red inv190(s,p,q,r,n) implies inv190(sdm3(s,r1,r2,r3,r4),p,q,r,n) .
close

open INV .
  :id(nslpk)
	op p : -> Prin .
    op q : -> Prin .
    op r : -> Rand .
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
    eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
    eq sender(r3) = r1 .
    eq receiver(r3) = sender(r4) .
    eq key(cipher1(r3)) = sender(r4) .
	eq nonce(cipher1(r3)) = n(r1,sender(r4),r2) .
	eq principal(cipher1(r3)) = r1 .
    eq receiver(r4) = r1 .
	eq key(cipher2(r4)) = r1 .
    eq (nonce1(cipher2(r4)) = n(r1,sender(r4),r2)) = false .
	red inv190(s,p,q,r,n) implies inv190(sdm3(s,r1,r2,r3,r4),p,q,r,n) .
close

open INV .
  :id(nslpk)
	op p : -> Prin .
    op q : -> Prin .
    op r : -> Rand .
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
    eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
    eq sender(r3) = r1 .
    eq receiver(r3) = sender(r4) .
    eq key(cipher1(r3)) = sender(r4) .
	eq nonce(cipher1(r3)) = n(r1,sender(r4),r2) .
	eq principal(cipher1(r3)) = r1 .
    eq receiver(r4) = r1 .
	eq (key(cipher2(r4)) = r1) = false .
	red inv190(s,p,q,r,n) implies inv190(sdm3(s,r1,r2,r3,r4),p,q,r,n) .
close

open INV .
  :id(nslpk)
	op p : -> Prin .
    op q : -> Prin .
    op r : -> Rand .
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
    eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
    eq sender(r3) = r1 .
    eq receiver(r3) = sender(r4) .
    eq key(cipher1(r3)) = sender(r4) .
	eq nonce(cipher1(r3)) = n(r1,sender(r4),r2) .
	eq principal(cipher1(r3)) = r1 .
    eq (receiver(r4) = r1) = false .
	red inv190(s,p,q,r,n) implies inv190(sdm3(s,r1,r2,r3,r4),p,q,r,n) .
close

open INV .
  :id(nslpk)
	op p : -> Prin .
    op q : -> Prin .
    op r : -> Rand .
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
    eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
    eq sender(r3) = r1 .
    eq receiver(r3) = sender(r4) .
    eq key(cipher1(r3)) = sender(r4) .
	eq nonce(cipher1(r3)) = n(r1,sender(r4),r2) .
	eq (principal(cipher1(r3)) = r1) = false .
	red inv190(s,p,q,r,n) implies inv190(sdm3(s,r1,r2,r3,r4),p,q,r,n) .
close

open INV .
  :id(nslpk)
	op p : -> Prin .
    op q : -> Prin .
    op r : -> Rand .
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
    eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
    eq sender(r3) = r1 .
    eq receiver(r3) = sender(r4) .
    eq key(cipher1(r3)) = sender(r4) .
	eq (nonce(cipher1(r3)) = n(r1,sender(r4),r2)) = false .
	red inv190(s,p,q,r,n) implies inv190(sdm3(s,r1,r2,r3,r4),p,q,r,n) .
close

open INV .
  :id(nslpk)
	op p : -> Prin .
    op q : -> Prin .
    op r : -> Rand .
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
	eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
    eq sender(r3) = r1 .
    eq receiver(r3) = sender(r4) .
    eq (key(cipher1(r3)) = sender(r4)) = false .
	red inv190(s,p,q,r,n) implies inv190(sdm3(s,r1,r2,r3,r4),p,q,r,n) .
close

open INV .
  :id(nslpk)
	op p : -> Prin .
    op q : -> Prin .
    op r : -> Rand .
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
	eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
    eq sender(r3) = r1 .
    eq (receiver(r3) = sender(r4)) = false .
	red inv190(s,p,q,r,n) implies inv190(sdm3(s,r1,r2,r3,r4),p,q,r,n) .
close

open INV .
  :id(nslpk)
	op p : -> Prin .
    op q : -> Prin .
    op r : -> Rand .
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
	eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
    eq (sender(r3) = r1) = false .
	red inv190(s,p,q,r,n) implies inv190(sdm3(s,r1,r2,r3,r4),p,q,r,n) .
close

open INV .
  :id(nslpk)
	op p : -> Prin .
    op q : -> Prin .
    op r : -> Rand .
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
	eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq (creator(r3) = r1) = false .
	red inv190(s,p,q,r,n) implies inv190(sdm3(s,r1,r2,r3,r4),p,q,r,n) .
close

open INV .
  :id(nslpk)
	op p : -> Prin .
    op q : -> Prin .
    op r : -> Rand .
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
	eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = false .
	red inv190(s,p,q,r,n) implies inv190(sdm3(s,r1,r2,r3,r4),p,q,r,n) .
close

open INV .
  :id(nslpk)
	op p : -> Prin .
    op q : -> Prin .
    op r : -> Rand .
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
	eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = false .
	red inv190(s,p,q,r,n) implies inv190(sdm3(s,r1,r2,r3,r4),p,q,r,n) .
close

open INV .
  :id(nslpk)
	op p : -> Prin .
    op q : -> Prin .
    op r : -> Rand .
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
	eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = false .
	red inv190(s,p,q,r,n) implies inv190(sdm3(s,r1,r2,r3,r4),p,q,r,n) .
close

open INV .
  :id(nslpk)
	op p : -> Prin .
    op q : -> Prin .
    op r : -> Rand .
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
	eq (r3 \in nw(s)) = false .
	red inv190(s,p,q,r,n) implies inv190(sdm3(s,r1,r2,r3,r4),p,q,r,n) .
close

--> I) Base case
--> init
open INV .
  :id(nslpk)
  op p : -> Prin .
  op q : -> Prin .
  op r : -> Rand .
  red inv200(init,p,q,r) .
close

--> II) Induction cases
--> 1. fkm11(s,r1,r2,r3)
open INV .
  :id(nslpk)
    op p : -> Prin .
    op q : -> Prin .
    op r : -> Rand .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Cipher1 .
	op s : -> Sys .
	eq (r3 \in cenc1(nw(s))) = true .
    eq enc1(q,n(p,q,r),p) = r3 .
	red inv200(s,p,q,r) implies inv200(fkm11(s,r1,r2,r3),p,q,r) .
close

open INV .
  :id(nslpk)
    op p : -> Prin .
    op q : -> Prin .
    op r : -> Rand .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Cipher1 .
	op s : -> Sys .
	eq (r3 \in cenc1(nw(s))) = true .
    eq (enc1(q,n(p,q,r),p) = r3) = false .
	red inv200(s,p,q,r) implies inv200(fkm11(s,r1,r2,r3),p,q,r) .
close

open INV .
  :id(nslpk)
    op p : -> Prin .
    op q : -> Prin .
    op r : -> Rand .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Cipher1 .
	op s : -> Sys .
	eq (r3 \in cenc1(nw(s))) = false .
	red inv200(s,p,q,r) implies inv200(fkm11(s,r1,r2,r3),p,q,r) .
close

--> 2. fkm12(s,r1,r2,r3)
open INV .
  :id(nslpk)
    op p : -> Prin .
    op q : -> Prin .
    op r : -> Rand .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Nonce .
	op s : -> Sys .
	eq (r3 \in cnonce(nw(s))) = true .
    eq r2 = intruder .
	red inv200(s,p,q,r) implies inv200(fkm12(s,r1,r2,r3),p,q,r) .
close

open INV .
  :id(nslpk)
    op p : -> Prin .
    op q : -> Prin .
    op r : -> Rand .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Nonce .
	op s : -> Sys .
	eq (r3 \in cnonce(nw(s))) = true .
    eq (r2 = intruder) = false .
    eq r \in ur(s) = true .
	red inv200(s,p,q,r) implies inv200(fkm12(s,r1,r2,r3),p,q,r) .
close

open INV .
  :id(nslpk)
    op p : -> Prin .
    op q : -> Prin .
    op r : -> Rand .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Nonce .
	op s : -> Sys .
	eq (r3 \in cnonce(nw(s))) = true .
    eq (r2 = intruder) = false .
    eq r \in ur(s) = false .
    eq n(p,q,r) = r3 .
	red inv210(s,p,q,r) implies inv200(s,p,q,r) implies inv200(fkm12(s,r1,r2,r3),p,q,r) .
close

open INV .
  :id(nslpk)
    op p : -> Prin .
    op q : -> Prin .
    op r : -> Rand .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Nonce .
	op s : -> Sys .
	eq (r3 \in cnonce(nw(s))) = true .
    eq (r2 = intruder) = false .
    eq r \in ur(s) = false .
    eq (n(p,q,r) = r3) = false .
	red inv200(s,p,q,r) implies inv200(fkm12(s,r1,r2,r3),p,q,r) .
close

open INV .
  :id(nslpk)
    op p : -> Prin .
    op q : -> Prin .
    op r : -> Rand .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Nonce .
	op s : -> Sys .
	eq (r3 \in cnonce(nw(s))) = false .
	red inv200(s,p,q,r) implies inv200(fkm12(s,r1,r2,r3),p,q,r) .
close

--> 3. fkm21(s,r1,r2,r3)
open INV .
  :id(nslpk)
    op p : -> Prin .
    op q : -> Prin .
    op r : -> Rand .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Cipher2 .
	op s : -> Sys .
	eq (r3 \in cenc2(nw(s))) = true .
	red inv200(s,p,q,r) implies inv200(fkm21(s,r1,r2,r3),p,q,r) .
close

open INV .
  :id(nslpk)
    op p : -> Prin .
    op q : -> Prin .
    op r : -> Rand .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Cipher2 .
	op s : -> Sys .
	eq (r3 \in cenc2(nw(s))) = false .
	red inv200(s,p,q,r) implies inv200(fkm21(s,r1,r2,r3),p,q,r) .
close

--> 4. fkm22(s,r1,r2,r3,r4)
open INV .
  :id(nslpk)
    op p : -> Prin .
    op q : -> Prin .
    op r : -> Rand .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Nonce .
	op r4 : -> Nonce .
	op s : -> Sys .
	eq (r3 \in cnonce(nw(s))) = true .
	eq (r4 \in cnonce(nw(s))) = true .
	red inv200(s,p,q,r) implies inv200(fkm22(s,r1,r2,r3,r4),p,q,r) .
close

open INV .
  :id(nslpk)
    op p : -> Prin .
    op q : -> Prin .
    op r : -> Rand .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Nonce .
	op r4 : -> Nonce .
	op s : -> Sys .
	eq (r3 \in cnonce(nw(s))) = true .
	eq (r4 \in cnonce(nw(s))) = false .
	red inv200(s,p,q,r) implies inv200(fkm22(s,r1,r2,r3,r4),p,q,r) .
close

open INV .
  :id(nslpk)
    op p : -> Prin .
    op q : -> Prin .
    op r : -> Rand .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Nonce .
	op r4 : -> Nonce .
	op s : -> Sys .
	eq (r3 \in cnonce(nw(s))) = false .
	red inv200(s,p,q,r) implies inv200(fkm22(s,r1,r2,r3,r4),p,q,r) .
close

--> 5. fkm31(s,r1,r2,r3)
open INV .
  :id(nslpk)
    op p : -> Prin .
    op q : -> Prin .
    op r : -> Rand .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Cipher3 .
	op s : -> Sys .
	eq (r3 \in cenc3(nw(s))) = true .
	red inv200(s,p,q,r) implies inv200(fkm31(s,r1,r2,r3),p,q,r) .
close

open INV .
  :id(nslpk)
    op p : -> Prin .
    op q : -> Prin .
    op r : -> Rand .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Cipher3 .
	op s : -> Sys .
	eq (r3 \in cenc3(nw(s))) = false .
	red inv200(s,p,q,r) implies inv200(fkm31(s,r1,r2,r3),p,q,r) .
close

--> 6. fkm32(s,r1,r2,r3)
open INV .
  :id(nslpk)
    op p : -> Prin .
    op q : -> Prin .
    op r : -> Rand .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Nonce .
	op s : -> Sys .
	eq (r3 \in cnonce(nw(s))) = true .
	red inv200(s,p,q,r) implies inv200(fkm32(s,r1,r2,r3),p,q,r) .
close

open INV .
  :id(nslpk)
    op p : -> Prin .
    op q : -> Prin .
    op r : -> Rand .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Nonce .
	op s : -> Sys .
	eq (r3 \in cnonce(nw(s))) = false .
	red inv200(s,p,q,r) implies inv200(fkm32(s,r1,r2,r3),p,q,r) .
close

--> 7. sdm1(s,r1,r2,r3)
open INV .
  :id(nslpk)
    op p : -> Prin .
    op q : -> Prin .
    op r : -> Rand .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Rand .
	op s : -> Sys .
	eq (r3 \in ur(s)) = true .
	red inv200(s,p,q,r) implies inv200(sdm1(s,r1,r2,r3),p,q,r) .
close

open INV .
  :id(nslpk)
    op p : -> Prin .
    op q : -> Prin .
    op r : -> Rand .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Rand .
	op s : -> Sys .
	eq (r3 \in ur(s)) = false .
    eq r = r3 .
	red inv200(s,p,q,r) implies inv200(sdm1(s,r1,r2,r3),p,q,r) .
close

open INV .
  :id(nslpk)
    op p : -> Prin .
    op q : -> Prin .
    op r : -> Rand .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Rand .
	op s : -> Sys .
	eq (r3 \in ur(s)) = false .
    eq (r = r3) = false .
	red inv200(s,p,q,r) implies inv200(sdm1(s,r1,r2,r3),p,q,r) .
close

--> 8. sdm2(s,r1,r2,r3)
open INV .
  :id(nslpk)
    op p : -> Prin .
    op q : -> Prin .
    op r : -> Rand .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op s : -> Sys .
  	eq r3 \in nw(s) = true .
  	eq m1?(r3) = true .
  	eq receiver(r3) = r1 .
  	eq key(cipher1(r3)) = r1 .
  	eq principal(cipher1(r3)) = sender(r3) .
  	eq r2 \in ur(s) = true .
	red inv200(s,p,q,r) implies inv200(sdm2(s,r1,r2,r3),p,q,r) .
close

open INV .
  :id(nslpk)
    op p : -> Prin .
    op q : -> Prin .
    op r : -> Rand .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op s : -> Sys .
  	eq r3 \in nw(s) = true .
  	eq m1?(r3) = true .
	eq receiver(r3) = r1 .
  	eq key(cipher1(r3)) = r1 .
  	eq principal(cipher1(r3)) = sender(r3) .
  	eq r2 \in ur(s) = false .

  	eq r = r2 .
	red inv200(s,p,q,r) implies inv200(sdm2(s,r1,r2,r3),p,q,r) .
close

open INV .
  :id(nslpk)
    op p : -> Prin .
    op q : -> Prin .
    op r : -> Rand .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op s : -> Sys .
  	eq r3 \in nw(s) = true .
  	eq m1?(r3) = true .
  	eq receiver(r3) = r1 .
  	eq key(cipher1(r3)) = r1 .
  	eq principal(cipher1(r3)) = sender(r3) .
  	eq r2 \in ur(s) = false .

  	eq (r = r2) = false .
	red inv200(s,p,q,r) implies inv200(sdm2(s,r1,r2,r3),p,q,r) .
close

open INV .
  :id(nslpk)
    op p : -> Prin .
    op q : -> Prin .
    op r : -> Rand .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op s : -> Sys .
  	eq r3 \in nw(s) = true .
  	eq m1?(r3) = true .
  	eq receiver(r3) = r1 .
  	eq key(cipher1(r3)) = r1 .
  	eq (principal(cipher1(r3)) = sender(r3)) = false .
	red inv200(s,p,q,r) implies inv200(sdm2(s,r1,r2,r3),p,q,r) .
close

open INV .
  :id(nslpk)
    op p : -> Prin .
    op q : -> Prin .
    op r : -> Rand .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op s : -> Sys .
  	eq r3 \in nw(s) = true .
  	eq m1?(r3) = true .
  	eq receiver(r3) = r1 .
  	eq (key(cipher1(r3)) = r1) = false .
	red inv200(s,p,q,r) implies inv200(sdm2(s,r1,r2,r3),p,q,r) .
close

open INV .
  :id(nslpk)
    op p : -> Prin .
    op q : -> Prin .
    op r : -> Rand .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op s : -> Sys .
  	eq r3 \in nw(s) = true .
  	eq m1?(r3) = true .
  	eq (receiver(r3) = r1) = false .
	red inv200(s,p,q,r) implies inv200(sdm2(s,r1,r2,r3),p,q,r) .
close

open INV .
  :id(nslpk)
    op p : -> Prin .
    op q : -> Prin .
    op r : -> Rand .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op s : -> Sys .
  	eq r3 \in nw(s) = true .
  	eq m1?(r3) = false .
	red inv200(s,p,q,r) implies inv200(sdm2(s,r1,r2,r3),p,q,r) .
close

open INV .
  :id(nslpk)
    op p : -> Prin .
    op q : -> Prin .
    op r : -> Rand .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op s : -> Sys .
  	eq r3 \in nw(s) = false .
	red inv200(s,p,q,r) implies inv200(sdm2(s,r1,r2,r3),p,q,r) .
close

--> 9. sdm3(s,r1,r2,r3,r4)
open INV .
  :id(nslpk)
    op p : -> Prin .
    op q : -> Prin .
    op r : -> Rand .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
    eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
    eq sender(r3) = r1 .
    eq receiver(r3) = sender(r4) .
    eq key(cipher1(r3)) = sender(r4) .
	eq nonce(cipher1(r3)) = n(r1,sender(r4),r2) .
	eq principal(cipher1(r3)) = r1 .
    eq receiver(r4) = r1 .
	eq key(cipher2(r4)) = r1 .
    eq nonce1(cipher2(r4)) = n(r1,sender(r4),r2) .
	eq principal(cipher2(r4)) = sender(r4) .
	red inv200(s,p,q,r) implies inv200(sdm3(s,r1,r2,r3,r4),p,q,r) .
close

open INV .
  :id(nslpk)
    op p : -> Prin .
    op q : -> Prin .
    op r : -> Rand .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
    eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
    eq sender(r3) = r1 .
    eq receiver(r3) = sender(r4) .
    eq key(cipher1(r3)) = sender(r4) .
	eq nonce(cipher1(r3)) = n(r1,sender(r4),r2) .
	eq principal(cipher1(r3)) = r1 .
    eq receiver(r4) = r1 .
	eq key(cipher2(r4)) = r1 .
    eq nonce1(cipher2(r4)) = n(r1,sender(r4),r2) .
	eq (principal(cipher2(r4)) = sender(r4)) = false .
	red inv200(s,p,q,r) implies inv200(sdm3(s,r1,r2,r3,r4),p,q,r) .
close

open INV .
  :id(nslpk)
    op p : -> Prin .
    op q : -> Prin .
    op r : -> Rand .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
    eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
    eq sender(r3) = r1 .
    eq receiver(r3) = sender(r4) .
    eq key(cipher1(r3)) = sender(r4) .
	eq nonce(cipher1(r3)) = n(r1,sender(r4),r2) .
	eq principal(cipher1(r3)) = r1 .
    eq receiver(r4) = r1 .
	eq key(cipher2(r4)) = r1 .
    eq (nonce1(cipher2(r4)) = n(r1,sender(r4),r2)) = false .
	red inv200(s,p,q,r) implies inv200(sdm3(s,r1,r2,r3,r4),p,q,r) .
close

open INV .
  :id(nslpk)
    op p : -> Prin .
    op q : -> Prin .
    op r : -> Rand .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
    eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
    eq sender(r3) = r1 .
    eq receiver(r3) = sender(r4) .
    eq key(cipher1(r3)) = sender(r4) .
	eq nonce(cipher1(r3)) = n(r1,sender(r4),r2) .
	eq principal(cipher1(r3)) = r1 .
    eq receiver(r4) = r1 .
	eq (key(cipher2(r4)) = r1) = false .
	red inv200(s,p,q,r) implies inv200(sdm3(s,r1,r2,r3,r4),p,q,r) .
close

open INV .
  :id(nslpk)
    op p : -> Prin .
    op q : -> Prin .
    op r : -> Rand .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
    eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
    eq sender(r3) = r1 .
    eq receiver(r3) = sender(r4) .
    eq key(cipher1(r3)) = sender(r4) .
	eq nonce(cipher1(r3)) = n(r1,sender(r4),r2) .
	eq principal(cipher1(r3)) = r1 .
    eq (receiver(r4) = r1) = false .
	red inv200(s,p,q,r) implies inv200(sdm3(s,r1,r2,r3,r4),p,q,r) .
close

open INV .
  :id(nslpk)
    op p : -> Prin .
    op q : -> Prin .
    op r : -> Rand .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
    eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
    eq sender(r3) = r1 .
    eq receiver(r3) = sender(r4) .
    eq key(cipher1(r3)) = sender(r4) .
	eq nonce(cipher1(r3)) = n(r1,sender(r4),r2) .
	eq (principal(cipher1(r3)) = r1) = false .
	red inv200(s,p,q,r) implies inv200(sdm3(s,r1,r2,r3,r4),p,q,r) .
close

open INV .
  :id(nslpk)
    op p : -> Prin .
    op q : -> Prin .
    op r : -> Rand .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
    eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
    eq sender(r3) = r1 .
    eq receiver(r3) = sender(r4) .
    eq key(cipher1(r3)) = sender(r4) .
	eq (nonce(cipher1(r3)) = n(r1,sender(r4),r2)) = false .
	red inv200(s,p,q,r) implies inv200(sdm3(s,r1,r2,r3,r4),p,q,r) .
close

open INV .
  :id(nslpk)
    op p : -> Prin .
    op q : -> Prin .
    op r : -> Rand .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
	eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
    eq sender(r3) = r1 .
    eq receiver(r3) = sender(r4) .
    eq (key(cipher1(r3)) = sender(r4)) = false .
	red inv200(s,p,q,r) implies inv200(sdm3(s,r1,r2,r3,r4),p,q,r) .
close

open INV .
  :id(nslpk)
    op p : -> Prin .
    op q : -> Prin .
    op r : -> Rand .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
	eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
    eq sender(r3) = r1 .
    eq (receiver(r3) = sender(r4)) = false .
	red inv200(s,p,q,r) implies inv200(sdm3(s,r1,r2,r3,r4),p,q,r) .
close

open INV .
  :id(nslpk)
    op p : -> Prin .
    op q : -> Prin .
    op r : -> Rand .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
	eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
    eq (sender(r3) = r1) = false .
	red inv200(s,p,q,r) implies inv200(sdm3(s,r1,r2,r3,r4),p,q,r) .
close

open INV .
  :id(nslpk)
    op p : -> Prin .
    op q : -> Prin .
    op r : -> Rand .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
	eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq (creator(r3) = r1) = false .
	red inv200(s,p,q,r) implies inv200(sdm3(s,r1,r2,r3,r4),p,q,r) .
close

open INV .
  :id(nslpk)	
    op p : -> Prin .
    op q : -> Prin .
    op r : -> Rand .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
	eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = false .
	red inv200(s,p,q,r) implies inv200(sdm3(s,r1,r2,r3,r4),p,q,r) .
close

open INV .
  :id(nslpk)
    op p : -> Prin .
    op q : -> Prin .
    op r : -> Rand .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
	eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = false .
	red inv200(s,p,q,r) implies inv200(sdm3(s,r1,r2,r3,r4),p,q,r) .
close

open INV .
  :id(nslpk)	
    op p : -> Prin .
    op q : -> Prin .
    op r : -> Rand .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
	eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = false .
	red inv200(s,p,q,r) implies inv200(sdm3(s,r1,r2,r3,r4),p,q,r) .
close

open INV .
  :id(nslpk)	
    op p : -> Prin .
    op q : -> Prin .
    op r : -> Rand .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
	eq (r3 \in nw(s)) = false .
	red inv200(s,p,q,r) implies inv200(sdm3(s,r1,r2,r3,r4),p,q,r) .
close

--> I) Base case
--> init
open INV .
  :id(nslpk)
  op p : -> Prin .
  op q : -> Prin .
  op r : -> Rand .
  red inv210(init,p,q,r) .
close

--> II) Induction cases
--> 1. fkm11(s,r1,r2,r3)
open INV .
  :id(nslpk)
    op p : -> Prin .
    op q : -> Prin .
    op r : -> Rand .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Cipher1 .
	op s : -> Sys .
	eq (r3 \in cenc1(nw(s))) = true .
  	eq key(r3) = intruder .
	red inv100(s,r3) implies inv210(s,p,q,r) implies inv210(fkm11(s,r1,r2,r3),p,q,r) .
close

open INV .
  :id(nslpk)
    op p : -> Prin .
    op q : -> Prin .
    op r : -> Rand .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Cipher1 .
	op s : -> Sys .
	eq (r3 \in cenc1(nw(s))) = true .
  	eq (key(r3) = intruder) = false .
	red inv210(s,p,q,r) implies inv210(fkm11(s,r1,r2,r3),p,q,r) .
close

open INV .
  :id(nslpk)
    op p : -> Prin .
    op q : -> Prin .
    op r : -> Rand .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Cipher1 .
	op s : -> Sys .
	eq (r3 \in cenc1(nw(s))) = false .
	red inv210(s,p,q,r) implies inv210(fkm11(s,r1,r2,r3),p,q,r) .
close

--> 2. fkm12(s,r1,r2,r3)
open INV .
  :id(nslpk)
    op p : -> Prin .
    op q : -> Prin .
    op r : -> Rand .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Nonce .
	op s : -> Sys .
	eq (r3 \in cnonce(nw(s))) = true .
  	eq n(p,q,r) = r3 .
	red inv210(s,p,q,r) implies inv210(fkm12(s,r1,r2,r3),p,q,r) .
close

open INV .
  :id(nslpk)
    op p : -> Prin .
    op q : -> Prin .
    op r : -> Rand .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Nonce .
	op s : -> Sys .
	eq (r3 \in cnonce(nw(s))) = true .
  	eq (n(p,q,r) = r3) = false .
	red inv210(s,p,q,r) implies inv210(fkm12(s,r1,r2,r3),p,q,r) .
close

open INV .
  :id(nslpk)
    op p : -> Prin .
    op q : -> Prin .
    op r : -> Rand .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Nonce .
	op s : -> Sys .
	eq (r3 \in cnonce(nw(s))) = false .
	red inv210(s,p,q,r) implies inv210(fkm12(s,r1,r2,r3),p,q,r) .
close

--> 3. fkm21(s,r1,r2,r3)
open INV .
  :id(nslpk)
    op p : -> Prin .
    op q : -> Prin .
    op r : -> Rand .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Cipher2 .
	op s : -> Sys .
	eq (r3 \in cenc2(nw(s))) = true .
  	eq key(r3) = intruder .
	red inv110(s,r3) implies inv210(s,p,q,r) implies inv210(fkm21(s,r1,r2,r3),p,q,r) .
close

open INV .
  :id(nslpk)
    op p : -> Prin .
    op q : -> Prin .
    op r : -> Rand .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Cipher2 .
	op s : -> Sys .
	eq (r3 \in cenc2(nw(s))) = true .
  	eq (key(r3) = intruder) = false .
	red inv210(s,p,q,r) implies inv210(fkm21(s,r1,r2,r3),p,q,r) .
close

open INV .
  :id(nslpk)
    op p : -> Prin .
    op q : -> Prin .
    op r : -> Rand .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Cipher2 .
	op s : -> Sys .
	eq (r3 \in cenc2(nw(s))) = false .
	red inv210(s,p,q,r) implies inv210(fkm21(s,r1,r2,r3),p,q,r) .
close

--> 4. fkm22(s,r1,r2,r3,r4)
open INV .
  :id(nslpk)
    op p : -> Prin .
    op q : -> Prin .
    op r : -> Rand .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Nonce .
	op r4 : -> Nonce .
	op s : -> Sys .
	eq (r3 \in cnonce(nw(s))) = true .
	eq (r4 \in cnonce(nw(s))) = true .
  	eq n(p,q,r) = r3 .
	red inv210(s,p,q,r) implies inv210(fkm22(s,r1,r2,r3,r4),p,q,r) .
close

open INV .
  :id(nslpk)
    op p : -> Prin .
    op q : -> Prin .
    op r : -> Rand .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Nonce .
	op r4 : -> Nonce .
	op s : -> Sys .
	eq (r3 \in cnonce(nw(s))) = true .
	eq (r4 \in cnonce(nw(s))) = true .
  	eq (n(p,q,r) = r3) = false .
  	eq n(p,q,r) = r4 .
	red inv210(s,p,q,r) implies inv210(fkm22(s,r1,r2,r3,r4),p,q,r) .
close

open INV .
  :id(nslpk)
    op p : -> Prin .
    op q : -> Prin .
    op r : -> Rand .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Nonce .
	op r4 : -> Nonce .
	op s : -> Sys .
	eq (r3 \in cnonce(nw(s))) = true .
	eq (r4 \in cnonce(nw(s))) = true .
  	eq (n(p,q,r) = r3) = false .
  	eq (n(p,q,r) = r4) = false .
	red inv210(s,p,q,r) implies inv210(fkm22(s,r1,r2,r3,r4),p,q,r) .
close

open INV .
  :id(nslpk)
    op p : -> Prin .
    op q : -> Prin .
    op r : -> Rand .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Nonce .
	op r4 : -> Nonce .
	op s : -> Sys .
	eq (r3 \in cnonce(nw(s))) = true .
	eq (r4 \in cnonce(nw(s))) = false .
	red inv210(s,p,q,r) implies inv210(fkm22(s,r1,r2,r3,r4),p,q,r) .
close

open INV .
  :id(nslpk)
    op p : -> Prin .
    op q : -> Prin .
    op r : -> Rand .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Nonce .
	op r4 : -> Nonce .
	op s : -> Sys .
	eq (r3 \in cnonce(nw(s))) = false .
	red inv210(s,p,q,r) implies inv210(fkm22(s,r1,r2,r3,r4),p,q,r) .
close

--> 5. fkm31(s,r1,r2,r3)
open INV .
  :id(nslpk)
    op p : -> Prin .
    op q : -> Prin .
    op r : -> Rand .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Cipher3 .
	op s : -> Sys .
	eq (r3 \in cenc3(nw(s))) = true .
  	eq key(r3) = intruder .
	red inv120(s,r3) implies inv210(s,p,q,r) implies inv210(fkm31(s,r1,r2,r3),p,q,r) .
close

open INV .
  :id(nslpk)
    op p : -> Prin .
    op q : -> Prin .
    op r : -> Rand .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Cipher3 .
	op s : -> Sys .
	eq (r3 \in cenc3(nw(s))) = true .
  	eq (key(r3) = intruder) = false .
	red inv210(s,p,q,r) implies inv210(fkm31(s,r1,r2,r3),p,q,r) .
close

open INV .
  :id(nslpk)
    op p : -> Prin .
    op q : -> Prin .
    op r : -> Rand .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Cipher3 .
	op s : -> Sys .
	eq (r3 \in cenc3(nw(s))) = false .
	red inv210(s,p,q,r) implies inv210(fkm31(s,r1,r2,r3),p,q,r) .
close

--> 6. fkm32(s,r1,r2,r3)
open INV .
  :id(nslpk)
    op p : -> Prin .
    op q : -> Prin .
    op r : -> Rand .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Nonce .
	op s : -> Sys .
	eq (r3 \in cnonce(nw(s))) = true .
  	eq n(p,q,r) = r3 .
	red inv210(s,p,q,r) implies inv210(fkm32(s,r1,r2,r3),p,q,r) .
close

open INV .
  :id(nslpk)
    op p : -> Prin .
    op q : -> Prin .
    op r : -> Rand .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Nonce .
	op s : -> Sys .
	eq (r3 \in cnonce(nw(s))) = true .
  	eq (n(p,q,r) = r3) = false .
	red inv210(s,p,q,r) implies inv210(fkm32(s,r1,r2,r3),p,q,r) .
close

open INV .
  :id(nslpk)
    op p : -> Prin .
    op q : -> Prin .
    op r : -> Rand .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Nonce .
	op s : -> Sys .
	eq (r3 \in cnonce(nw(s))) = false .
	red inv210(s,p,q,r) implies inv210(fkm32(s,r1,r2,r3),p,q,r) .
close

--> 7. sdm1(s,r1,r2,r3)
open INV .
  :id(nslpk)
    op p : -> Prin .
    op q : -> Prin .
    op r : -> Rand .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Rand .
	op s : -> Sys .
	eq (r3 \in ur(s)) = true .
	red inv210(s,p,q,r) implies inv210(sdm1(s,r1,r2,r3),p,q,r) .
close

open INV .
  :id(nslpk)
    op p : -> Prin .
    op q : -> Prin .
    op r : -> Rand .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Rand .
	op s : -> Sys .
	eq (r3 \in ur(s)) = false .
  	eq r = r3 .
	red inv210(s,p,q,r) implies inv210(sdm1(s,r1,r2,r3),p,q,r) .
close

open INV .
  :id(nslpk)
    op p : -> Prin .
    op q : -> Prin .
    op r : -> Rand .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Rand .
	op s : -> Sys .
	eq (r3 \in ur(s)) = false .
  	eq (r = r3) = false .
	red inv210(s,p,q,r) implies inv210(sdm1(s,r1,r2,r3),p,q,r) .
close

--> 8. sdm2(s,r1,r2,r3)
open INV .
  :id(nslpk)
    op p : -> Prin .
    op q : -> Prin .
    op r : -> Rand .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op s : -> Sys .
  	eq r3 \in nw(s) = true .
  	eq m1?(r3) = true .
  	eq receiver(r3) = r1 .
  	eq key(cipher1(r3)) = r1 .
  	eq principal(cipher1(r3)) = sender(r3) .
  	eq r2 \in ur(s) = true .
	red inv210(s,p,q,r) implies inv210(sdm2(s,r1,r2,r3),p,q,r) .
close

open INV .
  :id(nslpk)
    op p : -> Prin .
    op q : -> Prin .
    op r : -> Rand .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op s : -> Sys .
  	eq r3 \in nw(s) = true .
  	eq m1?(r3) = true .
  	eq receiver(r3) = r1 .
  	eq key(cipher1(r3)) = r1 .
  	eq principal(cipher1(r3)) = sender(r3) .
  	eq r2 \in ur(s) = false .
  	eq r = r2 .
	red inv210(s,p,q,r) implies inv210(sdm2(s,r1,r2,r3),p,q,r) .
close

open INV .
  :id(nslpk)
    op p : -> Prin .
    op q : -> Prin .
    op r : -> Rand .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op s : -> Sys .
  	eq r3 \in nw(s) = true .
  	eq m1?(r3) = true .
  	eq receiver(r3) = r1 .
  	eq key(cipher1(r3)) = r1 .
  	eq principal(cipher1(r3)) = sender(r3) .
  	eq r2 \in ur(s) = false .
  	eq (r = r2) = false .
  	eq sender(r3) = intruder .
  	eq n(p,q,r) = nonce(cipher1(r3)) .
  	eq r1 = intruder .
	red inv210(s,p,q,r) implies inv210(sdm2(s,r1,r2,r3),p,q,r) .
close

open INV .
  :id(nslpk)
    op p : -> Prin .
    op q : -> Prin .
    op r : -> Rand .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op s : -> Sys .
  	eq r3 \in nw(s) = true .
  	eq m1?(r3) = true .
  	eq receiver(r3) = r1 .
  	eq key(cipher1(r3)) = r1 .
  	eq principal(cipher1(r3)) = sender(r3) .
  	eq r2 \in ur(s) = false .
  	eq (r = r2) = false .
  	eq sender(r3) = intruder .
  	eq n(p,q,r) = nonce(cipher1(r3)) .
  	eq (r1 = intruder) = false .
  	eq nonce(cipher1(r3)) \in cnonce(nw(s)) = true .
	red inv210(s,p,q,r) implies inv210(sdm2(s,r1,r2,r3),p,q,r) .
close

open INV .
  :id(nslpk)
    op p : -> Prin .
    op q : -> Prin .
    op r : -> Rand .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op s : -> Sys .
  	eq r3 \in nw(s) = true .
  	eq m1?(r3) = true .
  	eq receiver(r3) = r1 .
  	eq key(cipher1(r3)) = r1 .
  	eq principal(cipher1(r3)) = sender(r3) .
  	eq r2 \in ur(s) = false .
  	eq (r = r2) = false .
  	eq sender(r3) = intruder .
  	eq n(p,q,r) = nonce(cipher1(r3)) .
  	eq (r1 = intruder) = false .
  	eq nonce(cipher1(r3)) \in cnonce(nw(s)) = false .
	red inv140(s,cipher1(r3)) implies inv210(s,p,q,r) implies inv210(sdm2(s,r1,r2,r3),p,q,r) .
close

open INV .
  :id(nslpk)
    op p : -> Prin .
    op q : -> Prin .
    op r : -> Rand .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op s : -> Sys .
  	eq r3 \in nw(s) = true .
  	eq m1?(r3) = true .
  	eq receiver(r3) = r1 .
  	eq key(cipher1(r3)) = r1 .
  	eq principal(cipher1(r3)) = sender(r3) .
  	eq r2 \in ur(s) = false .
  	eq (r = r2) = false .
  	eq sender(r3) = intruder .
  	eq (n(p,q,r) = nonce(cipher1(r3))) = false .
	red inv210(s,p,q,r) implies inv210(sdm2(s,r1,r2,r3),p,q,r) .
close

open INV .
  :id(nslpk)
    op p : -> Prin .
    op q : -> Prin .
    op r : -> Rand .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op s : -> Sys .
  	eq r3 \in nw(s) = true .
  	eq m1?(r3) = true .
  	eq receiver(r3) = r1 .
  	eq key(cipher1(r3)) = r1 .
  	eq principal(cipher1(r3)) = sender(r3) .
  	eq r2 \in ur(s) = false .
  	eq (r = r2) = false .
  	eq (sender(r3) = intruder) = false .
	red inv210(s,p,q,r) implies inv210(sdm2(s,r1,r2,r3),p,q,r) .
close

open INV .
  :id(nslpk)
    op p : -> Prin .
    op q : -> Prin .
    op r : -> Rand .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op s : -> Sys .
  	eq r3 \in nw(s) = true .
  	eq m1?(r3) = true .
  	eq receiver(r3) = r1 .
  	eq key(cipher1(r3)) = r1 .
  	eq (principal(cipher1(r3)) = sender(r3)) = false .
	red inv210(s,p,q,r) implies inv210(sdm2(s,r1,r2,r3),p,q,r) .
close

open INV .
  :id(nslpk)
    op p : -> Prin .
    op q : -> Prin .
    op r : -> Rand .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op s : -> Sys .
  	eq r3 \in nw(s) = true .
  	eq m1?(r3) = true .
  	eq receiver(r3) = r1 .
  	eq (key(cipher1(r3)) = r1) = false .
	red inv210(s,p,q,r) implies inv210(sdm2(s,r1,r2,r3),p,q,r) .
close

open INV .
  :id(nslpk)
    op p : -> Prin .
    op q : -> Prin .
    op r : -> Rand .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op s : -> Sys .
  	eq r3 \in nw(s) = true .
  	eq m1?(r3) = true .
  	eq (receiver(r3) = r1) = false .
	red inv210(s,p,q,r) implies inv210(sdm2(s,r1,r2,r3),p,q,r) .
close

open INV .
  :id(nslpk)
    op p : -> Prin .
    op q : -> Prin .
    op r : -> Rand .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op s : -> Sys .
  	eq r3 \in nw(s) = true .
  	eq m1?(r3) = false .
	red inv210(s,p,q,r) implies inv210(sdm2(s,r1,r2,r3),p,q,r) .
close

open INV .
  :id(nslpk)
    op p : -> Prin .
    op q : -> Prin .
    op r : -> Rand .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op s : -> Sys .
  	eq r3 \in nw(s) = false .
	red inv210(s,p,q,r) implies inv210(sdm2(s,r1,r2,r3),p,q,r) .
close

--> 9. sdm3(s,r1,r2,r3,r4)
open INV .
  :id(nslpk)
  	op p : -> Prin .
  	op q : -> Prin .
  	op r : -> Rand .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
  	eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
  	eq sender(r3) = r1 .
  	eq receiver(r3) = sender(r4) .
  	eq key(cipher1(r3)) = sender(r4) .
	eq nonce(cipher1(r3)) = n(r1,sender(r4),r2) .
	eq principal(cipher1(r3)) = r1 .
  	eq receiver(r4) = r1 .
	eq key(cipher2(r4)) = r1 .
  	eq nonce1(cipher2(r4)) = n(r1,sender(r4),r2) .
	eq principal(cipher2(r4)) = sender(r4) .

  	eq sender(r4) = intruder .
  	eq n(p,q,r) = nonce2(cipher2(r4)) .
  	eq r1 = intruder .
	red inv210(s,p,q,r) implies inv210(sdm3(s,r1,r2,r3,r4),p,q,r) .
close

open INV .
  :id(nslpk)
  	op p : -> Prin .
  	op q : -> Prin .
  	op r : -> Rand .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
  	eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
  	eq sender(r3) = r1 .
  	eq receiver(r3) = sender(r4) .
  	eq key(cipher1(r3)) = sender(r4) .
	eq nonce(cipher1(r3)) = n(r1,sender(r4),r2) .
	eq principal(cipher1(r3)) = r1 .
  	eq receiver(r4) = r1 .
	eq key(cipher2(r4)) = r1 .
  	eq nonce1(cipher2(r4)) = n(r1,sender(r4),r2) .
	eq principal(cipher2(r4)) = sender(r4) .

  	eq sender(r4) = intruder .
  	eq n(p,q,r) = nonce2(cipher2(r4)) .
  	eq (r1 = intruder) = false .
  	eq nonce2(cipher2(r4)) \in cnonce(nw(s)) = true .
	red inv210(s,p,q,r) implies inv210(sdm3(s,r1,r2,r3,r4),p,q,r) .
close

open INV .
  :id(nslpk)
  	op p : -> Prin .
  	op q : -> Prin .
  	op r : -> Rand .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
  	eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
  	eq sender(r3) = r1 .
  	eq receiver(r3) = sender(r4) .
  	eq key(cipher1(r3)) = sender(r4) .
	eq nonce(cipher1(r3)) = n(r1,sender(r4),r2) .
	eq principal(cipher1(r3)) = r1 .
  	eq receiver(r4) = r1 .
	eq key(cipher2(r4)) = r1 .
  	eq nonce1(cipher2(r4)) = n(r1,sender(r4),r2) .
	eq principal(cipher2(r4)) = sender(r4) .

  	eq sender(r4) = intruder .
  	eq n(p,q,r) = nonce2(cipher2(r4)) .
  	eq (r1 = intruder) = false .
  	eq nonce2(cipher2(r4)) \in cnonce(nw(s)) = false .
	red inv150(s,cipher2(r4)) implies inv210(s,p,q,r) implies inv210(sdm3(s,r1,r2,r3,r4),p,q,r) .
close

open INV .
  :id(nslpk)
  	op p : -> Prin .
  	op q : -> Prin .
  	op r : -> Rand .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
  	eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
  	eq sender(r3) = r1 .
  	eq receiver(r3) = sender(r4) .
  	eq key(cipher1(r3)) = sender(r4) .
	eq nonce(cipher1(r3)) = n(r1,sender(r4),r2) .
	eq principal(cipher1(r3)) = r1 .
  	eq receiver(r4) = r1 .
	eq key(cipher2(r4)) = r1 .
  	eq nonce1(cipher2(r4)) = n(r1,sender(r4),r2) .
	eq principal(cipher2(r4)) = sender(r4) .

  	eq sender(r4) = intruder .
  	eq (n(p,q,r) = nonce2(cipher2(r4))) = false .
	red inv210(s,p,q,r) implies inv210(sdm3(s,r1,r2,r3,r4),p,q,r) .
close

open INV .
  :id(nslpk)
  	op p : -> Prin .
  	op q : -> Prin .
  	op r : -> Rand .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
  	eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
  	eq sender(r3) = r1 .
  	eq receiver(r3) = sender(r4) .
  	eq key(cipher1(r3)) = sender(r4) .
	eq nonce(cipher1(r3)) = n(r1,sender(r4),r2) .
	eq principal(cipher1(r3)) = r1 .
  	eq receiver(r4) = r1 .
	eq key(cipher2(r4)) = r1 .
  	eq nonce1(cipher2(r4)) = n(r1,sender(r4),r2) .
	eq principal(cipher2(r4)) = sender(r4) .

  	eq (sender(r4) = intruder) = false .
	red inv210(s,p,q,r) implies inv210(sdm3(s,r1,r2,r3,r4),p,q,r) .
close

open INV .
  :id(nslpk)
    op p : -> Prin .
    op q : -> Prin .
    op r : -> Rand .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
    eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
    eq sender(r3) = r1 .
    eq receiver(r3) = sender(r4) .
    eq key(cipher1(r3)) = sender(r4) .
	eq nonce(cipher1(r3)) = n(r1,sender(r4),r2) .
	eq principal(cipher1(r3)) = r1 .
  	eq receiver(r4) = r1 .
	eq key(cipher2(r4)) = r1 .
  	eq nonce1(cipher2(r4)) = n(r1,sender(r4),r2) .
	eq (principal(cipher2(r4)) = sender(r4)) = false .
	red inv210(s,p,q,r) implies inv210(sdm3(s,r1,r2,r3,r4),p,q,r) .
close

open INV .
  :id(nslpk)
    op p : -> Prin .
    op q : -> Prin .
    op r : -> Rand .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
    eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
    eq sender(r3) = r1 .
    eq receiver(r3) = sender(r4) .
    eq key(cipher1(r3)) = sender(r4) .
	eq nonce(cipher1(r3)) = n(r1,sender(r4),r2) .
	eq principal(cipher1(r3)) = r1 .
  	eq receiver(r4) = r1 .
	eq key(cipher2(r4)) = r1 .
  	eq (nonce1(cipher2(r4)) = n(r1,sender(r4),r2)) = false .
	red inv210(s,p,q,r) implies inv210(sdm3(s,r1,r2,r3,r4),p,q,r) .
close

open INV .
  :id(nslpk)
    op p : -> Prin .
    op q : -> Prin .
    op r : -> Rand .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
    eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
    eq sender(r3) = r1 .
    eq receiver(r3) = sender(r4) .
    eq key(cipher1(r3)) = sender(r4) .
	eq nonce(cipher1(r3)) = n(r1,sender(r4),r2) .
	eq principal(cipher1(r3)) = r1 .
  	eq receiver(r4) = r1 .
	eq (key(cipher2(r4)) = r1) = false .
	red inv210(s,p,q,r) implies inv210(sdm3(s,r1,r2,r3,r4),p,q,r) .
close

open INV .
  :id(nslpk)
    op p : -> Prin .
    op q : -> Prin .
    op r : -> Rand .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
    eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
    eq sender(r3) = r1 .
    eq receiver(r3) = sender(r4) .
    eq key(cipher1(r3)) = sender(r4) .
	eq nonce(cipher1(r3)) = n(r1,sender(r4),r2) .
	eq principal(cipher1(r3)) = r1 .
  	eq (receiver(r4) = r1) = false .
	red inv210(s,p,q,r) implies inv210(sdm3(s,r1,r2,r3,r4),p,q,r) .
close

open INV .
  :id(nslpk)
    op p : -> Prin .
    op q : -> Prin .
    op r : -> Rand .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
    eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
    eq sender(r3) = r1 .
    eq receiver(r3) = sender(r4) .
    eq key(cipher1(r3)) = sender(r4) .
	eq nonce(cipher1(r3)) = n(r1,sender(r4),r2) .
	eq (principal(cipher1(r3)) = r1) = false .
	red inv210(s,p,q,r) implies inv210(sdm3(s,r1,r2,r3,r4),p,q,r) .
close

open INV .
  :id(nslpk)
    op p : -> Prin .
    op q : -> Prin .
    op r : -> Rand .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
    eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
    eq sender(r3) = r1 .
    eq receiver(r3) = sender(r4) .
    eq key(cipher1(r3)) = sender(r4) .
	eq (nonce(cipher1(r3)) = n(r1,sender(r4),r2)) = false .
	red inv210(s,p,q,r) implies inv210(sdm3(s,r1,r2,r3,r4),p,q,r) .
close

open INV .
  :id(nslpk)
    op p : -> Prin .
    op q : -> Prin .
    op r : -> Rand .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
	eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
    eq sender(r3) = r1 .
    eq receiver(r3) = sender(r4) .
    eq (key(cipher1(r3)) = sender(r4)) = false .
	red inv210(s,p,q,r) implies inv210(sdm3(s,r1,r2,r3,r4),p,q,r) .
close

open INV .
  :id(nslpk)
    op p : -> Prin .
    op q : -> Prin .
    op r : -> Rand .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
	eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
  	eq sender(r3) = r1 .
  	eq (receiver(r3) = sender(r4)) = false .
	red inv210(s,p,q,r) implies inv210(sdm3(s,r1,r2,r3,r4),p,q,r) .
close

open INV .
  :id(nslpk)
    op p : -> Prin .
    op q : -> Prin .
    op r : -> Rand .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
	eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
  	eq (sender(r3) = r1) = false .
	red inv210(s,p,q,r) implies inv210(sdm3(s,r1,r2,r3,r4),p,q,r) .
close

open INV .
  :id(nslpk)
  	op p : -> Prin .
  	op q : -> Prin .
  	op r : -> Rand .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
	eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq (creator(r3) = r1) = false .
	red inv210(s,p,q,r) implies inv210(sdm3(s,r1,r2,r3,r4),p,q,r) .
close

open INV .
  :id(nslpk)	
  	op p : -> Prin .
  	op q : -> Prin .
  	op r : -> Rand .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
	eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = false .
	red inv210(s,p,q,r) implies inv210(sdm3(s,r1,r2,r3,r4),p,q,r) .
close

open INV .
  :id(nslpk)
  	op p : -> Prin .
  	op q : -> Prin .
  	op r : -> Rand .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
	eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = false .
	red inv210(s,p,q,r) implies inv210(sdm3(s,r1,r2,r3,r4),p,q,r) .
close

open INV .
  :id(nslpk)	
  	op p : -> Prin .
  	op q : -> Prin .
  	op r : -> Rand .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
	eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = false .
	red inv210(s,p,q,r) implies inv210(sdm3(s,r1,r2,r3,r4),p,q,r) .
close

open INV .
  :id(nslpk)	
  	op p : -> Prin .
  	op q : -> Prin .
  	op r : -> Rand .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
	eq (r3 \in nw(s)) = false .
	red inv210(s,p,q,r) implies inv210(sdm3(s,r1,r2,r3,r4),p,q,r) .
close

--> I) Base case
--> init
open INV .
  :id(nslpk)
	op p : -> Prin .
    op q : -> Prin .
    op r : -> Rand .
	op n : -> Nonce .
  	red inv220(init,p,q,r,n) .
close

--> II) Induction cases
--> 1. fkm11(s,r1,r2,r3)
open INV .
  :id(nslpk)
    op p : -> Prin .
    op q : -> Prin .
    op r : -> Rand .
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Prin .

	op r3 : -> Cipher1 .
	op s : -> Sys .
	eq (r3 \in cenc1(nw(s))) = true .
    eq p = intruder .
	red inv220(s,p,q,r,n) implies inv220(fkm11(s,r1,r2,r3),p,q,r,n) .
close

open INV .
  :id(nslpk)
    op p : -> Prin .
    op q : -> Prin .
    op r : -> Rand .
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Cipher1 .
	op s : -> Sys .
	eq (r3 \in cenc1(nw(s))) = true .
    eq (p = intruder) = false .
	red inv220(s,p,q,r,n) implies inv220(fkm11(s,r1,r2,r3),p,q,r,n) .
close

open INV .
  :id(nslpk)
	op p : -> Prin .
    op q : -> Prin .
    op r : -> Rand .
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Cipher1 .
	op s : -> Sys .
	eq (r3 \in cenc1(nw(s))) = false .
	red inv220(s,p,q,r,n) implies inv220(fkm11(s,r1,r2,r3),p,q,r,n) .
close

--> 2. fkm12(s,r1,r2,r3)
open INV .
  :id(nslpk)
	op p : -> Prin .
    op q : -> Prin .
    op r : -> Rand .
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Nonce .
	op s : -> Sys .
	eq (r3 \in cnonce(nw(s))) = true .
    eq p = intruder .
	red inv220(s,p,q,r,n) implies inv220(fkm12(s,r1,r2,r3),p,q,r,n) .
close

open INV .
  :id(nslpk)
	op p : -> Prin .
    op q : -> Prin .
    op r : -> Rand .
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Nonce .
	op s : -> Sys .
	eq (r3 \in cnonce(nw(s))) = true .
    eq (p = intruder) = false .
	red inv220(s,p,q,r,n) implies inv220(fkm12(s,r1,r2,r3),p,q,r,n) .
close

open INV .
  :id(nslpk)
	op p : -> Prin .
    op q : -> Prin .
    op r : -> Rand .
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Nonce .
	op s : -> Sys .
	eq (r3 \in cnonce(nw(s))) = false .
	red inv220(s,p,q,r,n) implies inv220(fkm12(s,r1,r2,r3),p,q,r,n) .
close

--> 3. fkm21(s,r1,r2,r3)
open INV .
  :id(nslpk)
	op p : -> Prin .
    op q : -> Prin .
    op r : -> Rand .
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Cipher2 .
	op s : -> Sys .
	eq (r3 \in cenc2(nw(s))) = true .
    eq enc2(p,n(p,q,r),n,q) = r3 .
    eq p = intruder .
	red inv220(s,p,q,r,n) implies inv220(fkm21(s,r1,r2,r3),p,q,r,n) .
close

open INV .
  :id(nslpk)
	op p : -> Prin .
    op q : -> Prin .
    op r : -> Rand .
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Cipher2 .
	op s : -> Sys .
	eq (r3 \in cenc2(nw(s))) = true .
    eq enc2(p,n(p,q,r),n,q) = r3 .
    eq (p = intruder) = false .
	red inv220(s,p,q,r,n) implies inv220(fkm21(s,r1,r2,r3),p,q,r,n) .
close

open INV .
  :id(nslpk)
	op p : -> Prin .
    op q : -> Prin .
    op r : -> Rand .
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Cipher2 .
	op s : -> Sys .
	eq (r3 \in cenc2(nw(s))) = true .
    eq (enc2(p,n(p,q,r),n,q) = r3) = false .
	red inv220(s,p,q,r,n) implies inv220(fkm21(s,r1,r2,r3),p,q,r,n) .
close

open INV .
  :id(nslpk)
	op p : -> Prin .
    op q : -> Prin .
    op r : -> Rand .
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Cipher2 .
	op s : -> Sys .
	eq (r3 \in cenc2(nw(s))) = false .
	red inv220(s,p,q,r,n) implies inv220(fkm21(s,r1,r2,r3),p,q,r,n) .
close

--> 4. fkm22(s,r1,r2,r3,r4)
open INV .
  :id(nslpk)
	op p : -> Prin .
    op q : -> Prin .
    op r : -> Rand .
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Nonce .
	op r4 : -> Nonce .
	op s : -> Sys .
	eq (r3 \in cnonce(nw(s))) = true .
	eq (r4 \in cnonce(nw(s))) = true .
    eq p = intruder .
    eq r \in ur(s) = true .
  	red inv220(s,p,q,r,n) implies inv220(fkm22(s,r1,r2,r3,r4),p,q,r,n) .
close

open INV .
  :id(nslpk)
	op p : -> Prin .
    op q : -> Prin .
    op r : -> Rand .
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Nonce .
	op r4 : -> Nonce .
	op s : -> Sys .
	eq (r3 \in cnonce(nw(s))) = true .
	eq (r4 \in cnonce(nw(s))) = true .
    eq p = intruder .
    eq r \in ur(s) = false .
  	red inv220(s,p,q,r,n) implies inv220(fkm22(s,r1,r2,r3,r4),p,q,r,n) .
close

open INV .
  :id(nslpk)
	op p : -> Prin .
    op q : -> Prin .
    op r : -> Rand .
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Nonce .
	op r4 : -> Nonce .
	op s : -> Sys .
	eq (r3 \in cnonce(nw(s))) = true .
	eq (r4 \in cnonce(nw(s))) = true .
    eq (p = intruder) = false .
	eq r3 = n(p,q,r) .
	eq n(p,q,r) \in cnonce(nw(s)) = true .
	eq r1 = q .
	eq q = intruder .
	eq n(p,intruder,r) \in cnonce(nw(s)) = true .
	eq r2 = p .
	eq n = r4 .
  	red inv220(s,p,q,r,n) implies inv220(fkm22(s,r1,r2,r3,r4),p,q,r,n) .
close

open INV .
  :id(nslpk)
	op p : -> Prin .
    op q : -> Prin .
    op r : -> Rand .
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Nonce .
	op r4 : -> Nonce .
	op s : -> Sys .
	eq (r3 \in cnonce(nw(s))) = true .
	eq (r4 \in cnonce(nw(s))) = true .
    eq (p = intruder) = false .
	eq r3 = n(p,q,r) .
	eq n(p,q,r) \in cnonce(nw(s)) = true .
	eq r1 = q .
	eq q = intruder .
	eq n(p,intruder,r) \in cnonce(nw(s)) = true .
	eq r2 = p .
	eq (n = r4) = false .
  	red inv220(s,p,q,r,n) implies inv220(fkm22(s,r1,r2,r3,r4),p,q,r,n) .
close

open INV .
  :id(nslpk)
	op p : -> Prin .
    op q : -> Prin .
    op r : -> Rand .
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Nonce .
	op r4 : -> Nonce .
	op s : -> Sys .
	eq (r3 \in cnonce(nw(s))) = true .
	eq (r4 \in cnonce(nw(s))) = true .
    eq (p = intruder) = false .
	eq r3 = n(p,q,r) .
	eq n(p,q,r) \in cnonce(nw(s)) = true .
	eq r1 = q .
	eq q = intruder .
	eq n(p,intruder,r) \in cnonce(nw(s)) = true .
	eq (r2 = p) = false .
  	red inv220(s,p,q,r,n) implies inv220(fkm22(s,r1,r2,r3,r4),p,q,r,n) .
close

open INV .
  :id(nslpk)
	op p : -> Prin .
    op q : -> Prin .
    op r : -> Rand .
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Nonce .
	op r4 : -> Nonce .
	op s : -> Sys .
	eq (r3 \in cnonce(nw(s))) = true .
	eq (r4 \in cnonce(nw(s))) = true .
    eq (p = intruder) = false .
	eq r3 = n(p,q,r) .
	eq n(p,q,r) \in cnonce(nw(s)) = true .
	eq r1 = q .
	eq q = intruder .
	eq n(p,intruder,r) \in cnonce(nw(s)) = false .
  	red inv220(s,p,q,r,n) implies inv220(fkm22(s,r1,r2,r3,r4),p,q,r,n) .
close

open INV .
  :id(nslpk)
	op p : -> Prin .
    op q : -> Prin .
    op r : -> Rand .
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Nonce .
	op r4 : -> Nonce .
	op s : -> Sys .
	eq (r3 \in cnonce(nw(s))) = true .
	eq (r4 \in cnonce(nw(s))) = true .
    eq (p = intruder) = false .
	eq r3 = n(p,q,r) .
	eq n(p,q,r) \in cnonce(nw(s)) = true .
	eq r1 = q .
	eq (q = intruder) = false .
  	red inv130(s,r3) implies inv220(s,p,q,r,n) implies inv220(fkm22(s,r1,r2,r3,r4),p,q,r,n) .
close

open INV .
  :id(nslpk)
	op p : -> Prin .
    op q : -> Prin .
    op r : -> Rand .
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Nonce .
	op r4 : -> Nonce .
	op s : -> Sys .
	eq (r3 \in cnonce(nw(s))) = true .
	eq (r4 \in cnonce(nw(s))) = true .
    eq (p = intruder) = false .
	eq r3 = n(p,q,r) .
	eq n(p,q,r) \in cnonce(nw(s)) = true .
	eq (r1 = q) = false .
  	red inv220(s,p,q,r,n) implies inv220(fkm22(s,r1,r2,r3,r4),p,q,r,n) .
close

open INV .
  :id(nslpk)
	op p : -> Prin .
    op q : -> Prin .
    op r : -> Rand .
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Nonce .
	op r4 : -> Nonce .
	op s : -> Sys .
	eq (r3 \in cnonce(nw(s))) = true .
	eq (r4 \in cnonce(nw(s))) = true .
    eq (p = intruder) = false .
	eq r3 = n(p,q,r) .
	eq n(p,q,r) \in cnonce(nw(s)) = false .
  	red inv220(s,p,q,r,n) implies inv220(fkm22(s,r1,r2,r3,r4),p,q,r,n) .
close

open INV .
  :id(nslpk)
	op p : -> Prin .
    op q : -> Prin .
    op r : -> Rand .
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Nonce .
	op r4 : -> Nonce .
	op s : -> Sys .
	eq (r3 \in cnonce(nw(s))) = true .
	eq (r4 \in cnonce(nw(s))) = true .
    eq (p = intruder) = false .
	eq (r3 = n(p,q,r)) = false .
  	red inv130(s,r3) implies inv220(s,p,q,r,n) implies inv220(fkm22(s,r1,r2,r3,r4),p,q,r,n) .
close

open INV .
  :id(nslpk)
	op p : -> Prin .
    op q : -> Prin .
    op r : -> Rand .
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Nonce .
	op r4 : -> Nonce .
	op s : -> Sys .
	eq (r3 \in cnonce(nw(s))) = true .
	eq (r4 \in cnonce(nw(s))) = false .
	red inv220(s,p,q,r,n) implies inv220(fkm22(s,r1,r2,r3,r4),p,q,r,n) .
close

open INV .
  :id(nslpk)
	op p : -> Prin .
    op q : -> Prin .
    op r : -> Rand .
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Nonce .
	op r4 : -> Nonce .
	op s : -> Sys .
	eq (r3 \in cnonce(nw(s))) = false .
	red inv220(s,p,q,r,n) implies inv220(fkm22(s,r1,r2,r3,r4),p,q,r,n) .
close

--> 5. fkm31(s,r1,r2,r3)
open INV .
  :id(nslpk)
	op p : -> Prin .
    op q : -> Prin .
    op r : -> Rand .
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Cipher3 .
	op s : -> Sys .
	eq (r3 \in cenc3(nw(s))) = true .
	red inv220(s,p,q,r,n) implies inv220(fkm31(s,r1,r2,r3),p,q,r,n) .
close

open INV .
  :id(nslpk)
	op p : -> Prin .
    op q : -> Prin .
    op r : -> Rand .
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Cipher3 .
	op s : -> Sys .
	eq (r3 \in cenc3(nw(s))) = false .
	red inv220(s,p,q,r,n) implies inv220(fkm31(s,r1,r2,r3),p,q,r,n) .
close

--> 6. fkm32(s,r1,r2,r3)
open INV .
  :id(nslpk)
	op p : -> Prin .
    op q : -> Prin .
    op r : -> Rand .
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Nonce .
	op s : -> Sys .
	eq (r3 \in cnonce(nw(s))) = true .
	red inv220(s,p,q,r,n) implies inv220(fkm32(s,r1,r2,r3),p,q,r,n) .
close

open INV .
  :id(nslpk)
	op p : -> Prin .
    op q : -> Prin .
    op r : -> Rand .
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Nonce .
	op s : -> Sys .
	eq (r3 \in cnonce(nw(s))) = false .
	red inv220(s,p,q,r,n) implies inv220(fkm32(s,r1,r2,r3),p,q,r,n) .
close

--> 7. sdm1(s,r1,r2,r3)
open INV .
  :id(nslpk)
	op p : -> Prin .
    op q : -> Prin .
    op r : -> Rand .
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Rand .
	op s : -> Sys .
	eq (r3 \in ur(s)) = true .
	red inv220(s,p,q,r,n) implies inv220(sdm1(s,r1,r2,r3),p,q,r,n) .
close

open INV .
  :id(nslpk)
	op p : -> Prin .
    op q : -> Prin .
    op r : -> Rand .
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Rand .
	op s : -> Sys .
	eq (r3 \in ur(s)) = false .
    eq p = intruder .
	red inv220(s,p,q,r,n) implies inv220(sdm1(s,r1,r2,r3),p,q,r,n) .
close

open INV .
  :id(nslpk)
	op p : -> Prin .
    op q : -> Prin .
    op r : -> Rand .
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Rand .
	op s : -> Sys .
	eq (r3 \in ur(s)) = false .
    eq (p = intruder) = false .
    eq r = r3 .
    eq r2 = q .
    eq r1 = p .
    eq enc2(p,n(p,q,r3),n,q) \in cenc2(nw(s)) = true .
	red inv190(s,p,q,r,n) implies inv220(s,p,q,r,n) implies inv220(sdm1(s,r1,r2,r3),p,q,r,n) .
close

open INV .
  :id(nslpk)
	op p : -> Prin .
    op q : -> Prin .
    op r : -> Rand .
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Rand .
	op s : -> Sys .
	eq (r3 \in ur(s)) = false .
    eq (p = intruder) = false .
    eq r = r3 .
    eq r2 = q .
    eq r1 = p .
    eq enc2(p,n(p,q,r3),n,q) \in cenc2(nw(s)) = false .
	red inv220(s,p,q,r,n) implies inv220(sdm1(s,r1,r2,r3),p,q,r,n) .
close

open INV .
  :id(nslpk)
	op p : -> Prin .
    op q : -> Prin .
    op r : -> Rand .
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Rand .
	op s : -> Sys .
	eq (r3 \in ur(s)) = false .
    eq (p = intruder) = false .
    eq r = r3 .
    eq r2 = q .
    eq (r1 = p) = false .
	red inv220(s,p,q,r,n) implies inv220(sdm1(s,r1,r2,r3),p,q,r,n) .
close

open INV .
  :id(nslpk)
	op p : -> Prin .
    op q : -> Prin .
    op r : -> Rand .
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Rand .
	op s : -> Sys .
	eq (r3 \in ur(s)) = false .
    eq (p = intruder) = false .
    eq r = r3 .
    eq (r2 = q) = false .
	red inv220(s,p,q,r,n) implies inv220(sdm1(s,r1,r2,r3),p,q,r,n) .
close

open INV .
  :id(nslpk)
	op p : -> Prin .
    op q : -> Prin .
    op r : -> Rand .
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Rand .
	op s : -> Sys .
	eq (r3 \in ur(s)) = false .
    eq (p = intruder) = false .
    eq (r = r3) = false .
	red inv220(s,p,q,r,n) implies inv220(sdm1(s,r1,r2,r3),p,q,r,n) .
close

--> 8. sdm2(s,r1,r2,r3)
open INV .
  :id(nslpk)
	op p : -> Prin .
    op q : -> Prin .
    op r : -> Rand .
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op s : -> Sys .
  	eq r3 \in nw(s) = true .
  	eq m1?(r3) = true .
  	eq receiver(r3) = r1 .
  	eq key(cipher1(r3)) = r1 .
  	eq principal(cipher1(r3)) = sender(r3) .
  	eq r2 \in ur(s) = true .
	red inv220(s,p,q,r,n) implies inv220(sdm2(s,r1,r2,r3),p,q,r,n) .
close

open INV .
  :id(nslpk)
	op p : -> Prin .
    op q : -> Prin .
    op r : -> Rand .
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op s : -> Sys .
  	eq r3 \in nw(s) = true .
  	eq m1?(r3) = true .
  	eq receiver(r3) = r1 .
  	eq key(cipher1(r3)) = r1 .
  	eq principal(cipher1(r3)) = sender(r3) .
  	eq r2 \in ur(s) = false .
  	eq nonce(cipher1(r3)) = n(p,q,r) .
  	eq p = sender(r3) .
  	eq n = n(r1,sender(r3),r2) .
  	eq q = r1 .
	red inv220(s,p,q,r,n) implies inv220(sdm2(s,r1,r2,r3),p,q,r,n) .
close

open INV .
  :id(nslpk)
	op p : -> Prin .
    op q : -> Prin .
    op r : -> Rand .
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op s : -> Sys .
  	eq r3 \in nw(s) = true .
  	eq m1?(r3) = true .
  	eq receiver(r3) = r1 .
  	eq key(cipher1(r3)) = r1 .
  	eq principal(cipher1(r3)) = sender(r3) .
  	eq r2 \in ur(s) = false .
  	eq nonce(cipher1(r3)) = n(p,q,r) .
  	eq p = sender(r3) .
  	eq n = n(r1,sender(r3),r2) .
  	eq (q = r1) = false .
	red inv220(s,p,q,r,n) implies inv220(sdm2(s,r1,r2,r3),p,q,r,n) .
close

open INV .
  :id(nslpk)
	op p : -> Prin .
    op q : -> Prin .
    op r : -> Rand .
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op s : -> Sys .
  	eq r3 \in nw(s) = true .
  	eq m1?(r3) = true .
  	eq receiver(r3) = r1 .
  	eq key(cipher1(r3)) = r1 .
  	eq principal(cipher1(r3)) = sender(r3) .
  	eq r2 \in ur(s) = false .
  	eq nonce(cipher1(r3)) = n(p,q,r) .
  	eq p = sender(r3) .
  	eq (n = n(r1,sender(r3),r2)) = false .
	red inv220(s,p,q,r,n) implies inv220(sdm2(s,r1,r2,r3),p,q,r,n) .
close

open INV .
  :id(nslpk)
	op p : -> Prin .
    op q : -> Prin .
    op r : -> Rand .
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op s : -> Sys .
  	eq r3 \in nw(s) = true .
  	eq m1?(r3) = true .
  	eq receiver(r3) = r1 .
  	eq key(cipher1(r3)) = r1 .
  	eq principal(cipher1(r3)) = sender(r3) .
  	eq r2 \in ur(s) = false .
  	eq nonce(cipher1(r3)) = n(p,q,r) .
  	eq (p = sender(r3)) = false .
	red inv220(s,p,q,r,n) implies inv220(sdm2(s,r1,r2,r3),p,q,r,n) .
close

open INV .
  :id(nslpk)
	op p : -> Prin .
    op q : -> Prin .
    op r : -> Rand .
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op s : -> Sys .
  	eq r3 \in nw(s) = true .
  	eq m1?(r3) = true .
  	eq receiver(r3) = r1 .
  	eq key(cipher1(r3)) = r1 .
  	eq principal(cipher1(r3)) = sender(r3) .
  	eq r2 \in ur(s) = false .
  	eq (nonce(cipher1(r3)) = n(p,q,r)) = false .
	red inv220(s,p,q,r,n) implies inv220(sdm2(s,r1,r2,r3),p,q,r,n) .
close

open INV .
  :id(nslpk)
	op p : -> Prin .
    op q : -> Prin .
    op r : -> Rand .
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op s : -> Sys .
  	eq r3 \in nw(s) = true .
  	eq m1?(r3) = true .
  	eq receiver(r3) = r1 .
  	eq key(cipher1(r3)) = r1 .
  	eq (principal(cipher1(r3)) = sender(r3)) = false .
	red inv220(s,p,q,r,n) implies inv220(sdm2(s,r1,r2,r3),p,q,r,n) .
close

open INV .
  :id(nslpk)
	op p : -> Prin .
    op q : -> Prin .
    op r : -> Rand .
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op s : -> Sys .
  	eq r3 \in nw(s) = true .
  	eq m1?(r3) = true .
  	eq receiver(r3) = r1 .
  	eq (key(cipher1(r3)) = r1) = false .
	red inv220(s,p,q,r,n) implies inv220(sdm2(s,r1,r2,r3),p,q,r,n) .
close

open INV .
  :id(nslpk)
	op p : -> Prin .
    op q : -> Prin .
    op r : -> Rand .
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op s : -> Sys .
  	eq r3 \in nw(s) = true .
  	eq m1?(r3) = true .
  	eq (receiver(r3) = r1) = false .
	red inv220(s,p,q,r,n) implies inv220(sdm2(s,r1,r2,r3),p,q,r,n) .
close

open INV .
  :id(nslpk)
	op p : -> Prin .
    op q : -> Prin .
    op r : -> Rand .
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op s : -> Sys .
  	eq r3 \in nw(s) = true .
  	eq m1?(r3) = false .
	red inv220(s,p,q,r,n) implies inv220(sdm2(s,r1,r2,r3),p,q,r,n) .
close

open INV .
  :id(nslpk)
	op p : -> Prin .
    op q : -> Prin .
    op r : -> Rand .
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op s : -> Sys .
  	eq r3 \in nw(s) = false .
	red inv220(s,p,q,r,n) implies inv220(sdm2(s,r1,r2,r3),p,q,r,n) .
close

--> 9. sdm3(s,r1,r2,r3,r4)
open INV .
  :id(nslpk)
	op p : -> Prin .
    op q : -> Prin .
    op r : -> Rand .
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
    eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
    eq sender(r3) = r1 .
    eq receiver(r3) = sender(r4) .
    eq key(cipher1(r3)) = sender(r4) .
	eq nonce(cipher1(r3)) = n(r1,sender(r4),r2) .
	eq principal(cipher1(r3)) = r1 .
    eq receiver(r4) = r1 .
	eq key(cipher2(r4)) = r1 .
    eq nonce1(cipher2(r4)) = n(r1,sender(r4),r2) .
	eq principal(cipher2(r4)) = sender(r4) .
	red inv220(s,p,q,r,n) implies inv220(sdm3(s,r1,r2,r3,r4),p,q,r,n) .
close

open INV .
  :id(nslpk)
	op p : -> Prin .
    op q : -> Prin .
    op r : -> Rand .
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
    eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
    eq sender(r3) = r1 .
    eq receiver(r3) = sender(r4) .
    eq key(cipher1(r3)) = sender(r4) .
	eq nonce(cipher1(r3)) = n(r1,sender(r4),r2) .
	eq principal(cipher1(r3)) = r1 .
    eq receiver(r4) = r1 .
	eq key(cipher2(r4)) = r1 .
    eq nonce1(cipher2(r4)) = n(r1,sender(r4),r2) .
	eq (principal(cipher2(r4)) = sender(r4)) = false .
	red inv220(s,p,q,r,n) implies inv220(sdm3(s,r1,r2,r3,r4),p,q,r,n) .
close

open INV .
  :id(nslpk)
	op p : -> Prin .
    op q : -> Prin .
    op r : -> Rand .
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
    eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
    eq sender(r3) = r1 .
    eq receiver(r3) = sender(r4) .
    eq key(cipher1(r3)) = sender(r4) .
	eq nonce(cipher1(r3)) = n(r1,sender(r4),r2) .
	eq principal(cipher1(r3)) = r1 .
    eq receiver(r4) = r1 .
	eq key(cipher2(r4)) = r1 .
    eq (nonce1(cipher2(r4)) = n(r1,sender(r4),r2)) = false .
	red inv220(s,p,q,r,n) implies inv220(sdm3(s,r1,r2,r3,r4),p,q,r,n) .
close

open INV .
  :id(nslpk)
	op p : -> Prin .
    op q : -> Prin .
    op r : -> Rand .
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
    eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
    eq sender(r3) = r1 .
    eq receiver(r3) = sender(r4) .
    eq key(cipher1(r3)) = sender(r4) .
	eq nonce(cipher1(r3)) = n(r1,sender(r4),r2) .
	eq principal(cipher1(r3)) = r1 .
    eq receiver(r4) = r1 .
	eq (key(cipher2(r4)) = r1) = false .
	red inv220(s,p,q,r,n) implies inv220(sdm3(s,r1,r2,r3,r4),p,q,r,n) .
close

open INV .
  :id(nslpk)
	op p : -> Prin .
    op q : -> Prin .
    op r : -> Rand .
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
    eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
    eq sender(r3) = r1 .
    eq receiver(r3) = sender(r4) .
    eq key(cipher1(r3)) = sender(r4) .
	eq nonce(cipher1(r3)) = n(r1,sender(r4),r2) .
	eq principal(cipher1(r3)) = r1 .
    eq (receiver(r4) = r1) = false .
	red inv220(s,p,q,r,n) implies inv220(sdm3(s,r1,r2,r3,r4),p,q,r,n) .
close

open INV .
  :id(nslpk)
	op p : -> Prin .
    op q : -> Prin .
    op r : -> Rand .
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
    eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
    eq sender(r3) = r1 .
    eq receiver(r3) = sender(r4) .
    eq key(cipher1(r3)) = sender(r4) .
	eq nonce(cipher1(r3)) = n(r1,sender(r4),r2) .
	eq (principal(cipher1(r3)) = r1) = false .
	red inv220(s,p,q,r,n) implies inv220(sdm3(s,r1,r2,r3,r4),p,q,r,n) .
close

open INV .
  :id(nslpk)
	op p : -> Prin .
    op q : -> Prin .
    op r : -> Rand .
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
    eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
    eq sender(r3) = r1 .
    eq receiver(r3) = sender(r4) .
    eq key(cipher1(r3)) = sender(r4) .
	eq (nonce(cipher1(r3)) = n(r1,sender(r4),r2)) = false .
	red inv220(s,p,q,r,n) implies inv220(sdm3(s,r1,r2,r3,r4),p,q,r,n) .
close

open INV .
  :id(nslpk)
	op p : -> Prin .
    op q : -> Prin .
    op r : -> Rand .
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
	eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
    eq sender(r3) = r1 .
    eq receiver(r3) = sender(r4) .
    eq (key(cipher1(r3)) = sender(r4)) = false .
	red inv220(s,p,q,r,n) implies inv220(sdm3(s,r1,r2,r3,r4),p,q,r,n) .
close

open INV .
  :id(nslpk)
	op p : -> Prin .
    op q : -> Prin .
    op r : -> Rand .
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
	eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
    eq sender(r3) = r1 .
    eq (receiver(r3) = sender(r4)) = false .
	red inv220(s,p,q,r,n) implies inv220(sdm3(s,r1,r2,r3,r4),p,q,r,n) .
close

open INV .
  :id(nslpk)
	op p : -> Prin .
    op q : -> Prin .
    op r : -> Rand .
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
	eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
    eq (sender(r3) = r1) = false .
	red inv220(s,p,q,r,n) implies inv220(sdm3(s,r1,r2,r3,r4),p,q,r,n) .
close

open INV .
  :id(nslpk)
	op p : -> Prin .
    op q : -> Prin .
    op r : -> Rand .
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
	eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq (creator(r3) = r1) = false .
	red inv220(s,p,q,r,n) implies inv220(sdm3(s,r1,r2,r3,r4),p,q,r,n) .
close

open INV .
  :id(nslpk)
	op p : -> Prin .
    op q : -> Prin .
    op r : -> Rand .
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
	eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = false .
	red inv220(s,p,q,r,n) implies inv220(sdm3(s,r1,r2,r3,r4),p,q,r,n) .
close

open INV .
  :id(nslpk)
	op p : -> Prin .
    op q : -> Prin .
    op r : -> Rand .
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
	eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = false .
	red inv220(s,p,q,r,n) implies inv220(sdm3(s,r1,r2,r3,r4),p,q,r,n) .
close

open INV .
  :id(nslpk)
	op p : -> Prin .
    op q : -> Prin .
    op r : -> Rand .
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
	eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = false .
	red inv220(s,p,q,r,n) implies inv220(sdm3(s,r1,r2,r3,r4),p,q,r,n) .
close

open INV .
  :id(nslpk)
	op p : -> Prin .
    op q : -> Prin .
    op r : -> Rand .
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
	eq (r3 \in nw(s)) = false .
	red inv220(s,p,q,r,n) implies inv220(sdm3(s,r1,r2,r3,r4),p,q,r,n) .
close

--> I) Base case
--> init
open INV .
  :id(nslpk)
  op p : -> Prin .
  op q : -> Prin .
  op r : -> Rand .
  red inv230(init,p,q,r) .
close

--> II) Induction cases
--> 1. fkm11(s,r1,r2,r3)
open INV .
  :id(nslpk)
  op p : -> Prin .
  op q : -> Prin .
  op r : -> Rand .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Cipher1 .
	op s : -> Sys .
	eq (r3 \in cenc1(nw(s))) = true .
	red inv230(s,p,q,r) implies inv230(fkm11(s,r1,r2,r3),p,q,r) .
close

open INV .
  :id(nslpk)
  op p : -> Prin .
  op q : -> Prin .
  op r : -> Rand .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Cipher1 .
	op s : -> Sys .
	eq (r3 \in cenc1(nw(s))) = false .
	red inv230(s,p,q,r) implies inv230(fkm11(s,r1,r2,r3),p,q,r) .
close

--> 2. fkm12(s,r1,r2,r3)
open INV .
  :id(nslpk)
  op p : -> Prin .
  op q : -> Prin .
  op r : -> Rand .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Nonce .
	op s : -> Sys .
	eq (r3 \in cnonce(nw(s))) = true .
	red inv230(s,p,q,r) implies inv230(fkm12(s,r1,r2,r3),p,q,r) .
close

open INV .
  :id(nslpk)
  op p : -> Prin .
  op q : -> Prin .
  op r : -> Rand .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Nonce .
	op s : -> Sys .
	eq (r3 \in cnonce(nw(s))) = false .
	red inv230(s,p,q,r) implies inv230(fkm12(s,r1,r2,r3),p,q,r) .
close

--> 3. fkm21(s,r1,r2,r3)
open INV .
  :id(nslpk)
  op p : -> Prin .
  op q : -> Prin .
  op r : -> Rand .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Cipher2 .
	op s : -> Sys .
	eq (r3 \in cenc2(nw(s))) = true .
	red inv230(s,p,q,r) implies inv230(fkm21(s,r1,r2,r3),p,q,r) .
close

open INV .
  :id(nslpk)
  op p : -> Prin .
  op q : -> Prin .
  op r : -> Rand .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Cipher2 .
	op s : -> Sys .
	eq (r3 \in cenc2(nw(s))) = false .
	red inv230(s,p,q,r) implies inv230(fkm21(s,r1,r2,r3),p,q,r) .
close

--> 4. fkm22(s,r1,r2,r3,r4)
open INV .
  :id(nslpk)
  op p : -> Prin .
  op q : -> Prin .
  op r : -> Rand .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Nonce .
	op r4 : -> Nonce .
	op s : -> Sys .
	eq (r3 \in cnonce(nw(s))) = true .
	eq (r4 \in cnonce(nw(s))) = true .
	red inv230(s,p,q,r) implies inv230(fkm22(s,r1,r2,r3,r4),p,q,r) .
close

open INV .
  :id(nslpk)
  op p : -> Prin .
  op q : -> Prin .
  op r : -> Rand .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Nonce .
	op r4 : -> Nonce .
	op s : -> Sys .
	eq (r3 \in cnonce(nw(s))) = true .
	eq (r4 \in cnonce(nw(s))) = false .
	red inv230(s,p,q,r) implies inv230(fkm22(s,r1,r2,r3,r4),p,q,r) .
close

open INV .
  :id(nslpk)
  op p : -> Prin .
  op q : -> Prin .
  op r : -> Rand .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Nonce .
	op r4 : -> Nonce .
	op s : -> Sys .
	eq (r3 \in cnonce(nw(s))) = false .
	red inv230(s,p,q,r) implies inv230(fkm22(s,r1,r2,r3,r4),p,q,r) .
close

--> 5. fkm31(s,r1,r2,r3)
open INV .
  :id(nslpk)
  op p : -> Prin .
  op q : -> Prin .
  op r : -> Rand .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Cipher3 .
	op s : -> Sys .
	eq (r3 \in cenc3(nw(s))) = true .
  eq enc3(q,n(q,p,r)) = r3 .
  eq m3(p,p,q,r3) = m3(intruder,r1,r2,r3) .
	red inv230(s,p,q,r) implies inv230(fkm31(s,r1,r2,r3),p,q,r) .
close

open INV .
  :id(nslpk)
  op p : -> Prin .
  op q : -> Prin .
  op r : -> Rand .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Cipher3 .
	op s : -> Sys .
	eq (r3 \in cenc3(nw(s))) = true .
  eq enc3(q,n(q,p,r)) = r3 .
  eq (m3(p,p,q,r3) = m3(intruder,r1,r2,r3)) = false .
	red inv230(s,p,q,r) implies inv230(fkm31(s,r1,r2,r3),p,q,r) .
close

open INV .
  :id(nslpk)
  op p : -> Prin .
  op q : -> Prin .
  op r : -> Rand .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Cipher3 .
	op s : -> Sys .
	eq (r3 \in cenc3(nw(s))) = true .
  eq (enc3(q,n(q,p,r)) = r3) = false .
	red inv230(s,p,q,r) implies inv230(fkm31(s,r1,r2,r3),p,q,r) .
close

open INV .
  :id(nslpk)
  op p : -> Prin .
  op q : -> Prin .
  op r : -> Rand .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Cipher3 .
	op s : -> Sys .
	eq (r3 \in cenc3(nw(s))) = false .
	red inv230(s,p,q,r) implies inv230(fkm31(s,r1,r2,r3),p,q,r) .
close

--> 6. fkm32(s,r1,r2,r3)
open INV .
  :id(nslpk)
    op p : -> Prin .
    op q : -> Prin .
    op r : -> Rand .
	  op r1 : -> Prin .
	  op r2 : -> Prin .
	  op r3 : -> Nonce .
	  op s : -> Sys .
    eq n(q,p,r) \in cnonce(nw(s)) = true .
    eq r2 = q .
    eq r3 = n(q,p,r) .
    eq intruder = p .
	  red inv230(s,p,q,r) implies inv230(fkm32(s,r1,r2,r3),p,q,r) .
close

open INV .
  :id(nslpk)
    op p : -> Prin .
    op q : -> Prin .
    op r : -> Rand .
	  op r1 : -> Prin .
	  op r2 : -> Prin .
	  op r3 : -> Nonce .
	  op s : -> Sys .
    eq n(q,p,r) \in cnonce(nw(s)) = true .
    eq r2 = q .
    eq r3 = n(q,p,r) .
    eq (intruder = p) = false .
    eq intruder = q .
	  red inv230(s,p,q,r) implies inv230(fkm32(s,r1,r2,r3),p,q,r) .
close

open INV .
  :id(nslpk)
    op p : -> Prin .
    op q : -> Prin .
    op r : -> Rand .
	  op r1 : -> Prin .
	  op r2 : -> Prin .
	  op r3 : -> Nonce .
	  op s : -> Sys .
    eq n(q,p,r) \in cnonce(nw(s)) = true .
    eq r2 = q .
    eq r3 = n(q,p,r) .
    eq (intruder = p) = false .
    eq (intruder = q) = false .
	  red inv130(s,n(q,p,r)) implies inv230(s,p,q,r) implies inv230(fkm32(s,r1,r2,r3),p,q,r) .
close

open INV .
  :id(nslpk)
  op p : -> Prin .
  op q : -> Prin .
  op r : -> Rand .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Nonce .
	op s : -> Sys .
  eq n(q,p,r) \in cnonce(nw(s)) = true .
  eq r2 = q .
  eq (r3 = n(q,p,r)) = false .
	red inv130(s,n(q,p,r)) implies inv230(s,p,q,r) implies inv230(fkm32(s,r1,r2,r3),p,q,r) .
close

open INV .
  :id(nslpk)
  op p : -> Prin .
  op q : -> Prin .
  op r : -> Rand .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Nonce .
	op s : -> Sys .
  eq n(q,p,r) \in cnonce(nw(s)) = true .
  eq (r2 = q) = false .
	red inv130(s,n(q,p,r)) implies inv230(s,p,q,r) implies inv230(fkm32(s,r1,r2,r3),p,q,r) .
close

open INV .
  :id(nslpk)
  op p : -> Prin .
  op q : -> Prin .
  op r : -> Rand .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Nonce .
	op s : -> Sys .
  eq n(q,p,r) \in cnonce(nw(s)) = false .
	eq intruder = q .
	red inv230(s,p,q,r) implies inv230(fkm32(s,r1,r2,r3),p,q,r) .
close

open INV .
  :id(nslpk)
  op p : -> Prin .
  op q : -> Prin .
  op r : -> Rand .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Nonce .
	op s : -> Sys .
  eq n(q,p,r) \in cnonce(nw(s)) = false .
	eq (intruder = q) = false .
	eq intruder = p .
	red inv230(s,p,q,r) implies inv230(fkm32(s,r1,r2,r3),p,q,r) .
close

open INV .
  :id(nslpk)
  op p : -> Prin .
  op q : -> Prin .
  op r : -> Rand .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Nonce .
	op s : -> Sys .
  eq n(q,p,r) \in cnonce(nw(s)) = false .
	eq (intruder = q) = false .
	eq (intruder = p) = false .

	eq r3 = n(q,p,r) .
	red inv230(s,p,q,r) implies inv230(fkm32(s,r1,r2,r3),p,q,r) .
close

open INV .
  :id(nslpk)
  op p : -> Prin .
  op q : -> Prin .
  op r : -> Rand .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Nonce .
	op s : -> Sys .
  eq n(q,p,r) \in cnonce(nw(s)) = false .
	eq (intruder = q) = false .
	eq (intruder = p) = false .

	eq (r3 = n(q,p,r)) = false .
	eq r3 \in cnonce(nw(s)) = true .
	red inv230(s,p,q,r) implies inv230(fkm32(s,r1,r2,r3),p,q,r) .
close

open INV .
  :id(nslpk)
  op p : -> Prin .
  op q : -> Prin .
  op r : -> Rand .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Nonce .
	op s : -> Sys .
  eq n(q,p,r) \in cnonce(nw(s)) = false .
	eq (intruder = q) = false .
	eq (intruder = p) = false .

	eq (r3 = n(q,p,r)) = false .
	eq r3 \in cnonce(nw(s)) = false .
	red inv230(s,p,q,r) implies inv230(fkm32(s,r1,r2,r3),p,q,r) .
close

--> 7. sdm1(s,r1,r2,r3)
open INV .
  :id(nslpk)
  op p : -> Prin .
  op q : -> Prin .
  op r : -> Rand .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Rand .
	op s : -> Sys .
	eq (r3 \in ur(s)) = true .
	red inv230(s,p,q,r) implies inv230(sdm1(s,r1,r2,r3),p,q,r) .
close

open INV .
  :id(nslpk)
  op p : -> Prin .
  op q : -> Prin .
  op r : -> Rand .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Rand .
	op s : -> Sys .
	eq (r3 \in ur(s)) = false .
	red inv230(s,p,q,r) implies inv230(sdm1(s,r1,r2,r3),p,q,r) .
close

--> 8. sdm2(s,r1,r2,r3)
open INV .
  :id(nslpk)
  op p : -> Prin .
  op q : -> Prin .
  op r : -> Rand .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op s : -> Sys .
  eq r3 \in nw(s) = true .
  eq m1?(r3) = true .
  eq receiver(r3) = r1 .
  eq key(cipher1(r3)) = r1 .
  eq principal(cipher1(r3)) = sender(r3) .
  eq r2 \in ur(s) = true .
	red inv230(s,p,q,r) implies inv230(sdm2(s,r1,r2,r3),p,q,r) .
close

open INV .
  :id(nslpk)
  op p : -> Prin .
  op q : -> Prin .
  op r : -> Rand .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op s : -> Sys .
  eq r3 \in nw(s) = true .
  eq m1?(r3) = true .
  eq receiver(r3) = r1 .
  eq key(cipher1(r3)) = r1 .
  eq principal(cipher1(r3)) = sender(r3) .
  eq r2 \in ur(s) = false .
	red inv230(s,p,q,r) implies inv230(sdm2(s,r1,r2,r3),p,q,r) .
close

open INV .
  :id(nslpk)
  op p : -> Prin .
  op q : -> Prin .
  op r : -> Rand .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op s : -> Sys .
  eq r3 \in nw(s) = true .
  eq m1?(r3) = true .
  eq receiver(r3) = r1 .
  eq key(cipher1(r3)) = r1 .
  eq (principal(cipher1(r3)) = sender(r3)) = false .
	red inv230(s,p,q,r) implies inv230(sdm2(s,r1,r2,r3),p,q,r) .
close

open INV .
  :id(nslpk)
  op p : -> Prin .
  op q : -> Prin .
  op r : -> Rand .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op s : -> Sys .
  eq r3 \in nw(s) = true .
  eq m1?(r3) = true .
  eq receiver(r3) = r1 .
  eq (key(cipher1(r3)) = r1) = false .
	red inv230(s,p,q,r) implies inv230(sdm2(s,r1,r2,r3),p,q,r) .
close

open INV .
  :id(nslpk)
  op p : -> Prin .
  op q : -> Prin .
  op r : -> Rand .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op s : -> Sys .
  eq r3 \in nw(s) = true .
  eq m1?(r3) = true .
  eq (receiver(r3) = r1) = false .
	red inv230(s,p,q,r) implies inv230(sdm2(s,r1,r2,r3),p,q,r) .
close

open INV .
  :id(nslpk)
  op p : -> Prin .
  op q : -> Prin .
  op r : -> Rand .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op s : -> Sys .
  eq r3 \in nw(s) = true .
  eq m1?(r3) = false .
	red inv230(s,p,q,r) implies inv230(sdm2(s,r1,r2,r3),p,q,r) .
close

open INV .
  :id(nslpk)
  op p : -> Prin .
  op q : -> Prin .
  op r : -> Rand .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op s : -> Sys .
  eq r3 \in nw(s) = false .
	red inv230(s,p,q,r) implies inv230(sdm2(s,r1,r2,r3),p,q,r) .
close

--> 9. sdm3(s,r1,r2,r3,r4)
open INV .
  :id(nslpk)
  op p : -> Prin .
  op q : -> Prin .
  op r : -> Rand .
  op r1 : -> Prin .
  op r2 : -> Rand .
  op r3 : -> Msg .
  op r4 : -> Msg .
  op s : -> Sys .
  eq (r3 \in nw(s)) = true .
  eq (r4 \in nw(s)) = true .
  eq m1?(r3) = true .
  eq m2?(r4) = true .
  eq r1 = creator(r3) .
  eq sender(r3) = creator(r3) .
  eq receiver(r3) = sender(r4) .
  eq key(cipher1(r3)) = sender(r4) .
  eq principal(cipher1(r3)) = creator(r3) .
  eq receiver(r4) = creator(r3) .
  eq key(cipher2(r4)) = creator(r3) .
  eq principal(cipher2(r4)) = sender(r4) .

  eq q = sender(r4) .
  eq nonce(cipher1(r3)) = n(creator(r3),sender(r4),r2) .
  eq nonce1(cipher2(r4)) = n(creator(r3),sender(r4),r2) .
  eq nonce2(cipher2(r4)) = n(sender(r4),p,r) .

  eq sender(r4) = intruder .
  red inv230(s,p,q,r) implies inv230(sdm3(s,r1,r2,r3,r4),p,q,r) .
close

open INV .
  :id(nslpk)
  op p : -> Prin .
  op q : -> Prin .
  op r : -> Rand .
  op r1 : -> Prin .
  op r2 : -> Rand .
  op r3 : -> Msg .
  op r4 : -> Msg .
  op s : -> Sys .
  eq (r3 \in nw(s)) = true .
  eq (r4 \in nw(s)) = true .
  eq m1?(r3) = true .
  eq m2?(r4) = true .
  eq r1 = creator(r3) .
  eq sender(r3) = creator(r3) .
  eq receiver(r3) = sender(r4) .
  eq key(cipher1(r3)) = sender(r4) .
  eq principal(cipher1(r3)) = creator(r3) .
  eq receiver(r4) = creator(r3) .
  eq key(cipher2(r4)) = creator(r3) .
  eq principal(cipher2(r4)) = sender(r4) .

  eq q = sender(r4) .
  eq nonce(cipher1(r3)) = n(creator(r3),sender(r4),r2) .
  eq nonce1(cipher2(r4)) = n(creator(r3),sender(r4),r2) .
  eq nonce2(cipher2(r4)) = n(sender(r4),p,r) .

  eq (sender(r4) = intruder) = false .
  eq p = intruder .
  red inv230(s,p,q,r) implies inv230(sdm3(s,r1,r2,r3,r4),p,q,r) .
close

open INV .
  :id(nslpk)
  op p : -> Prin .
  op q : -> Prin .
  op r : -> Rand .
  op r1 : -> Prin .
  op r2 : -> Rand .
  op r3 : -> Msg .
  op r4 : -> Msg .
  op s : -> Sys .
  eq (r3 \in nw(s)) = true .
  eq (r4 \in nw(s)) = true .
  eq m1?(r3) = true .
  eq m2?(r4) = true .
  eq r1 = creator(r3) .
  eq sender(r3) = creator(r3) .
  eq receiver(r3) = sender(r4) .
  eq key(cipher1(r3)) = sender(r4) .
  eq principal(cipher1(r3)) = creator(r3) .
  eq receiver(r4) = creator(r3) .
  eq key(cipher2(r4)) = creator(r3) .
  eq principal(cipher2(r4)) = sender(r4) .

  eq q = sender(r4) .
  eq nonce(cipher1(r3)) = n(creator(r3),sender(r4),r2) .
  eq nonce1(cipher2(r4)) = n(creator(r3),sender(r4),r2) .
  eq nonce2(cipher2(r4)) = n(sender(r4),p,r) .

  eq (sender(r4) = intruder) = false .
  eq (p = intruder) = false .
  eq p = creator(r3) .
  red inv230(s,p,q,r) implies inv230(sdm3(s,r1,r2,r3,r4),p,q,r) .
close

open INV .
  :id(nslpk)
  op p : -> Prin .
  op q : -> Prin .
  op r : -> Rand .
  op r1 : -> Prin .
  op r2 : -> Rand .
  op r3 : -> Msg .
  op r4 : -> Msg .
  op s : -> Sys .
  eq (r3 \in nw(s)) = true .
  eq (r4 \in nw(s)) = true .
  eq m1?(r3) = true .
  eq m2?(r4) = true .
  eq r1 = creator(r3) .
  eq sender(r3) = creator(r3) .
  eq receiver(r3) = sender(r4) .
  eq key(cipher1(r3)) = sender(r4) .
  eq principal(cipher1(r3)) = creator(r3) .
  eq receiver(r4) = creator(r3) .
  eq key(cipher2(r4)) = creator(r3) .
  eq principal(cipher2(r4)) = sender(r4) .

  eq q = sender(r4) .
  eq nonce(cipher1(r3)) = n(creator(r3),sender(r4),r2) .
  eq nonce1(cipher2(r4)) = n(creator(r3),sender(r4),r2) .
  eq nonce2(cipher2(r4)) = n(sender(r4),p,r) .

  eq (sender(r4) = intruder) = false .
  eq (p = intruder) = false .
  eq (p = creator(r3)) = false .

  eq enc3(sender(r4),n(sender(r4),p,r)) \in cenc3(nw(s)) = true .
  red inv230(s,p,q,r) implies inv230(sdm3(s,r1,r2,r3,r4),p,q,r) .
close

open INV .
  :id(nslpk)
  op p : -> Prin .
  op q : -> Prin .
  op r : -> Rand .
  op r1 : -> Prin .
  op r2 : -> Rand .
  op r3 : -> Msg .
  op r4 : -> Msg .
  op s : -> Sys .
  eq (r3 \in nw(s)) = true .
  eq (r4 \in nw(s)) = true .
  eq m1?(r3) = true .
  eq m2?(r4) = true .
  eq r1 = creator(r3) .
  eq sender(r3) = creator(r3) .
  eq receiver(r3) = sender(r4) .
  eq key(cipher1(r3)) = sender(r4) .
  eq principal(cipher1(r3)) = creator(r3) .
  eq receiver(r4) = creator(r3) .
  eq key(cipher2(r4)) = creator(r3) .
  eq principal(cipher2(r4)) = sender(r4) .

  eq q = sender(r4) .
  eq nonce(cipher1(r3)) = n(creator(r3),sender(r4),r2) .
  eq nonce1(cipher2(r4)) = n(creator(r3),sender(r4),r2) .
  eq nonce2(cipher2(r4)) = n(sender(r4),p,r) .

  eq (sender(r4) = intruder) = false .
  eq (p = intruder) = false .
  eq (p = creator(r3)) = false .

  eq enc3(sender(r4),n(sender(r4),p,r)) \in cenc3(nw(s)) = false .
  eq creator(r3) = intruder .
  red inv130(s,n(sender(r4),p,r)) implies inv230(s,p,q,r) implies inv230(sdm3(s,r1,r2,r3,r4),p,q,r) .
close

open INV .
  :id(nslpk)
  op p : -> Prin .
  op q : -> Prin .
  op r : -> Rand .
  op r1 : -> Prin .
  op r2 : -> Rand .
  op r3 : -> Msg .
  op r4 : -> Msg .
  op s : -> Sys .
  eq (r3 \in nw(s)) = true .
  eq (r4 \in nw(s)) = true .
  eq m1?(r3) = true .
  eq m2?(r4) = true .
  eq r1 = creator(r3) .
  eq sender(r3) = creator(r3) .
  eq receiver(r3) = sender(r4) .
  eq key(cipher1(r3)) = sender(r4) .
  eq principal(cipher1(r3)) = creator(r3) .
  eq receiver(r4) = creator(r3) .
  eq key(cipher2(r4)) = creator(r3) .
  eq principal(cipher2(r4)) = sender(r4) .

  eq q = sender(r4) .
  eq nonce(cipher1(r3)) = n(creator(r3),sender(r4),r2) .
  eq nonce1(cipher2(r4)) = n(creator(r3),sender(r4),r2) .
  eq nonce2(cipher2(r4)) = n(sender(r4),p,r) .

  eq (sender(r4) = intruder) = false .
  eq (p = intruder) = false .
  eq (p = creator(r3)) = false .

  eq enc3(sender(r4),n(sender(r4),p,r)) \in cenc3(nw(s)) = false .
  eq (creator(r3) = intruder) = false .

  eq m2(sender(r4),sender(r4),creator(r3),enc2(creator(r3),n(creator(r3),sender(r4),r2), n(sender(r4),p,r),sender(r4))) \in nw(s) = true .
  red inv260(s,q,r1,n(r1,q,r2),n(q,p,r)) implies inv230(s,p,q,r) implies inv230(sdm3(s,r1,r2,r3,r4),p,q,r) .
close

open INV .
  :id(nslpk)
  op p : -> Prin .
  op q : -> Prin .
  op r : -> Rand .
  op r1 : -> Prin .
  op r2 : -> Rand .
  op r3 : -> Msg .
  op r4 : -> Msg .
  op s : -> Sys .
  eq (r3 \in nw(s)) = true .
  eq (r4 \in nw(s)) = true .
  eq m1?(r3) = true .
  eq m2?(r4) = true .
  eq r1 = creator(r3) .
  eq sender(r3) = creator(r3) .
  eq receiver(r3) = sender(r4) .
  eq key(cipher1(r3)) = sender(r4) .
  eq principal(cipher1(r3)) = creator(r3) .
  eq receiver(r4) = creator(r3) .
  eq key(cipher2(r4)) = creator(r3) .
  eq principal(cipher2(r4)) = sender(r4) .

  eq q = sender(r4) .
  eq nonce(cipher1(r3)) = n(creator(r3),sender(r4),r2) .
  eq nonce1(cipher2(r4)) = n(creator(r3),sender(r4),r2) .
  eq nonce2(cipher2(r4)) = n(sender(r4),p,r) .

  eq (sender(r4) = intruder) = false .
  eq (p = intruder) = false .
  eq (p = creator(r3)) = false .

  eq enc3(sender(r4),n(sender(r4),p,r)) \in cenc3(nw(s)) = false .
  eq (creator(r3) = intruder) = false .

  eq m2(sender(r4),sender(r4),creator(r3),enc2(creator(r3),n(creator(r3),sender(r4),r2), n(sender(r4),p,r),sender(r4))) \in nw(s) = false .
  red inv170(s,r1,sender(r4),creator(r4),r2,n(sender(r4),p,r)) implies inv230(s,p,q,r) implies inv230(sdm3(s,r1,r2,r3,r4),p,q,r) .
close

open INV .
  :id(nslpk)
  op p : -> Prin .
  op q : -> Prin .
  op r : -> Rand .
  op r1 : -> Prin .
  op r2 : -> Rand .
  op r3 : -> Msg .
  op r4 : -> Msg .
  op s : -> Sys .
  eq (r3 \in nw(s)) = true .
  eq (r4 \in nw(s)) = true .
  eq m1?(r3) = true .
  eq m2?(r4) = true .
  eq r1 = creator(r3) .
  eq sender(r3) = creator(r3) .
  eq receiver(r3) = sender(r4) .
  eq key(cipher1(r3)) = sender(r4) .
  eq principal(cipher1(r3)) = creator(r3) .
  eq receiver(r4) = creator(r3) .
  eq key(cipher2(r4)) = creator(r3) .
  eq principal(cipher2(r4)) = sender(r4) .

  eq q = sender(r4) .
  eq nonce(cipher1(r3)) = n(creator(r3),sender(r4),r2) .
  eq nonce1(cipher2(r4)) = n(creator(r3),sender(r4),r2) .
  eq (nonce2(cipher2(r4)) = n(sender(r4),p,r)) = false .
  red inv230(s,p,q,r) implies inv230(sdm3(s,r1,r2,r3,r4),p,q,r) .
close

open INV .
  :id(nslpk)
  op p : -> Prin .
  op q : -> Prin .
  op r : -> Rand .
  op r1 : -> Prin .
  op r2 : -> Rand .
  op r3 : -> Msg .
  op r4 : -> Msg .
  op s : -> Sys .
  eq (r3 \in nw(s)) = true .
  eq (r4 \in nw(s)) = true .
  eq m1?(r3) = true .
  eq m2?(r4) = true .
  eq r1 = creator(r3) .
  eq sender(r3) = creator(r3) .
  eq receiver(r3) = sender(r4) .
  eq key(cipher1(r3)) = sender(r4) .
  eq principal(cipher1(r3)) = creator(r3) .
  eq receiver(r4) = creator(r3) .
  eq key(cipher2(r4)) = creator(r3) .
  eq principal(cipher2(r4)) = sender(r4) .

  eq q = sender(r4) .
  eq nonce(cipher1(r3)) = n(creator(r3),sender(r4),r2) .
  eq (nonce1(cipher2(r4)) = n(creator(r3),sender(r4),r2)) = false .
  red inv230(s,p,q,r) implies inv230(sdm3(s,r1,r2,r3,r4),p,q,r) .
close

open INV .
  :id(nslpk)
  op p : -> Prin .
  op q : -> Prin .
  op r : -> Rand .
  op r1 : -> Prin .
  op r2 : -> Rand .
  op r3 : -> Msg .
  op r4 : -> Msg .
  op s : -> Sys .
  eq (r3 \in nw(s)) = true .
  eq (r4 \in nw(s)) = true .
  eq m1?(r3) = true .
  eq m2?(r4) = true .
  eq r1 = creator(r3) .
  eq sender(r3) = creator(r3) .
  eq receiver(r3) = sender(r4) .
  eq key(cipher1(r3)) = sender(r4) .
  eq principal(cipher1(r3)) = creator(r3) .
  eq receiver(r4) = creator(r3) .
  eq key(cipher2(r4)) = creator(r3) .
  eq principal(cipher2(r4)) = sender(r4) .

  eq q = sender(r4) .
  eq (nonce(cipher1(r3)) = n(creator(r3),sender(r4),r2)) = false .
  red inv230(s,p,q,r) implies inv230(sdm3(s,r1,r2,r3,r4),p,q,r) .
close

open INV .
  :id(nslpk)
  op p : -> Prin .
  op q : -> Prin .
  op r : -> Rand .
  op r1 : -> Prin .
  op r2 : -> Rand .
  op r3 : -> Msg .
  op r4 : -> Msg .
  op s : -> Sys .
  eq (r3 \in nw(s)) = true .
  eq (r4 \in nw(s)) = true .
  eq m1?(r3) = true .
  eq m2?(r4) = true .
  eq r1 = creator(r3) .
  eq sender(r3) = creator(r3) .
  eq receiver(r3) = sender(r4) .
  eq key(cipher1(r3)) = sender(r4) .
  eq principal(cipher1(r3)) = creator(r3) .
  eq receiver(r4) = creator(r3) .
  eq key(cipher2(r4)) = creator(r3) .
  eq principal(cipher2(r4)) = sender(r4) .

  eq (q = sender(r4)) = false .
  eq nonce(cipher1(r3)) = n(creator(r3),sender(r4),r2) .
  eq nonce1(cipher2(r4)) = n(creator(r3),sender(r4),r2) .
  red inv230(s,p,q,r) implies inv230(sdm3(s,r1,r2,r3,r4),p,q,r) .
close

open INV .
  :id(nslpk)
  op p : -> Prin .
  op q : -> Prin .
  op r : -> Rand .
  op r1 : -> Prin .
  op r2 : -> Rand .
  op r3 : -> Msg .
  op r4 : -> Msg .
  op s : -> Sys .
  eq (r3 \in nw(s)) = true .
  eq (r4 \in nw(s)) = true .
  eq m1?(r3) = true .
  eq m2?(r4) = true .
  eq r1 = creator(r3) .
  eq sender(r3) = creator(r3) .
  eq receiver(r3) = sender(r4) .
  eq key(cipher1(r3)) = sender(r4) .
  eq principal(cipher1(r3)) = creator(r3) .
  eq receiver(r4) = creator(r3) .
  eq key(cipher2(r4)) = creator(r3) .
  eq principal(cipher2(r4)) = sender(r4) .

  eq (q = sender(r4)) = false .
  eq nonce(cipher1(r3)) = n(creator(r3),sender(r4),r2) .
  eq (nonce1(cipher2(r4)) = n(creator(r3),sender(r4),r2)) = false .
  red inv230(s,p,q,r) implies inv230(sdm3(s,r1,r2,r3,r4),p,q,r) .
close

open INV .
  :id(nslpk)
  op p : -> Prin .
  op q : -> Prin .
  op r : -> Rand .
  op r1 : -> Prin .
  op r2 : -> Rand .
  op r3 : -> Msg .
  op r4 : -> Msg .
  op s : -> Sys .
  eq (r3 \in nw(s)) = true .
  eq (r4 \in nw(s)) = true .
  eq m1?(r3) = true .
  eq m2?(r4) = true .
  eq r1 = creator(r3) .
  eq sender(r3) = creator(r3) .
  eq receiver(r3) = sender(r4) .
  eq key(cipher1(r3)) = sender(r4) .
  eq principal(cipher1(r3)) = creator(r3) .
  eq receiver(r4) = creator(r3) .
  eq key(cipher2(r4)) = creator(r3) .
  eq principal(cipher2(r4)) = sender(r4) .

  eq (q = sender(r4)) = false .
  eq (nonce(cipher1(r3)) = n(creator(r3),sender(r4),r2)) = false .
  red inv230(s,p,q,r) implies inv230(sdm3(s,r1,r2,r3,r4),p,q,r) .
close

open INV .
  :id(nslpk)
  op p : -> Prin .
  op q : -> Prin .
  op r : -> Rand .
  op r1 : -> Prin .
  op r2 : -> Rand .
  op r3 : -> Msg .
  op r4 : -> Msg .
  op s : -> Sys .
  eq (r3 \in nw(s)) = true .
  eq (r4 \in nw(s)) = true .
  eq m1?(r3) = true .
  eq m2?(r4) = true .
  eq r1 = creator(r3) .
  eq sender(r3) = creator(r3) .
  eq receiver(r3) = sender(r4) .
  eq key(cipher1(r3)) = sender(r4) .
  eq principal(cipher1(r3)) = creator(r3) .
  eq receiver(r4) = creator(r3) .
  eq key(cipher2(r4)) = creator(r3) .
  eq (principal(cipher2(r4)) = sender(r4)) = false .
  red inv230(s,p,q,r) implies inv230(sdm3(s,r1,r2,r3,r4),p,q,r) .
close

open INV .
  :id(nslpk)
  op p : -> Prin .
  op q : -> Prin .
  op r : -> Rand .
  op r1 : -> Prin .
  op r2 : -> Rand .
  op r3 : -> Msg .
  op r4 : -> Msg .
  op s : -> Sys .
  eq (r3 \in nw(s)) = true .
  eq (r4 \in nw(s)) = true .
  eq m1?(r3) = true .
  eq m2?(r4) = true .
  eq r1 = creator(r3) .
  eq sender(r3) = creator(r3) .
  eq receiver(r3) = sender(r4) .
  eq key(cipher1(r3)) = sender(r4) .
  eq principal(cipher1(r3)) = creator(r3) .
  eq receiver(r4) = creator(r3) .
  eq (key(cipher2(r4)) = creator(r3)) = false .
  red inv230(s,p,q,r) implies inv230(sdm3(s,r1,r2,r3,r4),p,q,r) .
close

open INV .
  :id(nslpk)
  op p : -> Prin .
  op q : -> Prin .
  op r : -> Rand .
  op r1 : -> Prin .
  op r2 : -> Rand .
  op r3 : -> Msg .
  op r4 : -> Msg .
  op s : -> Sys .
  eq (r3 \in nw(s)) = true .
  eq (r4 \in nw(s)) = true .
  eq m1?(r3) = true .
  eq m2?(r4) = true .
  eq r1 = creator(r3) .
  eq sender(r3) = creator(r3) .
  eq receiver(r3) = sender(r4) .
  eq key(cipher1(r3)) = sender(r4) .
  eq principal(cipher1(r3)) = creator(r3) .
  eq (receiver(r4) = creator(r3)) = false .
  red inv230(s,p,q,r) implies inv230(sdm3(s,r1,r2,r3,r4),p,q,r) .
close

open INV .
  :id(nslpk)
  op p : -> Prin .
  op q : -> Prin .
  op r : -> Rand .
  op r1 : -> Prin .
  op r2 : -> Rand .
  op r3 : -> Msg .
  op r4 : -> Msg .
  op s : -> Sys .
  eq (r3 \in nw(s)) = true .
  eq (r4 \in nw(s)) = true .
  eq m1?(r3) = true .
  eq m2?(r4) = true .
  eq r1 = creator(r3) .
  eq sender(r3) = creator(r3) .
  eq receiver(r3) = sender(r4) .
  eq key(cipher1(r3)) = sender(r4) .
  eq (principal(cipher1(r3)) = creator(r3)) = false .
  red inv230(s,p,q,r) implies inv230(sdm3(s,r1,r2,r3,r4),p,q,r) .
close

open INV .
  :id(nslpk)
  op p : -> Prin .
  op q : -> Prin .
  op r : -> Rand .
  op r1 : -> Prin .
  op r2 : -> Rand .
  op r3 : -> Msg .
  op r4 : -> Msg .
  op s : -> Sys .
  eq (r3 \in nw(s)) = true .
  eq (r4 \in nw(s)) = true .
  eq m1?(r3) = true .
  eq m2?(r4) = true .
  eq r1 = creator(r3) .
  eq sender(r3) = creator(r3) .
  eq receiver(r3) = sender(r4) .
  eq (key(cipher1(r3)) = sender(r4)) = false .
  red inv230(s,p,q,r) implies inv230(sdm3(s,r1,r2,r3,r4),p,q,r) .
close

open INV .
  :id(nslpk)
  op p : -> Prin .
  op q : -> Prin .
  op r : -> Rand .
  op r1 : -> Prin .
  op r2 : -> Rand .
  op r3 : -> Msg .
  op r4 : -> Msg .
  op s : -> Sys .
  eq (r3 \in nw(s)) = true .
  eq (r4 \in nw(s)) = true .
  eq m1?(r3) = true .
  eq m2?(r4) = true .
  eq r1 = creator(r3) .
  eq sender(r3) = creator(r3) .
  eq (receiver(r3) = sender(r4)) = false .
  red inv230(s,p,q,r) implies inv230(sdm3(s,r1,r2,r3,r4),p,q,r) .
close

open INV .
  :id(nslpk)
  op p : -> Prin .
  op q : -> Prin .
  op r : -> Rand .
  op r1 : -> Prin .
  op r2 : -> Rand .
  op r3 : -> Msg .
  op r4 : -> Msg .
  op s : -> Sys .
  eq (r3 \in nw(s)) = true .
  eq (r4 \in nw(s)) = true .
  eq m1?(r3) = true .
  eq m2?(r4) = true .
  eq r1 = creator(r3) .
  eq (sender(r3) = creator(r3)) = false .
  red inv230(s,p,q,r) implies inv230(sdm3(s,r1,r2,r3,r4),p,q,r) .
close

open INV .
  :id(nslpk)
  op p : -> Prin .
  op q : -> Prin .
  op r : -> Rand .
  op r1 : -> Prin .
  op r2 : -> Rand .
  op r3 : -> Msg .
  op r4 : -> Msg .
  op s : -> Sys .
  eq (r3 \in nw(s)) = true .
  eq (r4 \in nw(s)) = true .
  eq m1?(r3) = true .
  eq m2?(r4) = true .
  eq (r1 = creator(r3)) = false .
  red inv230(s,p,q,r) implies inv230(sdm3(s,r1,r2,r3,r4),p,q,r) .
close

open INV .
  :id(nslpk)
  op p : -> Prin .
  op q : -> Prin .
  op r : -> Rand .
  op r1 : -> Prin .
  op r2 : -> Rand .
  op r3 : -> Msg .
  op r4 : -> Msg .
  op s : -> Sys .
  eq (r3 \in nw(s)) = true .
  eq (r4 \in nw(s)) = true .
  eq m1?(r3) = true .
  eq m2?(r4) = false .
  red inv230(s,p,q,r) implies inv230(sdm3(s,r1,r2,r3,r4),p,q,r) .
close

open INV .
  :id(nslpk)
  op p : -> Prin .
  op q : -> Prin .
  op r : -> Rand .
  op r1 : -> Prin .
  op r2 : -> Rand .
  op r3 : -> Msg .
  op r4 : -> Msg .
  op s : -> Sys .
  eq (r3 \in nw(s)) = true .
  eq (r4 \in nw(s)) = true .
  eq m1?(r3) = false .
  red inv230(s,p,q,r) implies inv230(sdm3(s,r1,r2,r3,r4),p,q,r) .
close

open INV .
  :id(nslpk)
  op p : -> Prin .
  op q : -> Prin .
  op r : -> Rand .
  op r1 : -> Prin .
  op r2 : -> Rand .
  op r3 : -> Msg .
  op r4 : -> Msg .
  op s : -> Sys .
  eq (r3 \in nw(s)) = true .
  eq (r4 \in nw(s)) = false .
  red inv230(s,p,q,r) implies inv230(sdm3(s,r1,r2,r3,r4),p,q,r) .
close

open INV .
  :id(nslpk)
  op p : -> Prin .
  op q : -> Prin .
  op r : -> Rand .
  op r1 : -> Prin .
  op r2 : -> Rand .
  op r3 : -> Msg .
  op r4 : -> Msg .
  op s : -> Sys .
  eq (r3 \in nw(s)) = false .
  red inv230(s,p,q,r) implies inv230(sdm3(s,r1,r2,r3,r4),p,q,r) .
close

--> I) Base case
--> init
open INV .
  :id(nslpk)
  op p : -> Prin .
  op q : -> Prin .
  op r : -> Rand .
  red inv240(init,p,q,r) .
close

--> II) Induction cases
--> 1. fkm11(s,r1,r2,r3)
open INV .
  :id(nslpk)
  op p : -> Prin .
  op q : -> Prin .
  op r : -> Rand .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Cipher1 .
	op s : -> Sys .
	eq (r3 \in cenc1(nw(s))) = true .
	red inv240(s,p,q,r) implies inv240(fkm11(s,r1,r2,r3),p,q,r) .
close

open INV .
  :id(nslpk)
  op p : -> Prin .
  op q : -> Prin .
  op r : -> Rand .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Cipher1 .
	op s : -> Sys .
	eq (r3 \in cenc1(nw(s))) = false .
	red inv240(s,p,q,r) implies inv240(fkm11(s,r1,r2,r3),p,q,r) .
close

--> 2. fkm12(s,r1,r2,r3)
open INV .
  :id(nslpk)
  op p : -> Prin .
  op q : -> Prin .
  op r : -> Rand .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Nonce .
	op s : -> Sys .
	eq (r3 \in cnonce(nw(s))) = true .
	red inv240(s,p,q,r) implies inv240(fkm12(s,r1,r2,r3),p,q,r) .
close

open INV .
  :id(nslpk)
  op p : -> Prin .
  op q : -> Prin .
  op r : -> Rand .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Nonce .
	op s : -> Sys .
	eq (r3 \in cnonce(nw(s))) = false .
	red inv240(s,p,q,r) implies inv240(fkm12(s,r1,r2,r3),p,q,r) .
close

--> 3. fkm21(s,r1,r2,r3)
open INV .
  :id(nslpk)
  op p : -> Prin .
  op q : -> Prin .
  op r : -> Rand .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Cipher2 .
	op s : -> Sys .
	eq (r3 \in cenc2(nw(s))) = true .
	red inv240(s,p,q,r) implies inv240(fkm21(s,r1,r2,r3),p,q,r) .
close

open INV .
  :id(nslpk)
  op p : -> Prin .
  op q : -> Prin .
  op r : -> Rand .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Cipher2 .
	op s : -> Sys .
	eq (r3 \in cenc2(nw(s))) = false .
	red inv240(s,p,q,r) implies inv240(fkm21(s,r1,r2,r3),p,q,r) .
close

--> 4. fkm22(s,r1,r2,r3,r4)
open INV .
  :id(nslpk)
  op p : -> Prin .
  op q : -> Prin .
  op r : -> Rand .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Nonce .
	op r4 : -> Nonce .
	op s : -> Sys .
	eq (r3 \in cnonce(nw(s))) = true .
	eq (r4 \in cnonce(nw(s))) = true .
	red inv240(s,p,q,r) implies inv240(fkm22(s,r1,r2,r3,r4),p,q,r) .
close

open INV .
  :id(nslpk)
  op p : -> Prin .
  op q : -> Prin .
  op r : -> Rand .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Nonce .
	op r4 : -> Nonce .
	op s : -> Sys .
	eq (r3 \in cnonce(nw(s))) = true .
	eq (r4 \in cnonce(nw(s))) = false .
	red inv240(s,p,q,r) implies inv240(fkm22(s,r1,r2,r3,r4),p,q,r) .
close

open INV .
  :id(nslpk)
  op p : -> Prin .
  op q : -> Prin .
  op r : -> Rand .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Nonce .
	op r4 : -> Nonce .
	op s : -> Sys .
	eq (r3 \in cnonce(nw(s))) = false .
	red inv240(s,p,q,r) implies inv240(fkm22(s,r1,r2,r3,r4),p,q,r) .
close

--> 5. fkm31(s,r1,r2,r3)
open INV .
  :id(nslpk)
  op p : -> Prin .
  op q : -> Prin .
  op r : -> Rand .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Cipher3 .
	op s : -> Sys .
	eq (r3 \in cenc3(nw(s))) = true .
  eq enc3(q,n(q,p,r)) = r3 .
	red inv240(s,p,q,r) implies inv240(fkm31(s,r1,r2,r3),p,q,r) .
close

open INV .
  :id(nslpk)
  op p : -> Prin .
  op q : -> Prin .
  op r : -> Rand .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Cipher3 .
	op s : -> Sys .
	eq (r3 \in cenc3(nw(s))) = true .
  eq (enc3(q,n(q,p,r)) = r3) = false .
	red inv240(s,p,q,r) implies inv240(fkm31(s,r1,r2,r3),p,q,r) .
close

open INV .
  :id(nslpk)
  op p : -> Prin .
  op q : -> Prin .
  op r : -> Rand .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Cipher3 .
	op s : -> Sys .
	eq (r3 \in cenc3(nw(s))) = false .
	red inv240(s,p,q,r) implies inv240(fkm31(s,r1,r2,r3),p,q,r) .
close

--> 6. fkm32(s,r1,r2,r3)
open INV .
  :id(nslpk)
  op p : -> Prin .
  op q : -> Prin .
  op r : -> Rand .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Nonce .
	op s : -> Sys .
  eq r3 \in cnonce(nw(s)) = true .
  eq r2 = intruder .
	red inv240(s,p,q,r) implies inv240(fkm32(s,r1,r2,r3),p,q,r) .
close

open INV .
  :id(nslpk)
  op p : -> Prin .
  op q : -> Prin .
  op r : -> Rand .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Nonce .
	op s : -> Sys .
  eq (r3 \in cnonce(nw(s))) = true .
  eq (r2 = intruder) = false .
  eq r2 = q .
  eq r3 = n(q,p,r) .
  eq r \in ur(s) = true .
	red inv240(s,p,q,r) implies inv240(fkm32(s,r1,r2,r3),p,q,r) .
close

open INV .
  :id(nslpk)
  op p : -> Prin .
  op q : -> Prin .
  op r : -> Rand .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Nonce .
	op s : -> Sys .
  eq r3 \in cnonce(nw(s)) = true .
  eq (r2 = intruder) = false .
  eq r2 = q .
  eq r3 = n(q,p,r) .
  eq r \in ur(s) = false .
	eq q = intruder .
	red inv210(s,q,p,r) implies inv240(s,p,q,r) implies inv240(fkm32(s,r1,r2,r3),p,q,r) .
close

open INV .
  :id(nslpk)
  op p : -> Prin .
  op q : -> Prin .
  op r : -> Rand .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Nonce .
	op s : -> Sys .
  eq r3 \in cnonce(nw(s)) = true .
  eq (r2 = intruder) = false .
  eq r2 = q .
  eq r3 = n(q,p,r) .
  eq r \in ur(s) = false .
	eq (q = intruder) = false .
  eq n(q,p,r) \in cnonce(nw(s)) = true .
	red inv210(s,q,p,r) implies inv240(s,p,q,r) implies inv240(fkm32(s,r1,r2,r3),p,q,r) .
close

open INV .
  :id(nslpk)
  op p : -> Prin .
  op q : -> Prin .
  op r : -> Rand .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Nonce .
	op s : -> Sys .
  eq r3 \in cnonce(nw(s)) = true .
  eq (r2 = intruder) = false .
  eq r2 = q .
  eq r3 = n(q,p,r) .
  eq r \in ur(s) = false .
	eq (q = intruder) = false .
  eq n(q,p,r) \in cnonce(nw(s)) = false .
	red inv240(s,p,q,r) implies inv240(fkm32(s,r1,r2,r3),p,q,r) .
close

open INV .
  :id(nslpk)
  op p : -> Prin .
  op q : -> Prin .
  op r : -> Rand .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Nonce .
	op s : -> Sys .
  eq r3 \in cnonce(nw(s)) = true .
  eq (r2 = intruder) = false .
  eq r2 = q .
  eq (r3 = n(q,p,r)) = false .
	red inv240(s,p,q,r) implies inv240(fkm32(s,r1,r2,r3),p,q,r) .
close

open INV .
  :id(nslpk)
  op p : -> Prin .
  op q : -> Prin .
  op r : -> Rand .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Nonce .
	op s : -> Sys .
  eq r3 \in cnonce(nw(s)) = true .
  eq (r2 = intruder) = false .
  eq (r2 = q) = false .
	red inv240(s,p,q,r) implies inv240(fkm32(s,r1,r2,r3),p,q,r) .
close

open INV .
  :id(nslpk)
  op p : -> Prin .
  op q : -> Prin .
  op r : -> Rand .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Nonce .
	op s : -> Sys .
  eq r3 \in cnonce(nw(s)) = false .
	red inv240(s,p,q,r) implies inv240(fkm32(s,r1,r2,r3),p,q,r) .
close

--> 7. sdm1(s,r1,r2,r3)
open INV .
  :id(nslpk)
  op p : -> Prin .
  op q : -> Prin .
  op r : -> Rand .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Rand .
	op s : -> Sys .
	eq (r3 \in ur(s)) = true .
	red inv240(s,p,q,r) implies inv240(sdm1(s,r1,r2,r3),p,q,r) .
close

open INV .
  :id(nslpk)
  op p : -> Prin .
  op q : -> Prin .
  op r : -> Rand .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Rand .
	op s : -> Sys .
	eq (r3 \in ur(s)) = false .
  eq r = r3 .
	red inv240(s,p,q,r) implies inv240(sdm1(s,r1,r2,r3),p,q,r) .
close

open INV .
  :id(nslpk)
  op p : -> Prin .
  op q : -> Prin .
  op r : -> Rand .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Rand .
	op s : -> Sys .
	eq (r3 \in ur(s)) = false .
  eq (r = r3) = false .
	red inv240(s,p,q,r) implies inv240(sdm1(s,r1,r2,r3),p,q,r) .
close

--> 8. sdm2(s,r1,r2,r3)
open INV .
  :id(nslpk)
  op p : -> Prin .
  op q : -> Prin .
  op r : -> Rand .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op s : -> Sys .
  eq r3 \in nw(s) = true .
  eq m1?(r3) = true .
  eq receiver(r3) = r1 .
  eq key(cipher1(r3)) = r1 .
  eq principal(cipher1(r3)) = sender(r3) .
  eq r2 \in ur(s) = true .
	red inv240(s,p,q,r) implies inv240(sdm2(s,r1,r2,r3),p,q,r) .
close

open INV .
  :id(nslpk)
  op p : -> Prin .
  op q : -> Prin .
  op r : -> Rand .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op s : -> Sys .
  eq r3 \in nw(s) = true .
  eq m1?(r3) = true .
  eq receiver(r3) = r1 .
  eq key(cipher1(r3)) = r1 .
  eq principal(cipher1(r3)) = sender(r3) .
  eq r2 \in ur(s) = false .
  eq r = r2 .
	red inv240(s,p,q,r) implies inv240(sdm2(s,r1,r2,r3),p,q,r) .
close

open INV .
  :id(nslpk)
  op p : -> Prin .
  op q : -> Prin .
  op r : -> Rand .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op s : -> Sys .
  eq r3 \in nw(s) = true .
  eq m1?(r3) = true .
  eq receiver(r3) = r1 .
  eq key(cipher1(r3)) = r1 .
  eq principal(cipher1(r3)) = sender(r3) .
  eq r2 \in ur(s) = false .
  eq (r = r2) = false .
	red inv240(s,p,q,r) implies inv240(sdm2(s,r1,r2,r3),p,q,r) .
close

open INV .
  :id(nslpk)
  op p : -> Prin .
  op q : -> Prin .
  op r : -> Rand .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op s : -> Sys .
  eq r3 \in nw(s) = true .
  eq m1?(r3) = true .
  eq receiver(r3) = r1 .
  eq key(cipher1(r3)) = r1 .
  eq (principal(cipher1(r3)) = sender(r3)) = false .
	red inv240(s,p,q,r) implies inv240(sdm2(s,r1,r2,r3),p,q,r) .
close

open INV .
  :id(nslpk)
  op p : -> Prin .
  op q : -> Prin .
  op r : -> Rand .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op s : -> Sys .
  eq r3 \in nw(s) = true .
  eq m1?(r3) = true .
  eq receiver(r3) = r1 .
  eq (key(cipher1(r3)) = r1) = false .
	red inv240(s,p,q,r) implies inv240(sdm2(s,r1,r2,r3),p,q,r) .
close

open INV .
  :id(nslpk)
  op p : -> Prin .
  op q : -> Prin .
  op r : -> Rand .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op s : -> Sys .
  eq r3 \in nw(s) = true .
  eq m1?(r3) = true .
  eq (receiver(r3) = r1) = false .
	red inv240(s,p,q,r) implies inv240(sdm2(s,r1,r2,r3),p,q,r) .
close

open INV .
  :id(nslpk)
  op p : -> Prin .
  op q : -> Prin .
  op r : -> Rand .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op s : -> Sys .
  eq r3 \in nw(s) = true .
  eq m1?(r3) = false .
	red inv240(s,p,q,r) implies inv240(sdm2(s,r1,r2,r3),p,q,r) .
close

open INV .
  :id(nslpk)
  op p : -> Prin .
  op q : -> Prin .
  op r : -> Rand .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op s : -> Sys .
  eq r3 \in nw(s) = false .
	red inv240(s,p,q,r) implies inv240(sdm2(s,r1,r2,r3),p,q,r) .
close

--> 9. sdm3(s,r1,r2,r3,r4)
open INV .
  :id(nslpk)
  op p : -> Prin .
  op q : -> Prin .
  op r : -> Rand .
  op r1 : -> Prin .
  op r2 : -> Rand .
  op r3 : -> Msg .
  op r4 : -> Msg .
  op s : -> Sys .
  eq (r3 \in nw(s)) = true .
  eq (r4 \in nw(s)) = true .
  eq m1?(r3) = true .
  eq m2?(r4) = true .
  eq creator(r3) = r1 .
  eq sender(r3) = r1 .
  eq receiver(r3) = sender(r4) .
  eq key(cipher1(r3)) = sender(r4) .
  eq nonce(cipher1(r3)) = n(r1,sender(r4),r2) .
  eq principal(cipher1(r3)) = r1 .
  eq receiver(r4) = r1 .
  eq key(cipher2(r4)) = r1 .
  eq nonce1(cipher2(r4)) = n(r1,sender(r4),r2) .
  eq principal(cipher2(r4)) = sender(r4) .

  eq sender(r4) = intruder .
  red inv240(s,p,q,r) implies inv240(sdm3(s,r1,r2,r3,r4),p,q,r) .
close

open INV .
  :id(nslpk)
  op p : -> Prin .
  op q : -> Prin .
  op r : -> Rand .
  op r1 : -> Prin .
  op r2 : -> Rand .
  op r3 : -> Msg .
  op r4 : -> Msg .
  op s : -> Sys .
  eq (r3 \in nw(s)) = true .
  eq (r4 \in nw(s)) = true .
  eq m1?(r3) = true .
  eq m2?(r4) = true .
  eq creator(r3) = r1 .
  eq sender(r3) = r1 .
  eq receiver(r3) = sender(r4) .
  eq key(cipher1(r3)) = sender(r4) .
  eq nonce(cipher1(r3)) = n(r1,sender(r4),r2) .
  eq principal(cipher1(r3)) = r1 .
  eq receiver(r4) = r1 .
  eq key(cipher2(r4)) = r1 .
  eq nonce1(cipher2(r4)) = n(r1,sender(r4),r2) .
  eq principal(cipher2(r4)) = sender(r4) .

  eq (sender(r4) = intruder) = false .
  eq sender(r4) = q .
  eq n(q,p,r) = nonce2(cipher2(r4)) .
  eq r \in ur(s) = true .
  red inv240(s,p,q,r) implies inv240(sdm3(s,r1,r2,r3,r4),p,q,r) .
close

open INV .
  :id(nslpk)
  op p : -> Prin .
  op q : -> Prin .
  op r : -> Rand .
  op r1 : -> Prin .
  op r2 : -> Rand .
  op r3 : -> Msg .
  op r4 : -> Msg .
  op s : -> Sys .
  eq (r3 \in nw(s)) = true .
  eq (r4 \in nw(s)) = true .
  eq m1?(r3) = true .
  eq m2?(r4) = true .
  eq creator(r3) = r1 .
  eq sender(r3) = r1 .
  eq receiver(r3) = sender(r4) .
  eq key(cipher1(r3)) = sender(r4) .
  eq nonce(cipher1(r3)) = n(r1,sender(r4),r2) .
  eq principal(cipher1(r3)) = r1 .
  eq receiver(r4) = r1 .
  eq key(cipher2(r4)) = r1 .
  eq nonce1(cipher2(r4)) = n(r1,sender(r4),r2) .
  eq principal(cipher2(r4)) = sender(r4) .

  eq (sender(r4) = intruder) = false .
  eq sender(r4) = q .
  eq n(q,p,r) = nonce2(cipher2(r4)) .
  eq r \in ur(s) = false .
  eq r1 = intruder .
  red inv210(s,q,p,r) implies inv240(s,p,q,r) implies inv240(sdm3(s,r1,r2,r3,r4),p,q,r) .
close

open INV .
  :id(nslpk)
  op p : -> Prin .
  op q : -> Prin .
  op r : -> Rand .
  op r1 : -> Prin .
  op r2 : -> Rand .
  op r3 : -> Msg .
  op r4 : -> Msg .
  op s : -> Sys .
  eq (r3 \in nw(s)) = true .
  eq (r4 \in nw(s)) = true .
  eq m1?(r3) = true .
  eq m2?(r4) = true .
  eq creator(r3) = r1 .
  eq sender(r3) = r1 .
  eq receiver(r3) = sender(r4) .
  eq key(cipher1(r3)) = sender(r4) .
  eq nonce(cipher1(r3)) = n(r1,sender(r4),r2) .
  eq principal(cipher1(r3)) = r1 .
  eq receiver(r4) = r1 .
  eq key(cipher2(r4)) = r1 .
  eq nonce1(cipher2(r4)) = n(r1,sender(r4),r2) .
  eq principal(cipher2(r4)) = sender(r4) .

  eq (sender(r4) = intruder) = false .
  eq sender(r4) = q .
  eq n(q,p,r) = nonce2(cipher2(r4)) .
  eq r \in ur(s) = false .
  eq (r1 = intruder) = false .
  red inv250(s,r1,p,q,r,nonce1(cipher2(r4))) 
  implies inv240(s,p,q,r) implies inv240(sdm3(s,r1,r2,r3,r4),p,q,r) .
close

open INV .
  :id(nslpk)
  op p : -> Prin .
  op q : -> Prin .
  op r : -> Rand .
  op r1 : -> Prin .
  op r2 : -> Rand .
  op r3 : -> Msg .
  op r4 : -> Msg .
  op s : -> Sys .
  eq (r3 \in nw(s)) = true .
  eq (r4 \in nw(s)) = true .
  eq m1?(r3) = true .
  eq m2?(r4) = true .
  eq creator(r3) = r1 .
  eq sender(r3) = r1 .
  eq receiver(r3) = sender(r4) .
  eq key(cipher1(r3)) = sender(r4) .
  eq nonce(cipher1(r3)) = n(r1,sender(r4),r2) .
  eq principal(cipher1(r3)) = r1 .
  eq receiver(r4) = r1 .
  eq key(cipher2(r4)) = r1 .
  eq nonce1(cipher2(r4)) = n(r1,sender(r4),r2) .
  eq principal(cipher2(r4)) = sender(r4) .

  eq (sender(r4) = intruder) = false .
  eq sender(r4) = q .
  eq (n(q,p,r) = nonce2(cipher2(r4))) = false .
  red inv240(s,p,q,r) implies inv240(sdm3(s,r1,r2,r3,r4),p,q,r) .
close

open INV .
  :id(nslpk)
  op p : -> Prin .
  op q : -> Prin .
  op r : -> Rand .
  op r1 : -> Prin .
  op r2 : -> Rand .
  op r3 : -> Msg .
  op r4 : -> Msg .
  op s : -> Sys .
  eq (r3 \in nw(s)) = true .
  eq (r4 \in nw(s)) = true .
  eq m1?(r3) = true .
  eq m2?(r4) = true .
  eq creator(r3) = r1 .
  eq sender(r3) = r1 .
  eq receiver(r3) = sender(r4) .
  eq key(cipher1(r3)) = sender(r4) .
  eq nonce(cipher1(r3)) = n(r1,sender(r4),r2) .
  eq principal(cipher1(r3)) = r1 .
  eq receiver(r4) = r1 .
  eq key(cipher2(r4)) = r1 .
  eq nonce1(cipher2(r4)) = n(r1,sender(r4),r2) .
  eq principal(cipher2(r4)) = sender(r4) .

  eq (sender(r4) = intruder) = false .
  eq (sender(r4) = q) = false .
  red inv240(s,p,q,r) implies inv240(sdm3(s,r1,r2,r3,r4),p,q,r) .
close

open INV .
  :id(nslpk)
  op p : -> Prin .
  op q : -> Prin .
  op r : -> Rand .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
  eq (r3 \in nw(s)) = true . 
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
  eq sender(r3) = r1 .
  eq receiver(r3) = sender(r4) .
  eq key(cipher1(r3)) = sender(r4) .
	eq nonce(cipher1(r3)) = n(r1,sender(r4),r2) .
	eq principal(cipher1(r3)) = r1 .
  eq receiver(r4) = r1 .
	eq key(cipher2(r4)) = r1 .
  eq nonce1(cipher2(r4)) = n(r1,sender(r4),r2) .
	eq (principal(cipher2(r4)) = sender(r4)) = false .
	red inv240(s,p,q,r) implies inv240(sdm3(s,r1,r2,r3,r4),p,q,r) .
close

open INV .
  :id(nslpk)
  op p : -> Prin .
  op q : -> Prin .
  op r : -> Rand .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
  eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
  eq sender(r3) = r1 .
  eq receiver(r3) = sender(r4) .
  eq key(cipher1(r3)) = sender(r4) .
	eq nonce(cipher1(r3)) = n(r1,sender(r4),r2) .
	eq principal(cipher1(r3)) = r1 .
  eq receiver(r4) = r1 .
	eq key(cipher2(r4)) = r1 .
  eq (nonce1(cipher2(r4)) = n(r1,sender(r4),r2)) = false .
	red inv240(s,p,q,r) implies inv240(sdm3(s,r1,r2,r3,r4),p,q,r) .
close

open INV .
  :id(nslpk)
  op p : -> Prin .
  op q : -> Prin .
  op r : -> Rand .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
  eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
  eq sender(r3) = r1 .
  eq receiver(r3) = sender(r4) .
  eq key(cipher1(r3)) = sender(r4) .
	eq nonce(cipher1(r3)) = n(r1,sender(r4),r2) .
	eq principal(cipher1(r3)) = r1 .
  eq receiver(r4) = r1 .
	eq (key(cipher2(r4)) = r1) = false .
	red inv240(s,p,q,r) implies inv240(sdm3(s,r1,r2,r3,r4),p,q,r) .
close

open INV .
  :id(nslpk)
  op p : -> Prin .
  op q : -> Prin .
  op r : -> Rand .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
  eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
  eq sender(r3) = r1 .
  eq receiver(r3) = sender(r4) .
  eq key(cipher1(r3)) = sender(r4) .
	eq nonce(cipher1(r3)) = n(r1,sender(r4),r2) .
	eq principal(cipher1(r3)) = r1 .
  eq (receiver(r4) = r1) = false .
	red inv240(s,p,q,r) implies inv240(sdm3(s,r1,r2,r3,r4),p,q,r) .
close

open INV .
  :id(nslpk)
  op p : -> Prin .
  op q : -> Prin .
  op r : -> Rand .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
  eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
  eq sender(r3) = r1 .
  eq receiver(r3) = sender(r4) .
  eq key(cipher1(r3)) = sender(r4) .
	eq nonce(cipher1(r3)) = n(r1,sender(r4),r2) .
	eq (principal(cipher1(r3)) = r1) = false .
	red inv240(s,p,q,r) implies inv240(sdm3(s,r1,r2,r3,r4),p,q,r) .
close

open INV .
  :id(nslpk)
  op p : -> Prin .
  op q : -> Prin .
  op r : -> Rand .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
  eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
  eq sender(r3) = r1 .
  eq receiver(r3) = sender(r4) .
  eq key(cipher1(r3)) = sender(r4) .
	eq (nonce(cipher1(r3)) = n(r1,sender(r4),r2)) = false .
	red inv240(s,p,q,r) implies inv240(sdm3(s,r1,r2,r3,r4),p,q,r) .
close

open INV .
  :id(nslpk)
  op p : -> Prin .
  op q : -> Prin .
  op r : -> Rand .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
  eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
  eq sender(r3) = r1 .
  eq receiver(r3) = sender(r4) .
  eq (key(cipher1(r3)) = sender(r4)) = false .
	red inv240(s,p,q,r) implies inv240(sdm3(s,r1,r2,r3,r4),p,q,r) .
close

open INV .
  :id(nslpk)
  op p : -> Prin .
  op q : -> Prin .
  op r : -> Rand .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
  eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
  eq sender(r3) = r1 .
  eq (receiver(r3) = sender(r4)) = false .
	red inv240(s,p,q,r) implies inv240(sdm3(s,r1,r2,r3,r4),p,q,r) .
close

open INV .
  :id(nslpk)
  op p : -> Prin .
  op q : -> Prin .
  op r : -> Rand .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
  eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
  eq (sender(r3) = r1) = false .
	red inv240(s,p,q,r) implies inv240(sdm3(s,r1,r2,r3,r4),p,q,r) .
close

open INV .
  :id(nslpk)
  op p : -> Prin .
  op q : -> Prin .
  op r : -> Rand .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
  eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq (creator(r3) = r1) = false .
	red inv240(s,p,q,r) implies inv240(sdm3(s,r1,r2,r3,r4),p,q,r) .
close

open INV .
  :id(nslpk)	
  op p : -> Prin .
  op q : -> Prin .
  op r : -> Rand .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
  eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = false .
	red inv240(s,p,q,r) implies inv240(sdm3(s,r1,r2,r3,r4),p,q,r) .
close

open INV .
  :id(nslpk)
  op p : -> Prin .
  op q : -> Prin .
  op r : -> Rand .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
  eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = false .
	red inv240(s,p,q,r) implies inv240(sdm3(s,r1,r2,r3,r4),p,q,r) .
close

open INV .
  :id(nslpk)	
  op p : -> Prin .
  op q : -> Prin .
  op r : -> Rand .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
  eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = false .
	red inv240(s,p,q,r) implies inv240(sdm3(s,r1,r2,r3,r4),p,q,r) .
close

open INV .
  :id(nslpk)	
  op p : -> Prin .
  op q : -> Prin .
  op r : -> Rand .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
  eq (r3 \in nw(s)) = false .
	red inv240(s,p,q,r) implies inv240(sdm3(s,r1,r2,r3,r4),p,q,r) .
close

--> I) Base case
--> init
open INV .
  :id(nslpk)
    op p1 : -> Prin .
    op p : -> Prin .
    op q : -> Prin .
    op r : -> Rand .
	op n : -> Nonce .
  	red inv250(init,p1,p,q,r,n) .
close

--> II) Induction cases
--> 1. fkm11(s,r1,r2,r3)
open INV .
  :id(nslpk)
	op p1 : -> Prin .
    op p : -> Prin .
    op q : -> Prin .
    op r : -> Rand .
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Cipher1 .
	op s : -> Sys .
	eq (r3 \in cenc1(nw(s))) = true .
	red inv250(s,p1,p,q,r,n) implies inv250(fkm11(s,r1,r2,r3),p1,p,q,r,n) .
close

open INV .
  :id(nslpk)
	op p1 : -> Prin .
    op p : -> Prin .
    op q : -> Prin .
    op r : -> Rand .
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Cipher1 .
	op s : -> Sys .
	eq (r3 \in cenc1(nw(s))) = false .
	red inv250(s,p1,p,q,r,n) implies inv250(fkm11(s,r1,r2,r3),p1,p,q,r,n) .
close

--> 2. fkm12(s,r1,r2,r3)
open INV .
  :id(nslpk)
    op p1 : -> Prin .
    op p : -> Prin .
    op q : -> Prin .
    op r : -> Rand .
	op n : -> Nonce .	
    op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Nonce .
	op s : -> Sys .
	eq (r3 \in cnonce(nw(s))) = true .
	red inv250(s,p1,p,q,r,n) implies inv250(fkm12(s,r1,r2,r3),p1,p,q,r,n) .
close

open INV .
  :id(nslpk)
    op p1 : -> Prin .
    op p : -> Prin .
    op q : -> Prin .
    op r : -> Rand .
	op n : -> Nonce .	
    op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Nonce .
	op s : -> Sys .
	eq (r3 \in cnonce(nw(s))) = false .
	red inv250(s,p1,p,q,r,n) implies inv250(fkm12(s,r1,r2,r3),p1,p,q,r,n) .
close

--> 3. fkm21(s,r1,r2,r3)
open INV .
  :id(nslpk)
	op p1 : -> Prin .
    op p : -> Prin .
    op q : -> Prin .
    op r : -> Rand .
	op n : -> Nonce .	
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Cipher2 .
	op s : -> Sys .
	eq (r3 \in cenc2(nw(s))) = true .
    eq enc2(p1,n,n(q,p,r),q) = r3 .
	red inv250(s,p1,p,q,r,n) implies inv250(fkm21(s,r1,r2,r3),p1,p,q,r,n) .
close

open INV .
  :id(nslpk)
	op p1 : -> Prin .
    op p : -> Prin .
    op q : -> Prin .
    op r : -> Rand .
	op n : -> Nonce .	
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Cipher2 .
	op s : -> Sys .
	eq (r3 \in cenc2(nw(s))) = true .
    eq (enc2(p1,n,n(q,p,r),q) = r3) = false .
	red inv250(s,p1,p,q,r,n) implies inv250(fkm21(s,r1,r2,r3),p1,p,q,r,n) .
close

open INV .
  :id(nslpk)
	op p1 : -> Prin .
    op p : -> Prin .
    op q : -> Prin .
    op r : -> Rand .
	op n : -> Nonce .	
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Cipher2 .
	op s : -> Sys .
	eq (r3 \in cenc2(nw(s))) = false .
	red inv250(s,p1,p,q,r,n) implies inv250(fkm21(s,r1,r2,r3),p1,p,q,r,n) .
close

--> 4. fkm22(s,r1,r2,r3,r4)
open INV .
  :id(nslpk)
	op p1 : -> Prin .
    op p : -> Prin .
    op q : -> Prin .
    op r : -> Rand .
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Nonce .
	op r4 : -> Nonce .
	op s : -> Sys .
	eq (r3 \in cnonce(nw(s))) = true .
	eq (r4 \in cnonce(nw(s))) = true .

    eq r4 = n(q,p,r) .
	eq n(q,p,r) \in cnonce(nw(s)) = true .
	eq r2 = p1 .
    eq n = r3 .
    eq r1 = q .
  
    eq q = intruder .
	red inv250(s,p1,p,q,r,n) implies inv250(fkm22(s,r1,r2,r3,r4),p1,p,q,r,n) .
close

open INV .
  :id(nslpk)
	op p1 : -> Prin .
    op p : -> Prin .
    op q : -> Prin .
    op r : -> Rand .
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Nonce .
	op r4 : -> Nonce .
	op s : -> Sys .
	eq (r3 \in cnonce(nw(s))) = true .
	eq (r4 \in cnonce(nw(s))) = true .

    eq r4 = n(q,p,r) .
	eq n(q,p,r) \in cnonce(nw(s)) = true .
	eq r2 = p1 .
    eq n = r3 .
    eq r1 = q .
  
    eq (q = intruder) = false .
    eq r \in ur(s) = true .
	red inv250(s,p1,p,q,r,n) implies inv250(fkm22(s,r1,r2,r3,r4),p1,p,q,r,n) .
close

open INV .
  :id(nslpk)
	op p1 : -> Prin .
    op p : -> Prin .
    op q : -> Prin .
    op r : -> Rand .
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Nonce .
	op r4 : -> Nonce .
	op s : -> Sys .
	eq (r3 \in cnonce(nw(s))) = true .
	eq (r4 \in cnonce(nw(s))) = true .

    eq r4 = n(q,p,r) .
	eq n(q,p,r) \in cnonce(nw(s)) = true .
	eq r2 = p1 .
    eq n = r3 .
    eq r1 = q .

    eq (q = intruder) = false .
    eq r \in ur(s) = false .
	red inv210(s,q,p,r) implies inv250(s,p1,p,q,r,n) implies inv250(fkm22(s,r1,r2,r3,r4),p1,p,q,r,n) .
close

open INV .
  :id(nslpk)
	op p1 : -> Prin .
    op p : -> Prin .
    op q : -> Prin .
    op r : -> Rand .
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Nonce .
	op r4 : -> Nonce .
	op s : -> Sys .
	eq (r3 \in cnonce(nw(s))) = true .
	eq (r4 \in cnonce(nw(s))) = true .

    eq r4 = n(q,p,r) .
	eq n(q,p,r) \in cnonce(nw(s)) = true . 
    eq r2 = p1 .
    eq n = r3 .
    eq (r1 = q) = false .
	red inv250(s,p1,p,q,r,n) implies inv250(fkm22(s,r1,r2,r3,r4),p1,p,q,r,n) .
close

open INV .
  :id(nslpk)
	op p1 : -> Prin .
    op p : -> Prin .
    op q : -> Prin .
    op r : -> Rand .
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Nonce .
	op r4 : -> Nonce .
	op s : -> Sys .
	eq (r3 \in cnonce(nw(s))) = true .
	eq (r4 \in cnonce(nw(s))) = true .

    eq r4 = n(q,p,r) .
	eq n(q,p,r) \in cnonce(nw(s)) = true . 
    eq r2 = p1 .
    eq (n = r3) = false .
	red inv250(s,p1,p,q,r,n) implies inv250(fkm22(s,r1,r2,r3,r4),p1,p,q,r,n) .
close

open INV .
  :id(nslpk)
	op p1 : -> Prin .
    op p : -> Prin .
    op q : -> Prin .
    op r : -> Rand .
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Nonce .
	op r4 : -> Nonce .
	op s : -> Sys .
	eq (r3 \in cnonce(nw(s))) = true .
	eq (r4 \in cnonce(nw(s))) = true .

    eq r4 = n(q,p,r) .
	eq n(q,p,r) \in cnonce(nw(s)) = true . 
	eq (r2 = p1) = false .
	red inv250(s,p1,p,q,r,n) implies inv250(fkm22(s,r1,r2,r3,r4),p1,p,q,r,n) .
close

open INV .
  :id(nslpk)
	op p1 : -> Prin .
    op p : -> Prin .
    op q : -> Prin .
    op r : -> Rand .
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Nonce .
	op r4 : -> Nonce .
	op s : -> Sys .
	eq (r3 \in cnonce(nw(s))) = true .
	eq (r4 \in cnonce(nw(s))) = true .

    eq r4 = n(q,p,r) .
	eq n(q,p,r) \in cnonce(nw(s)) = false . 
	red inv250(s,p1,p,q,r,n) implies inv250(fkm22(s,r1,r2,r3,r4),p1,p,q,r,n) .
close

open INV .
  :id(nslpk)
	op p1 : -> Prin .
    op p : -> Prin .
    op q : -> Prin .
    op r : -> Rand .
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Nonce .
	op r4 : -> Nonce .
	op s : -> Sys .
	eq (r3 \in cnonce(nw(s))) = true .
	eq (r4 \in cnonce(nw(s))) = true .

    eq (r4 = n(q,p,r)) = false .
	red inv250(s,p1,p,q,r,n) implies inv250(fkm22(s,r1,r2,r3,r4),p1,p,q,r,n) .
close

open INV .
  :id(nslpk)
	op p1 : -> Prin .
    op p : -> Prin .
    op q : -> Prin .
    op r : -> Rand .
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Nonce .
	op r4 : -> Nonce .
	op s : -> Sys .
	eq (r3 \in cnonce(nw(s))) = true .
    eq r4 \in cnonce(nw(s)) = false . 
	red inv250(s,p1,p,q,r,n) implies inv250(fkm22(s,r1,r2,r3,r4),p1,p,q,r,n) .
close

open INV .
  :id(nslpk)
	op p1 : -> Prin .
    op p : -> Prin .
    op q : -> Prin .
    op r : -> Rand .
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Nonce .
	op r4 : -> Nonce .
	op s : -> Sys .
	eq (r3 \in cnonce(nw(s))) = false .
	red inv250(s,p1,p,q,r,n) implies inv250(fkm22(s,r1,r2,r3,r4),p1,p,q,r,n) .
close

--> 5. fkm31(s,r1,r2,r3)
open INV .
  :id(nslpk)
  	op p1 : -> Prin .
    op p : -> Prin .
    op q : -> Prin .
    op r : -> Rand .
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Cipher3 .
	op s : -> Sys .
	eq r3 \in cenc3(nw(s)) = true .
	red inv250(s,p1,p,q,r,n) implies inv250(fkm31(s,r1,r2,r3),p1,p,q,r,n) .
close

open INV .
  :id(nslpk)
  	op p1 : -> Prin .
    op p : -> Prin .
    op q : -> Prin .
    op r : -> Rand .
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Cipher3 .
	op s : -> Sys .
	eq r3 \in cenc3(nw(s)) = false .
	red inv250(s,p1,p,q,r,n) implies inv250(fkm31(s,r1,r2,r3),p1,p,q,r,n) .
close

--> 6. fkm32(s,r1,r2,r3)
open INV .
  :id(nslpk)
    op p1 : -> Prin .
    op p : -> Prin .
    op q : -> Prin .
    op r : -> Rand .
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Nonce .
	op s : -> Sys .
	eq (r3 \in cnonce(nw(s))) = true .
	red inv250(s,p1,p,q,r,n) implies inv250(fkm32(s,r1,r2,r3),p1,p,q,r,n) .
close

open INV .
  :id(nslpk)
    op p1 : -> Prin .
    op p : -> Prin .
    op q : -> Prin .
    op r : -> Rand .
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Nonce .
	op s : -> Sys .
	eq (r3 \in cnonce(nw(s))) = false .
	red inv250(s,p1,p,q,r,n) implies inv250(fkm32(s,r1,r2,r3),p1,p,q,r,n) .
close

--> 7. sdm1(s,r1,r2,r3)
open INV .
  :id(nslpk)
    op p1 : -> Prin .
    op p : -> Prin .
    op q : -> Prin .
    op r : -> Rand .
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Rand .
	op s : -> Sys .
	eq (r3 \in ur(s)) = true .
	red inv250(s,p1,p,q,r,n) implies inv250(sdm1(s,r1,r2,r3),p1,p,q,r,n) .
close

open INV .
  :id(nslpk)
    op p1 : -> Prin .
    op p : -> Prin .
    op q : -> Prin .
    op r : -> Rand .
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Rand .
	op s : -> Sys .
	eq (r3 \in ur(s)) = false .
    eq r = r3 .
	red inv250(s,p1,p,q,r,n) implies inv250(sdm1(s,r1,r2,r3),p1,p,q,r,n) .
close

open INV .
  :id(nslpk)
    op p1 : -> Prin .
    op p : -> Prin .
    op q : -> Prin .
    op r : -> Rand .
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Rand .
	op s : -> Sys .
	eq (r3 \in ur(s)) = false .
    eq (r = r3) = false .
	red inv250(s,p1,p,q,r,n) implies inv250(sdm1(s,r1,r2,r3),p1,p,q,r,n) .
close

--> 8. sdm2(s,r1,r2,r3)
open INV .
  :id(nslpk)
    op p1 : -> Prin .
    op p : -> Prin .
    op q : -> Prin .
    op r : -> Rand .
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op s : -> Sys .
  	eq r3 \in nw(s) = true .
  	eq m1?(r3) = true .
  	eq receiver(r3) = r1 .
  	eq key(cipher1(r3)) = r1 .
  	eq principal(cipher1(r3)) = sender(r3) .
  	eq r2 \in ur(s) = true .
	red inv250(s,p1,p,q,r,n) implies inv250(sdm2(s,r1,r2,r3),p1,p,q,r,n) .
close

open INV .
  :id(nslpk)
    op p1 : -> Prin .
    op p : -> Prin .
    op q : -> Prin .
    op r : -> Rand .
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op s : -> Sys .
  	eq r3 \in nw(s) = true .
  	eq m1?(r3) = true .
  	eq receiver(r3) = r1 .
  	eq key(cipher1(r3)) = r1 .
  	eq principal(cipher1(r3)) = sender(r3) .
  	eq r2 \in ur(s) = false .
  	eq r = r2 .
	red inv250(s,p1,p,q,r,n) implies inv250(sdm2(s,r1,r2,r3),p1,p,q,r,n) .
close

open INV .
  :id(nslpk)
    op p1 : -> Prin .
    op p : -> Prin .
    op q : -> Prin .
    op r : -> Rand .
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op s : -> Sys .
  	eq r3 \in nw(s) = true .
  	eq m1?(r3) = true .
  	eq receiver(r3) = r1 .
  	eq key(cipher1(r3)) = r1 .
  	eq principal(cipher1(r3)) = sender(r3) .
  	eq r2 \in ur(s) = false .
  	eq (r = r2) = false .
	red inv250(s,p1,p,q,r,n) implies inv250(sdm2(s,r1,r2,r3),p1,p,q,r,n) .
close

open INV .
  :id(nslpk)
    op p1 : -> Prin .
    op p : -> Prin .
    op q : -> Prin .
    op r : -> Rand .
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op s : -> Sys .
  	eq r3 \in nw(s) = true .
  	eq m1?(r3) = true .
  	eq receiver(r3) = r1 .
  	eq key(cipher1(r3)) = r1 .
  	eq (principal(cipher1(r3)) = sender(r3)) = false .
	red inv250(s,p1,p,q,r,n) implies inv250(sdm2(s,r1,r2,r3),p1,p,q,r,n) .
close

open INV .
  :id(nslpk)
    op p1 : -> Prin .
    op p : -> Prin .
    op q : -> Prin .
    op r : -> Rand .
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op s : -> Sys .
  	eq r3 \in nw(s) = true .
  	eq m1?(r3) = true .
  	eq receiver(r3) = r1 .
  	eq (key(cipher1(r3)) = r1) = false .
	red inv250(s,p1,p,q,r,n) implies inv250(sdm2(s,r1,r2,r3),p1,p,q,r,n) .
close

open INV .
  :id(nslpk)
    op p1 : -> Prin .
    op p : -> Prin .
    op q : -> Prin .
    op r : -> Rand .
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op s : -> Sys .
  	eq r3 \in nw(s) = true .
  	eq m1?(r3) = true .
  	eq (receiver(r3) = r1) = false .
	red inv250(s,p1,p,q,r,n) implies inv250(sdm2(s,r1,r2,r3),p1,p,q,r,n) .
close

open INV .
  :id(nslpk)
    op p1 : -> Prin .
    op p : -> Prin .
    op q : -> Prin .
    op r : -> Rand .
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op s : -> Sys .
  	eq r3 \in nw(s) = true .
  	eq m1?(r3) = false .
	red inv250(s,p1,p,q,r,n) implies inv250(sdm2(s,r1,r2,r3),p1,p,q,r,n) .
close

open INV .
  :id(nslpk)
    op p1 : -> Prin .
    op p : -> Prin .
    op q : -> Prin .
    op r : -> Rand .
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op s : -> Sys .
  	eq r3 \in nw(s) = false .
	red inv250(s,p1,p,q,r,n) implies inv250(sdm2(s,r1,r2,r3),p1,p,q,r,n) .
close

--> 9. sdm3(s,r1,r2,r3,r4)
open INV .
  :id(nslpk)
    op p1 : -> Prin .
    op p : -> Prin .
    op q : -> Prin .
    op r : -> Rand .
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
    eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
    eq sender(r3) = r1 .
    eq receiver(r3) = sender(r4) .
    eq key(cipher1(r3)) = sender(r4) .
	eq nonce(cipher1(r3)) = n(r1,sender(r4),r2) .
	eq principal(cipher1(r3)) = r1 .
    eq receiver(r4) = r1 .
	eq key(cipher2(r4)) = r1 .
    eq nonce1(cipher2(r4)) = n(r1,sender(r4),r2) .
	eq principal(cipher2(r4)) = sender(r4) .
	red inv250(s,p1,p,q,r,n) implies inv250(sdm3(s,r1,r2,r3,r4),p1,p,q,r,n) .
close

open INV .
  :id(nslpk)
    op p1 : -> Prin .
    op p : -> Prin .
    op q : -> Prin .
    op r : -> Rand .
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
    eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
    eq sender(r3) = r1 .
    eq receiver(r3) = sender(r4) .
    eq key(cipher1(r3)) = sender(r4) .
	eq nonce(cipher1(r3)) = n(r1,sender(r4),r2) .
	eq principal(cipher1(r3)) = r1 .
    eq receiver(r4) = r1 .
	eq key(cipher2(r4)) = r1 .
    eq nonce1(cipher2(r4)) = n(r1,sender(r4),r2) .
	eq (principal(cipher2(r4)) = sender(r4)) = false .
	red inv250(s,p1,p,q,r,n) implies inv250(sdm3(s,r1,r2,r3,r4),p1,p,q,r,n) .
close

open INV .
  :id(nslpk)
    op p1 : -> Prin .
    op p : -> Prin .
    op q : -> Prin .
    op r : -> Rand .
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
    eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
    eq sender(r3) = r1 .
    eq receiver(r3) = sender(r4) .
    eq key(cipher1(r3)) = sender(r4) .
	eq nonce(cipher1(r3)) = n(r1,sender(r4),r2) .
	eq principal(cipher1(r3)) = r1 .
    eq receiver(r4) = r1 .
	eq key(cipher2(r4)) = r1 .
    eq (nonce1(cipher2(r4)) = n(r1,sender(r4),r2)) = false .
	red inv250(s,p1,p,q,r,n) implies inv250(sdm3(s,r1,r2,r3,r4),p1,p,q,r,n) .
close

open INV .
  :id(nslpk)
    op p1 : -> Prin .
    op p : -> Prin .
    op q : -> Prin .
    op r : -> Rand .
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
    eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
    eq sender(r3) = r1 .
    eq receiver(r3) = sender(r4) .
    eq key(cipher1(r3)) = sender(r4) .
	eq nonce(cipher1(r3)) = n(r1,sender(r4),r2) .
	eq principal(cipher1(r3)) = r1 .
    eq receiver(r4) = r1 .
	eq (key(cipher2(r4)) = r1) = false .
	red inv250(s,p1,p,q,r,n) implies inv250(sdm3(s,r1,r2,r3,r4),p1,p,q,r,n) .
close

open INV .
  :id(nslpk)
    op p1 : -> Prin .
    op p : -> Prin .
    op q : -> Prin .
    op r : -> Rand .
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
    eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
    eq sender(r3) = r1 .
    eq receiver(r3) = sender(r4) .
    eq key(cipher1(r3)) = sender(r4) .
	eq nonce(cipher1(r3)) = n(r1,sender(r4),r2) .
	eq principal(cipher1(r3)) = r1 .
    eq (receiver(r4) = r1) = false .
	red inv250(s,p1,p,q,r,n) implies inv250(sdm3(s,r1,r2,r3,r4),p1,p,q,r,n) .
close

open INV .
  :id(nslpk)
    op p1 : -> Prin .
    op p : -> Prin .
    op q : -> Prin .
    op r : -> Rand .
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
    eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
    eq sender(r3) = r1 .
    eq receiver(r3) = sender(r4) .
    eq key(cipher1(r3)) = sender(r4) .
	eq nonce(cipher1(r3)) = n(r1,sender(r4),r2) .
	eq (principal(cipher1(r3)) = r1) = false .
	red inv250(s,p1,p,q,r,n) implies inv250(sdm3(s,r1,r2,r3,r4),p1,p,q,r,n) .
close

open INV .
  :id(nslpk)
    op p1 : -> Prin .
    op p : -> Prin .
    op q : -> Prin .
    op r : -> Rand .
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
    eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
    eq sender(r3) = r1 .
    eq receiver(r3) = sender(r4) .
    eq key(cipher1(r3)) = sender(r4) .
	eq (nonce(cipher1(r3)) = n(r1,sender(r4),r2)) = false .
	red inv250(s,p1,p,q,r,n) implies inv250(sdm3(s,r1,r2,r3,r4),p1,p,q,r,n) .
close

open INV .
  :id(nslpk)
    op p1 : -> Prin .
    op p : -> Prin .
    op q : -> Prin .
    op r : -> Rand .
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
	eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
    eq sender(r3) = r1 .
    eq receiver(r3) = sender(r4) .
    eq (key(cipher1(r3)) = sender(r4)) = false .
	red inv250(s,p1,p,q,r,n) implies inv250(sdm3(s,r1,r2,r3,r4),p1,p,q,r,n) .
close

open INV .
  :id(nslpk)
    op p1 : -> Prin .
    op p : -> Prin .
    op q : -> Prin .
    op r : -> Rand .
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
	eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
    eq sender(r3) = r1 .
    eq (receiver(r3) = sender(r4)) = false .
	red inv250(s,p1,p,q,r,n) implies inv250(sdm3(s,r1,r2,r3,r4),p1,p,q,r,n) .
close

open INV .
  :id(nslpk)
    op p1 : -> Prin .
    op p : -> Prin .
    op q : -> Prin .
    op r : -> Rand .
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
	eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
    eq (sender(r3) = r1) = false .
	red inv250(s,p1,p,q,r,n) implies inv250(sdm3(s,r1,r2,r3,r4),p1,p,q,r,n) .
close

open INV .
  :id(nslpk)
   op p1 : -> Prin .
    op p : -> Prin .
    op q : -> Prin .
    op r : -> Rand .
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
	eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq (creator(r3) = r1) = false .
	red inv250(s,p1,p,q,r,n) implies inv250(sdm3(s,r1,r2,r3,r4),p1,p,q,r,n) .
close

open INV .
  :id(nslpk)
    op p1 : -> Prin .
    op p : -> Prin .
    op q : -> Prin .
    op r : -> Rand .
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
	eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = false .
	red inv250(s,p1,p,q,r,n) implies inv250(sdm3(s,r1,r2,r3,r4),p1,p,q,r,n) .
close

open INV .
  :id(nslpk)
    op p1 : -> Prin .
    op p : -> Prin .
    op q : -> Prin .
    op r : -> Rand .
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
	eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = false .
	red inv250(s,p1,p,q,r,n) implies inv250(sdm3(s,r1,r2,r3,r4),p1,p,q,r,n) .
close

open INV .
  :id(nslpk)
    op p1 : -> Prin .
    op p : -> Prin .
    op q : -> Prin .
    op r : -> Rand .
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
	eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = false .
	red inv250(s,p1,p,q,r,n) implies inv250(sdm3(s,r1,r2,r3,r4),p1,p,q,r,n) .
close

open INV .
  :id(nslpk)
    op p1 : -> Prin .
    op p : -> Prin .
    op q : -> Prin .
    op r : -> Rand .
	op n : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
	eq (r3 \in nw(s)) = false .
	red inv250(s,p1,p,q,r,n) implies inv250(sdm3(s,r1,r2,r3,r4),p1,p,q,r,n) .
close

open INV .
  :id(nslpk)
    op p : -> Prin .
    op q : -> Prin .
	op n1 : -> Nonce .
    op n2 : -> Nonce .
  red inv260(init,p,q,n1,n2) .
close

--> II) Induction cases
--> 1. fkm11(s,r1,r2,r3)
open INV .
  :id(nslpk)
    op p : -> Prin .
    op q : -> Prin .
	op n1 : -> Nonce .
    op n2 : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Cipher1 .
	op s : -> Sys .
	eq (r3 \in cenc1(nw(s))) = true .
	red inv260(s,p,q,n1,n2) implies inv260(fkm11(s,r1,r2,r3),p,q,n1,n2) .
close

open INV .
  :id(nslpk)
    op p : -> Prin .
    op q : -> Prin .
	op n1 : -> Nonce .
    op n2 : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Cipher1 .
	op s : -> Sys .
	eq (r3 \in cenc1(nw(s))) = false .
	red inv260(s,p,q,n1,n2) implies inv260(fkm11(s,r1,r2,r3),p,q,n1,n2) .
close

--> 2. fkm12(s,r1,r2,r3)
open INV .
  :id(nslpk)
    op p : -> Prin .
    op q : -> Prin .
	op n1 : -> Nonce .
    op n2 : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Nonce .
	op s : -> Sys .
	eq (r3 \in cnonce(nw(s))) = true .
	red inv260(s,p,q,n1,n2) implies inv260(fkm12(s,r1,r2,r3),p,q,n1,n2) .
close

open INV .
  :id(nslpk)
    op p : -> Prin .
    op q : -> Prin .
	op n1 : -> Nonce .
    op n2 : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Nonce .
	op s : -> Sys .
	eq (r3 \in cnonce(nw(s))) = false .
	red inv260(s,p,q,n1,n2) implies inv260(fkm12(s,r1,r2,r3),p,q,n1,n2) .
close

--> 3. fkm21(s,r1,r2,r3)
open INV .
  :id(nslpk)
	op p : -> Prin .
    op q : -> Prin .
	op n1 : -> Nonce .
    op n2 : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Cipher2 .
	op s : -> Sys .
	eq (r3 \in cenc2(nw(s))) = true .
    eq p = intruder .
	red inv260(s,p,q,n1,n2) implies inv260(fkm21(s,r1,r2,r3),p,q,n1,n2) .
close

open INV .
  :id(nslpk)
	op p : -> Prin .
    op q : -> Prin .
	op n1 : -> Nonce .
    op n2 : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Cipher2 .
	op s : -> Sys .
	eq (r3 \in cenc2(nw(s))) = true .
    eq (p = intruder) = false .
	red inv260(s,p,q,n1,n2) implies inv260(fkm21(s,r1,r2,r3),p,q,n1,n2) .
close

open INV .
  :id(nslpk)
	op p : -> Prin .
    op q : -> Prin .
	op n1 : -> Nonce .
    op n2 : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Cipher2 .
	op s : -> Sys .
	eq (r3 \in cenc2(nw(s))) = false .
	red inv260(s,p,q,n1,n2) implies inv260(fkm21(s,r1,r2,r3),p,q,n1,n2) .
close

--> 4. fkm22(s,r1,r2,r3,r4)
open INV .
  :id(nslpk)
    op p : -> Prin .
    op q : -> Prin .
    op n1 : -> Nonce .
	op n2 : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Nonce .
	op r4 : -> Nonce .
	op s : -> Sys .
	eq (r3 \in cnonce(nw(s))) = true .
	eq (r4 \in cnonce(nw(s))) = true .
    eq p = intruder .
  	red inv260(s,p,q,n1,n2) implies inv260(fkm22(s,r1,r2,r3,r4),p,q,n1,n2) .
close

open INV .
  :id(nslpk)
    op p : -> Prin .
    op q : -> Prin .
    op n1 : -> Nonce .
	op n2 : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Nonce .
	op r4 : -> Nonce .
	op s : -> Sys .
	eq (r3 \in cnonce(nw(s))) = true .
	eq (r4 \in cnonce(nw(s))) = true .
    eq (p = intruder) = false .
  	red inv260(s,p,q,n1,n2) implies inv260(fkm22(s,r1,r2,r3,r4),p,q,n1,n2) .
close

open INV .
  :id(nslpk)
    op p : -> Prin .
    op q : -> Prin .
    op n1 : -> Nonce .
	op n2 : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Nonce .
	op r4 : -> Nonce .
	op s : -> Sys .
	eq (r3 \in cnonce(nw(s))) = true .
	eq (r4 \in cnonce(nw(s))) = false .
  	red inv260(s,p,q,n1,n2) implies inv260(fkm22(s,r1,r2,r3,r4),p,q,n1,n2) .
close

open INV .
  :id(nslpk)
    op p : -> Prin .
    op q : -> Prin .
    op n1 : -> Nonce .
	op n2 : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Nonce .
	op r4 : -> Nonce .
	op s : -> Sys .
	eq (r3 \in cnonce(nw(s))) = false .
  	red inv260(s,p,q,n1,n2) implies inv260(fkm22(s,r1,r2,r3,r4),p,q,n1,n2) .
close

--> 5. fkm31(s,r1,r2,r3)
open INV .
  :id(nslpk)
    op p : -> Prin .
    op q : -> Prin .
    op n1 : -> Nonce .
	op n2 : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Cipher3 .
	op s : -> Sys .
	eq r3 \in cenc3(nw(s)) = true .
	red inv260(s,p,q,n1,n2) implies inv260(fkm31(s,r1,r2,r3),p,q,n1,n2) .
close

open INV .
  :id(nslpk)
    op p : -> Prin .
    op q : -> Prin .
    op n1 : -> Nonce .
	op n2 : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Cipher3 .
	op s : -> Sys .
	eq r3 \in cenc3(nw(s)) = false .
	red inv260(s,p,q,n1,n2) implies inv260(fkm31(s,r1,r2,r3),p,q,n1,n2) .
close

--> 6. fkm32(s,r1,r2,r3)
open INV .
  :id(nslpk)
    op p : -> Prin .
    op q : -> Prin .
    op n1 : -> Nonce .
	op n2 : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Nonce .
	op s : -> Sys .
	eq (r3 \in cnonce(nw(s))) = true .
	red inv260(s,p,q,n1,n2) implies inv260(fkm32(s,r1,r2,r3),p,q,n1,n2) .
close

open INV .
  :id(nslpk)
    op p : -> Prin .
    op q : -> Prin .
    op n1 : -> Nonce .
	op n2 : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Nonce .
	op s : -> Sys .
	eq (r3 \in cnonce(nw(s))) = false .
	red inv260(s,p,q,n1,n2) implies inv260(fkm32(s,r1,r2,r3),p,q,n1,n2) .
close

--> 7. sdm1(s,r1,r2,r3)
open INV .
  :id(nslpk)
    op p : -> Prin .
    op q : -> Prin .
    op n1 : -> Nonce .
	op n2 : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Rand .
	op s : -> Sys .
	eq (r3 \in ur(s)) = true .
	red inv260(s,p,q,n1,n2) implies inv260(sdm1(s,r1,r2,r3),p,q,n1,n2) .
close

open INV .
  :id(nslpk)
    op p : -> Prin .
    op q : -> Prin .
    op n1 : -> Nonce .
	op n2 : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Rand .
	op s : -> Sys .
	eq (r3 \in ur(s)) = false .
	red inv260(s,p,q,n1,n2) implies inv260(sdm1(s,r1,r2,r3),p,q,n1,n2) .
close

--> 8. sdm2(s,r1,r2,r3)
open INV .
  :id(nslpk)
    op p : -> Prin .
    op q : -> Prin .
    op n1 : -> Nonce .
	op n2 : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op s : -> Sys .
  	eq r3 \in nw(s) = true .
  	eq m1?(r3) = true .
  	eq receiver(r3) = r1 .
  	eq key(cipher1(r3)) = r1 .
  	eq principal(cipher1(r3)) = sender(r3) .
  	eq r2 \in ur(s) = true .
	red inv260(s,p,q,n1,n2) implies inv260(sdm2(s,r1,r2,r3),p,q,n1,n2) .
close

open INV .
  :id(nslpk)
    op p : -> Prin .
    op q : -> Prin .
    op n1 : -> Nonce .
	op n2 : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op s : -> Sys .
  	eq r3 \in nw(s) = true .
  	eq m1?(r3) = true .
  	eq receiver(r3) = r1 .
  	eq key(cipher1(r3)) = r1 .
  	eq principal(cipher1(r3)) = sender(r3) .
  	eq r2 \in ur(s) = false .

  	eq p = r1 .
  	eq q = sender(r3) .
  	eq n1 = nonce(cipher1(r3)) .
  	eq n2 = n(r1,sender(r3),r2) .
	red inv260(s,p,q,n1,n2) implies inv260(sdm2(s,r1,r2,r3),p,q,n1,n2) .
close

open INV .
  :id(nslpk)
    op p : -> Prin .
    op q : -> Prin .
    op n1 : -> Nonce .
	op n2 : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op s : -> Sys .
  	eq r3 \in nw(s) = true .
  	eq m1?(r3) = true .
  	eq receiver(r3) = r1 .
  	eq key(cipher1(r3)) = r1 .
  	eq principal(cipher1(r3)) = sender(r3) .
  	eq r2 \in ur(s) = false .

  	eq p = r1 .
  	eq q = sender(r3) .
  	eq n1 = nonce(cipher1(r3)) .
  	eq (n2 = n(r1,sender(r3),r2)) = false .
	red inv260(s,p,q,n1,n2) implies inv260(sdm2(s,r1,r2,r3),p,q,n1,n2) .
close

open INV .
  :id(nslpk)
    op p : -> Prin .
    op q : -> Prin .
    op n1 : -> Nonce .
	op n2 : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op s : -> Sys .
  	eq r3 \in nw(s) = true .
  	eq m1?(r3) = true .
  	eq receiver(r3) = r1 .
  	eq key(cipher1(r3)) = r1 .
  	eq principal(cipher1(r3)) = sender(r3) .
  	eq r2 \in ur(s) = false .

  	eq p = r1 .
  	eq q = sender(r3) .
  	eq (n1 = nonce(cipher1(r3))) = false .
	red inv260(s,p,q,n1,n2) implies inv260(sdm2(s,r1,r2,r3),p,q,n1,n2) .
close

open INV .
  :id(nslpk)
    op p : -> Prin .
    op q : -> Prin .
    op n1 : -> Nonce .
	op n2 : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op s : -> Sys .
  	eq r3 \in nw(s) = true .
  	eq m1?(r3) = true .
  	eq receiver(r3) = r1 .
  	eq key(cipher1(r3)) = r1 .
  	eq principal(cipher1(r3)) = sender(r3) .
  	eq r2 \in ur(s) = false .

  	eq p = r1 .
  	eq (q = sender(r3)) = false .
	red inv260(s,p,q,n1,n2) implies inv260(sdm2(s,r1,r2,r3),p,q,n1,n2) .
close

open INV .
  :id(nslpk)
    op p : -> Prin .
    op q : -> Prin .
    op n1 : -> Nonce .
	op n2 : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op s : -> Sys .
  	eq r3 \in nw(s) = true .
  	eq m1?(r3) = true .
  	eq receiver(r3) = r1 .
  	eq key(cipher1(r3)) = r1 .
  	eq principal(cipher1(r3)) = sender(r3) .
  	eq r2 \in ur(s) = false .

  	eq (p = r1) = false .
	red inv260(s,p,q,n1,n2) implies inv260(sdm2(s,r1,r2,r3),p,q,n1,n2) .
close

open INV .
  :id(nslpk)
    op p : -> Prin .
    op q : -> Prin .
    op n1 : -> Nonce .
	op n2 : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op s : -> Sys .
  	eq r3 \in nw(s) = true .
  	eq m1?(r3) = true .
  	eq receiver(r3) = r1 .
  	eq key(cipher1(r3)) = r1 .
  	eq (principal(cipher1(r3)) = sender(r3)) = false .
	red inv260(s,p,q,n1,n2) implies inv260(sdm2(s,r1,r2,r3),p,q,n1,n2) .
close

open INV .
  :id(nslpk)
    op p : -> Prin .
    op q : -> Prin .
    op n1 : -> Nonce .
	op n2 : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op s : -> Sys .
  	eq r3 \in nw(s) = true .
  	eq m1?(r3) = true .
  	eq receiver(r3) = r1 .
  	eq (key(cipher1(r3)) = r1) = false .
	red inv260(s,p,q,n1,n2) implies inv260(sdm2(s,r1,r2,r3),p,q,n1,n2) .
close

open INV .
  :id(nslpk)
    op p : -> Prin .
    op q : -> Prin .
    op n1 : -> Nonce .
	op n2 : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op s : -> Sys .
  	eq r3 \in nw(s) = true .
  	eq m1?(r3) = true .
  	eq (receiver(r3) = r1) = false .
	red inv260(s,p,q,n1,n2) implies inv260(sdm2(s,r1,r2,r3),p,q,n1,n2) .
close

open INV .
  :id(nslpk)
    op p : -> Prin .
    op q : -> Prin .
    op n1 : -> Nonce .
	op n2 : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op s : -> Sys .
  	eq r3 \in nw(s) = true .
  	eq m1?(r3) = false .
	red inv260(s,p,q,n1,n2) implies inv260(sdm2(s,r1,r2,r3),p,q,n1,n2) .
close

open INV .
  :id(nslpk)
    op p : -> Prin .
    op q : -> Prin .
    op n1 : -> Nonce .
	op n2 : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op s : -> Sys .
  	eq r3 \in nw(s) = false .
	red inv260(s,p,q,n1,n2) implies inv260(sdm2(s,r1,r2,r3),p,q,n1,n2) .
close

--> 9. sdm3(s,r1,r2,r3,r4)
open INV .
  :id(nslpk)
    op p : -> Prin .
    op q : -> Prin .
    op n1 : -> Nonce .
	op n2 : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
    eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
    eq sender(r3) = r1 .
    eq receiver(r3) = sender(r4) .
    eq key(cipher1(r3)) = sender(r4) .
	eq nonce(cipher1(r3)) = n(r1,sender(r4),r2) .
	eq principal(cipher1(r3)) = r1 .
    eq receiver(r4) = r1 .
	eq key(cipher2(r4)) = r1 .
    eq nonce1(cipher2(r4)) = n(r1,sender(r4),r2) .
	eq principal(cipher2(r4)) = sender(r4) .
	red inv260(s,p,q,n1,n2) implies inv260(sdm3(s,r1,r2,r3,r4),p,q,n1,n2) .
close

open INV .
  :id(nslpk)
    op p : -> Prin .
    op q : -> Prin .
    op n1 : -> Nonce .
	op n2 : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
    eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
    eq sender(r3) = r1 .
    eq receiver(r3) = sender(r4) .
    eq key(cipher1(r3)) = sender(r4) .
	eq nonce(cipher1(r3)) = n(r1,sender(r4),r2) .
	eq principal(cipher1(r3)) = r1 .
    eq receiver(r4) = r1 .
	eq key(cipher2(r4)) = r1 .
    eq nonce1(cipher2(r4)) = n(r1,sender(r4),r2) .
	eq (principal(cipher2(r4)) = sender(r4)) = false .
	red inv260(s,p,q,n1,n2) implies inv260(sdm3(s,r1,r2,r3,r4),p,q,n1,n2) .
close

open INV .
  :id(nslpk)
    op p : -> Prin .
    op q : -> Prin .
    op n1 : -> Nonce .
	op n2 : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
    eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
    eq sender(r3) = r1 .
    eq receiver(r3) = sender(r4) .
    eq key(cipher1(r3)) = sender(r4) .
	eq nonce(cipher1(r3)) = n(r1,sender(r4),r2) .
	eq principal(cipher1(r3)) = r1 .
    eq receiver(r4) = r1 .
	eq key(cipher2(r4)) = r1 .
    eq (nonce1(cipher2(r4)) = n(r1,sender(r4),r2)) = false .
	red inv260(s,p,q,n1,n2) implies inv260(sdm3(s,r1,r2,r3,r4),p,q,n1,n2) .
close

open INV .
  :id(nslpk)
    op p : -> Prin .
    op q : -> Prin .
    op n1 : -> Nonce .
	op n2 : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
    eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
    eq sender(r3) = r1 .
    eq receiver(r3) = sender(r4) .
    eq key(cipher1(r3)) = sender(r4) .
	eq nonce(cipher1(r3)) = n(r1,sender(r4),r2) .
	eq principal(cipher1(r3)) = r1 .
    eq receiver(r4) = r1 .
	eq (key(cipher2(r4)) = r1) = false .
	red inv260(s,p,q,n1,n2) implies inv260(sdm3(s,r1,r2,r3,r4),p,q,n1,n2) .
close

open INV .
  :id(nslpk)
    op p : -> Prin .
    op q : -> Prin .
    op n1 : -> Nonce .
	op n2 : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
    eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
    eq sender(r3) = r1 .
    eq receiver(r3) = sender(r4) .
    eq key(cipher1(r3)) = sender(r4) .
	eq nonce(cipher1(r3)) = n(r1,sender(r4),r2) .
	eq principal(cipher1(r3)) = r1 .
    eq (receiver(r4) = r1) = false .
	red inv260(s,p,q,n1,n2) implies inv260(sdm3(s,r1,r2,r3,r4),p,q,n1,n2) .
close

open INV .
  :id(nslpk)
    op p : -> Prin .
    op q : -> Prin .
    op n1 : -> Nonce .
	op n2 : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
    eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
    eq sender(r3) = r1 .
    eq receiver(r3) = sender(r4) .
    eq key(cipher1(r3)) = sender(r4) .
	eq nonce(cipher1(r3)) = n(r1,sender(r4),r2) .
	eq (principal(cipher1(r3)) = r1) = false .
	red inv260(s,p,q,n1,n2) implies inv260(sdm3(s,r1,r2,r3,r4),p,q,n1,n2) .
close

open INV .
  :id(nslpk)
    op p : -> Prin .
    op q : -> Prin .
    op n1 : -> Nonce .
	op n2 : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
    eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
    eq sender(r3) = r1 .
    eq receiver(r3) = sender(r4) .
    eq key(cipher1(r3)) = sender(r4) .
	eq (nonce(cipher1(r3)) = n(r1,sender(r4),r2)) = false .
	red inv260(s,p,q,n1,n2) implies inv260(sdm3(s,r1,r2,r3,r4),p,q,n1,n2) .
close

open INV .
  :id(nslpk)
    op p : -> Prin .
    op q : -> Prin .
    op n1 : -> Nonce .
	op n2 : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
    eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
    eq sender(r3) = r1 .
    eq receiver(r3) = sender(r4) .
    eq (key(cipher1(r3)) = sender(r4)) = false .
	red inv260(s,p,q,n1,n2) implies inv260(sdm3(s,r1,r2,r3,r4),p,q,n1,n2) .
close

open INV .
  :id(nslpk)
    op p : -> Prin .
    op q : -> Prin .
    op n1 : -> Nonce .
	op n2 : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
    eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
    eq sender(r3) = r1 .
    eq (receiver(r3) = sender(r4)) = false .
	red inv260(s,p,q,n1,n2) implies inv260(sdm3(s,r1,r2,r3,r4),p,q,n1,n2) .
close

open INV .
  :id(nslpk)
    op p : -> Prin .
    op q : -> Prin .
    op n1 : -> Nonce .
	op n2 : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
    eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
    eq (sender(r3) = r1) = false .
	red inv260(s,p,q,n1,n2) implies inv260(sdm3(s,r1,r2,r3,r4),p,q,n1,n2) .
close

open INV .
  :id(nslpk)
    op p : -> Prin .
    op q : -> Prin .
    op n1 : -> Nonce .
	op n2 : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
    eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq (creator(r3) = r1) = false .
	red inv260(s,p,q,n1,n2) implies inv260(sdm3(s,r1,r2,r3,r4),p,q,n1,n2) .
close

open INV .
  :id(nslpk)
    op p : -> Prin .
    op q : -> Prin .
    op n1 : -> Nonce .
	op n2 : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
    eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = false .
	red inv260(s,p,q,n1,n2) implies inv260(sdm3(s,r1,r2,r3,r4),p,q,n1,n2) .
close

open INV .
  :id(nslpk)
    op p : -> Prin .
    op q : -> Prin .
    op n1 : -> Nonce .
	op n2 : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
    eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = false .
	red inv260(s,p,q,n1,n2) implies inv260(sdm3(s,r1,r2,r3,r4),p,q,n1,n2) .
close

open INV .
  :id(nslpk)
    op p : -> Prin .
    op q : -> Prin .
    op n1 : -> Nonce .
	op n2 : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
    eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = false .
	red inv260(s,p,q,n1,n2) implies inv260(sdm3(s,r1,r2,r3,r4),p,q,n1,n2) .
close

open INV .
  :id(nslpk)
    op p : -> Prin .
    op q : -> Prin .
    op n1 : -> Nonce .
	op n2 : -> Nonce .
	op r1 : -> Prin .
	op r2 : -> Rand .
	op r3 : -> Msg .
	op r4 : -> Msg .
	op s : -> Sys .
    eq (r3 \in nw(s)) = false .
	red inv260(s,p,q,n1,n2) implies inv260(sdm3(s,r1,r2,r3,r4),p,q,n1,n2) .
close

open INV .
  :proof(nslpk)
close