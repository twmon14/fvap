open IFF .
	:goal{
        eq [iff1 :nonexec] : inv1(S:Sys,P:Prin,P1:Prin,P0:Prin,K:Key,R:Rand) = true .
		eq [iff :nonexec] : inv2(S:Sys,K:Key,R:Rand) = true .
	}

    eq [lm1 :nonexec] : lm1(C:Cipher, C':Cipher, CS:ColCiphers) = true .

    :ind on (S:Sys)

	:apply(si)

-- fkcm1
	:apply(tc)
    -- inv1

	:def c1 = :ctf [R#Rand \in rands(nw(S#Sys)) .]

	:apply(c1)

	:imp [iff1] by {K:Key <- K@Key ; P0:Prin <- P0@Prin ; P1:Prin <- P1@Prin ; P:Prin <- P@Prin ; R:Rand <- R@Rand ;}

	:apply (rd)

	:imp [iff1] by {K:Key <- K@Key ; P0:Prin <- P0@Prin ; P1:Prin <- P1@Prin ; P:Prin <- P@Prin ; R:Rand <- R@Rand ;}

	:apply (rd)
    -- inv2

	:def c2 = :ctf [R#Rand \in rands(nw(S#Sys)) .]

	:apply(c2)

	:imp [iff] by {K:Key <- K@Key ; R:Rand <- R@Rand ;}

	:apply (rd)

	:imp [iff] by {K:Key <- K@Key ; R:Rand <- R@Rand ;}

	:apply (rd)
-- fkrm1
	:apply(tc)
    -- inv1

	:def c3 = :ctf [C#Cipher \in ciphers(nw(S#Sys)) .]

	:apply(c3)

	:def c4 = :ctf {eq P@Prin  = enemy .}

	:apply(c4)

	:def c5 = :ctf {eq P#Prin  = P1@Prin .}

	:apply(c5)

	:def c6 = :ctf {eq P0#Prin  = P0@Prin .}

	:apply(c6)

	:def c7 = :ctf {eq k(C#Cipher) = K@Key .}

	:apply(c7)

	:def c8 = :ctf {eq r(C#Cipher) = R@Rand .}

	:apply(c8)

	:def c9 = :ctf {eq p(C#Cipher) = P1@Prin .}

	:apply(c9)

	:def c10 = :ctf {eq K@Key  = k(enemy).}

	:apply(c10)

	:imp [iff1] by {K:Key <- K@Key ; P0:Prin <- P0@Prin ; P1:Prin <- P1@Prin ; P:Prin <- P@Prin ; R:Rand <- R@Rand ;}

	:apply (rd)

	:def c11 = :ctf {eq P1@Prin  = enemy .}

	:apply(c11)

	:def c12 = :ctf [enc(K@Key,R@Rand,enemy)\in ciphers(nw(S#Sys)) .]

	:apply(c12)

    :imp [iff] by {K:Key <- K@Key ; R:Rand <- R@Rand ;}

	:imp [iff1] by {K:Key <- K@Key ; P0:Prin <- P0@Prin ; P1:Prin <- P1@Prin ; P:Prin <- P@Prin ; R:Rand <- R@Rand ;}

	:apply (rd)

    :imp [lm1] by {C:Cipher <- C#Cipher ; C':Cipher <- enc(K@Key,R@Rand,enemy) ; CS:ColCiphers <- ciphers(nw(S#Sys)) ;}

	:imp [iff1] by {K:Key <- K@Key ; P0:Prin <- P0@Prin ; P1:Prin <- P1@Prin ; P:Prin <- P@Prin ; R:Rand <- R@Rand ;}

	:apply (rd)

	:imp [iff1] by {K:Key <- K@Key ; P0:Prin <- P0@Prin ; P1:Prin <- P1@Prin ; P:Prin <- P@Prin ; R:Rand <- R@Rand ;}

	:apply (rd)

	:imp [iff1] by {K:Key <- K@Key ; P0:Prin <- P0@Prin ; P1:Prin <- P1@Prin ; P:Prin <- P@Prin ; R:Rand <- R@Rand ;}

	:apply (rd)

	:imp [iff1] by {K:Key <- K@Key ; P0:Prin <- P0@Prin ; P1:Prin <- P1@Prin ; P:Prin <- P@Prin ; R:Rand <- R@Rand ;}

	:apply (rd)

	:imp [iff1] by {K:Key <- K@Key ; P0:Prin <- P0@Prin ; P1:Prin <- P1@Prin ; P:Prin <- P@Prin ; R:Rand <- R@Rand ;}

	:apply (rd)

	:imp [iff1] by {K:Key <- K@Key ; P0:Prin <- P0@Prin ; P1:Prin <- P1@Prin ; P:Prin <- P@Prin ; R:Rand <- R@Rand ;}

	:apply (rd)

	:imp [iff1] by {K:Key <- K@Key ; P0:Prin <- P0@Prin ; P1:Prin <- P1@Prin ; P:Prin <- P@Prin ; R:Rand <- R@Rand ;}

	:apply (rd)

	:imp [iff1] by {K:Key <- K@Key ; P0:Prin <- P0@Prin ; P1:Prin <- P1@Prin ; P:Prin <- P@Prin ; R:Rand <- R@Rand ;}

	:apply (rd)

	:imp [iff1] by {K:Key <- K@Key ; P0:Prin <- P0@Prin ; P1:Prin <- P1@Prin ; P:Prin <- P@Prin ; R:Rand <- R@Rand ;}

	:apply (rd)
    -- inv2
    :def c13 = :ctf [C#Cipher \in ciphers(nw(S#Sys)) .]

	:apply(c13)

	:def c14 = :ctf {eq k(C#Cipher) = K@Key .}

	:apply(c14)

	:def c15 = :ctf {eq r(C#Cipher) = R@Rand .}

	:apply(c15)

	:def c16 = :ctf {eq p(C#Cipher) = enemy .}

	:apply(c16)

    :imp [lm1] by {C:Cipher <- C#Cipher ; C':Cipher <- enc(K@Key,R@Rand,enemy) ; CS:ColCiphers <- ciphers(nw(S#Sys)) ;}

	:imp [iff] by {K:Key <- K@Key ; R:Rand <- R@Rand ;}

	:apply (rd)

	:imp [iff] by {K:Key <- K@Key ; R:Rand <- R@Rand ;}

	:apply (rd)

	:imp [iff] by {K:Key <- K@Key ; R:Rand <- R@Rand ;}

	:apply (rd)

	:imp [iff] by {K:Key <- K@Key ; R:Rand <- R@Rand ;}

	:apply (rd)

	:def c17 = :ctf {eq k(C#Cipher) = K@Key .}

	:apply(c17)

	:def c18 = :ctf {eq r(C#Cipher) = R@Rand .}

	:apply(c18)

	:def c19 = :ctf {eq p(C#Cipher) = enemy .}

	:apply(c19)

	:imp [iff] by {K:Key <- K@Key ; R:Rand <- R@Rand ;}

	:apply (rd)

	:imp [iff] by {K:Key <- K@Key ; R:Rand <- R@Rand ;}

	:apply (rd)

	:imp [iff] by {K:Key <- K@Key ; R:Rand <- R@Rand ;}

	:apply (rd)

	:imp [iff] by {K:Key <- K@Key ; R:Rand <- R@Rand ;}

	:apply (rd)
-- fkrm2
	:apply(tc)
    -- inv1
    :def c20 = :ctf [R#Rand \in rands(nw(S#Sys)) .]

	:apply(c20)

	:def c21 = :ctf {eq P1@Prin  = enemy .}

	:apply(c21)

	:def c22 = :ctf {eq k(enemy) = K@Key .}

	:apply(c22)

	:imp [iff1] by {K:Key <- K@Key ; P0:Prin <- P0@Prin ; P1:Prin <- P1@Prin ; P:Prin <- P@Prin ; R:Rand <- R@Rand ;}

	:apply (rd)

	:imp [iff1] by {K:Key <- K@Key ; P0:Prin <- P0@Prin ; P1:Prin <- P1@Prin ; P:Prin <- P@Prin ; R:Rand <- R@Rand ;}

	:apply (rd)

	:imp [iff1] by {K:Key <- K@Key ; P0:Prin <- P0@Prin ; P1:Prin <- P1@Prin ; P:Prin <- P@Prin ; R:Rand <- R@Rand ;}

	:apply (rd)

	:imp [iff1] by {K:Key <- K@Key ; P0:Prin <- P0@Prin ; P1:Prin <- P1@Prin ; P:Prin <- P@Prin ; R:Rand <- R@Rand ;}

	:apply (rd)
    -- inv2
    :def c23 = :ctf [R#Rand \in rands(nw(S#Sys)) .]

	:apply(c23)

	:def c24 = :ctf {eq k(enemy) = K@Key .}

	:apply(c24)

	:imp [iff] by {K:Key <- K@Key ; R:Rand <- R@Rand ;}

	:apply (rd)

	:imp [iff] by {K:Key <- K@Key ; R:Rand <- R@Rand ;}

	:apply (rd)

	:imp [iff] by {K:Key <- K@Key ; R:Rand <- R@Rand ;}

	:apply (rd)
-- init
	:apply(tc)
    -- inv1
    :apply (rd)
    -- inv2
    :apply (rd)
    
-- sdcm
	:apply(tc)
    -- inv1
    :def c25 = :ctf [R#Rand \in ur(S#Sys) .]

	:apply(c25)

	:imp [iff1] by {K:Key <- K@Key ; P0:Prin <- P0@Prin ; P1:Prin <- P1@Prin ; P:Prin <- P@Prin ; R:Rand <- R@Rand ;}

	:apply (rd)

	:imp [iff1] by {K:Key <- K@Key ; P0:Prin <- P0@Prin ; P1:Prin <- P1@Prin ; P:Prin <- P@Prin ; R:Rand <- R@Rand ;}

	:apply (rd)
    -- inv2
    :def c26 = :ctf [R#Rand \in ur(S#Sys) .]

	:apply(c26)

	:imp [iff] by {K:Key <- K@Key ; R:Rand <- R@Rand ;}

	:apply (rd)

	:imp [iff] by {K:Key <- K@Key ; R:Rand <- R@Rand ;}

	:apply (rd)
-- sdrm
	:apply(tc)
    -- inv1
    :def c27 = :ctf [cm?(M#Msg) .]

	:apply(c27)

	:def c28 = :ctf [M#Msg \in nw(S#Sys) .]

	:apply(c28)

	:def c29 = :ctf {eq P#Prin  = dst(M#Msg).}

	:apply(c29)

	:def c30 = :ctf {eq P@Prin  = dst(M#Msg).}

	:apply(c30)

	:def c31 = :ctf {eq P0@Prin  = src(M#Msg).}

	:apply(c31)

	:def c32 = :ctf {eq K@Key  = k(dst(M#Msg)).}

	:apply(c32)

	:def c33 = :ctf {eq R@Rand  = r(M#Msg).}

	:apply(c33)

	:def c34 = :ctf {eq P1@Prin  = dst(M#Msg).}

	:apply(c34)

	:def c35 = :ctf {eq dst(M#Msg) = enemy .}

	:apply(c35)

	:imp [iff1] by {K:Key <- K@Key ; P0:Prin <- P0@Prin ; P1:Prin <- P1@Prin ; P:Prin <- P@Prin ; R:Rand <- R@Rand ;}

	:apply (rd)

	:imp [iff1] by {K:Key <- K@Key ; P0:Prin <- P0@Prin ; P1:Prin <- P1@Prin ; P:Prin <- P@Prin ; R:Rand <- R@Rand ;}

	:apply (rd)

	:imp [iff1] by {K:Key <- K@Key ; P0:Prin <- P0@Prin ; P1:Prin <- P1@Prin ; P:Prin <- P@Prin ; R:Rand <- R@Rand ;}

	:apply (rd)

	:imp [iff1] by {K:Key <- K@Key ; P0:Prin <- P0@Prin ; P1:Prin <- P1@Prin ; P:Prin <- P@Prin ; R:Rand <- R@Rand ;}

	:apply (rd)

	:imp [iff1] by {K:Key <- K@Key ; P0:Prin <- P0@Prin ; P1:Prin <- P1@Prin ; P:Prin <- P@Prin ; R:Rand <- R@Rand ;}

	:apply (rd)

	:imp [iff1] by {K:Key <- K@Key ; P0:Prin <- P0@Prin ; P1:Prin <- P1@Prin ; P:Prin <- P@Prin ; R:Rand <- R@Rand ;}

	:apply (rd)

	:imp [iff1] by {K:Key <- K@Key ; P0:Prin <- P0@Prin ; P1:Prin <- P1@Prin ; P:Prin <- P@Prin ; R:Rand <- R@Rand ;}

	:apply (rd)

	:imp [iff1] by {K:Key <- K@Key ; P0:Prin <- P0@Prin ; P1:Prin <- P1@Prin ; P:Prin <- P@Prin ; R:Rand <- R@Rand ;}

	:apply (rd)

	:imp [iff1] by {K:Key <- K@Key ; P0:Prin <- P0@Prin ; P1:Prin <- P1@Prin ; P:Prin <- P@Prin ; R:Rand <- R@Rand ;}

	:apply (rd)

	:imp [iff1] by {K:Key <- K@Key ; P0:Prin <- P0@Prin ; P1:Prin <- P1@Prin ; P:Prin <- P@Prin ; R:Rand <- R@Rand ;}

	:apply (rd)
    -- inv2
    :def c36 = :ctf [cm?(M#Msg) .]

	:apply(c36)

	:def c37 = :ctf [M#Msg \in nw(S#Sys) .]

	:apply(c37)

	:def c38 = :ctf {eq P#Prin  = dst(M#Msg).}

	:apply(c38)

	:def c39 = :ctf {eq K@Key  = k(dst(M#Msg)).}

	:apply(c39)

	:def c40 = :ctf {eq R@Rand  = r(M#Msg).}

	:apply(c40)

	:def c41 = :ctf {eq dst(M#Msg) = enemy .}

	:apply(c41)

	:imp [iff] by {K:Key <- K@Key ; R:Rand <- R@Rand ;}

	:apply (rd)

	:imp [iff] by {K:Key <- K@Key ; R:Rand <- R@Rand ;}

	:apply (rd)

	:imp [iff] by {K:Key <- K@Key ; R:Rand <- R@Rand ;}

	:apply (rd)

	:imp [iff] by {K:Key <- K@Key ; R:Rand <- R@Rand ;}

	:apply (rd)

	:imp [iff] by {K:Key <- K@Key ; R:Rand <- R@Rand ;}

	:apply (rd)

	:imp [iff] by {K:Key <- K@Key ; R:Rand <- R@Rand ;}

	:apply (rd)

	:imp [iff] by {K:Key <- K@Key ; R:Rand <- R@Rand ;}

	:apply (rd)

close