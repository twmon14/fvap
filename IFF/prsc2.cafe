--> I) Base case
--> init
open IFF .
	:id(iff)
	op s : -> Sys .
	op k : -> Key .
	op r : -> Rand .
	red inv2(init,k,r) .
close

--> II) Induction cases
--> 1. fkcm1(s,r1,r2,r3)
open IFF .
	:id(iff)
	op s : -> Sys .
	op k : -> Key .
	op r : -> Rand .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Rand .
	eq (r3 \in rands(nw(s))) = true .
	red inv2(s,k,r) implies inv2(fkcm1(s,r1,r2,r3),k,r) .
close

open IFF .
	:id(iff)
	op s : -> Sys .
	op k : -> Key .
	op r : -> Rand .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Rand .
	eq (r3 \in rands(nw(s))) = false .
	red inv2(s,k,r) implies inv2(fkcm1(s,r1,r2,r3),k,r) .
close

--> 2. fkrm1(s,r1,r2,r3)
open IFF .
	:id(iff)
  ops r1 r2 : -> Prin .
  op s : -> Sys .
  op k : -> Key .
  op r : -> Rand .
  op r3 : -> Cipher .
  eq k(r3) = k .
  eq r(r3) = r .
  eq p(r3) = enemy .
  eq r3 \in ciphers(nw(s)) = true .
  red lm1(r3,enc(k,r,enemy),ciphers(nw(s)))
  implies inv2(s,k,r) implies inv2(fkrm1(s,r1,r2,r3),k,r) .
close

open IFF .
	:id(iff)
  ops r1 r2 : -> Prin .
  op s : -> Sys .
  op k : -> Key .
  op r : -> Rand .
  op r3 : -> Cipher .
  eq k(r3) = k .
  eq r(r3) = r .
  eq p(r3) = enemy .
  eq r3 \in ciphers(nw(s)) = false .
  red inv2(s,k,r) implies inv2(fkrm1(s,r1,r2,r3),k,r) .
close

open IFF .
	:id(iff)
  ops r1 r2 : -> Prin .
  op s : -> Sys .
  op k : -> Key .
  op r : -> Rand .
  op r3 : -> Cipher .
  eq k(r3) = k .
  eq r(r3) = r .
  eq (p(r3) = enemy) = false .
  eq r3 \in ciphers(nw(s)) = true .
  red inv2(s,k,r) implies inv2(fkrm1(s,r1,r2,r3),k,r) .
close

open IFF .
	:id(iff)
  ops r1 r2 : -> Prin .
  op s : -> Sys .
  op k : -> Key .
  op r : -> Rand .
  op r3 : -> Cipher .
  eq k(r3) = k .
  eq r(r3) = r .
  eq (p(r3) = enemy) = false .
  eq r3 \in ciphers(nw(s)) = false .
  red inv2(s,k,r) implies inv2(fkrm1(s,r1,r2,r3),k,r) .
close

open IFF .
	:id(iff)
  ops r1 r2 : -> Prin .
  op s : -> Sys .
  op k : -> Key .
  op r : -> Rand .
  op r3 : -> Cipher .
  eq k(r3) = k .
  eq (r(r3) = r) = false .
  eq r3 \in ciphers(nw(s)) = true .
  red inv2(s,k,r) implies inv2(fkrm1(s,r1,r2,r3),k,r) .
close

open IFF .
	:id(iff)
  ops r1 r2 : -> Prin .
  op s : -> Sys .
  op k : -> Key .
  op r : -> Rand .
  op r3 : -> Cipher .
  eq k(r3) = k .
  eq (r(r3) = r) = false .
  eq r3 \in ciphers(nw(s)) = false .
  red inv2(s,k,r) implies inv2(fkrm1(s,r1,r2,r3),k,r) .
close

open IFF .
	:id(iff)
  ops r1 r2 : -> Prin .
  op s : -> Sys .
  op k : -> Key .
  op r : -> Rand .
  op r3 : -> Cipher .
  eq (k(r3) = k) = false .
  eq r3 \in ciphers(nw(s)) = true .
  red inv2(s,k,r) implies inv2(fkrm1(s,r1,r2,r3),k,r) .
close

open IFF .
	:id(iff)
  ops r1 r2 : -> Prin .
  op s : -> Sys .
  op k : -> Key .
  op r : -> Rand .
  op r3 : -> Cipher .
  eq (k(r3) = k) = false .
  eq r3 \in ciphers(nw(s)) = false .
  red inv2(s,k,r) implies inv2(fkrm1(s,r1,r2,r3),k,r) .
close

--> 3. fkrm2(s,r1,r2,r3)
open IFF .
	:id(iff)
	op s : -> Sys .
	op k : -> Key .
	op r : -> Rand .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Rand .
	eq (r3 \in rands(nw(s))) = true .
	eq k(enemy) = k .
	red inv2(s,k,r) implies inv2(fkrm2(s,r1,r2,r3),k,r) .
close

open IFF .
	:id(iff)
	op s : -> Sys .
	op k : -> Key .
	op r : -> Rand .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Rand .
	eq (r3 \in rands(nw(s))) = true .
	eq (k(enemy) = k) = false .
	red inv2(s,k,r) implies inv2(fkrm2(s,r1,r2,r3),k,r) .
close

open IFF .
	:id(iff)
	op s : -> Sys .
	op k : -> Key .
	op r : -> Rand .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Rand .
	eq (r3 \in rands(nw(s))) = false .
	red inv2(s,k,r) implies inv2(fkrm2(s,r1,r2,r3),k,r) .
close

--> 4. sdcm(s,r1,r2,r3)
open IFF .
	:id(iff)
	op s : -> Sys .
	op k : -> Key .
	op r : -> Rand .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Rand .
	eq (r3 \in ur(s)) = true .
	red inv2(s,k,r) implies inv2(sdcm(s,r1,r2,r3),k,r) .
close

open IFF .
	:id(iff)
	op s : -> Sys .
	op k : -> Key .
	op r : -> Rand .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Rand .
	eq (r3 \in ur(s)) = false .
	red inv2(s,k,r) implies inv2(sdcm(s,r1,r2,r3),k,r) .
close

--> 5. sdrm(s,r1,r2,r3)
open IFF .
	:id(iff)
  op r1 : -> Prin .
  op m1 : -> Msg .
  op nw1 : -> Network .
  op s : -> Sys .
  op k : -> Key .
  op r : -> Rand .
  eq cm?(m1) = true .
  eq m1 \in nw(s) = true .
  eq r1 = dst(m1) .
  eq k = k(dst(m1)) .
  eq r = r(m1) .
  eq dst(m1) = enemy .
  red inv2(s,k,r) implies inv2(sdrm(s,r1,m1),k,r) .
close

open IFF .
	:id(iff)
  op r1 : -> Prin .
  op m1 : -> Msg .
  op nw1 : -> Network .
  op s : -> Sys .
  op k : -> Key .
  op r : -> Rand .
  eq cm?(m1) = true .
  eq m1 \in nw(s) = true .
  eq r1 = dst(m1) .
  eq k = k(dst(m1)) .
  eq r = r(m1) .
  eq (dst(m1) = enemy) = false .
  red inv2(s,k,r) implies inv2(sdrm(s,r1,m1),k,r) .
close

open IFF .
	:id(iff)
  op r1 : -> Prin .
  op m1 : -> Msg .
  op nw1 : -> Network .
  op s : -> Sys .
  op k : -> Key .
  op r : -> Rand .
  eq cm?(m1) = true .
  eq m1 \in nw(s) = true .
  eq r1 = dst(m1) .
  eq k = k(dst(m1)) .
  eq (r = r(m1)) = false .
  red inv2(s,k,r) implies inv2(sdrm(s,r1,m1),k,r) .
close

open IFF .
	:id(iff)
  op r1 : -> Prin .
  op m1 : -> Msg .
  op nw1 : -> Network .
  op s : -> Sys .
  op k : -> Key .
  op r : -> Rand .
  eq cm?(m1) = true .
  eq m1 \in nw(s) = true .
  eq r1 = dst(m1) .
  eq (k = k(dst(m1))) = false .
  red inv2(s,k,r) implies inv2(sdrm(s,r1,m1),k,r) .
close

open IFF .
	:id(iff)
  op r1 : -> Prin .
  op m1 : -> Msg .
  op nw1 : -> Network .
  op s : -> Sys .
  op k : -> Key .
  op r : -> Rand .
  eq cm?(m1) = true .
  eq m1 \in nw(s) = true .
  eq (r1 = dst(m1)) = false .
  red inv2(s,k,r) implies inv2(sdrm(s,r1,m1),k,r) .
close

open IFF .
	:id(iff)
  op r1 : -> Prin .
  op m1 : -> Msg .
  op nw1 : -> Network .
  op s : -> Sys .
  op k : -> Key .
  op r : -> Rand .
  eq cm?(m1) = true .
  eq m1 \in nw(s) = false .
  red inv2(s,k,r) implies inv2(sdrm(s,r1,m1),k,r) .
close

open IFF .
	:id(iff)
  op r1 : -> Prin .
  op m1 : -> Msg .
  op nw1 : -> Network .
  op s : -> Sys .
  op k : -> Key .
  op r : -> Rand .
  eq cm?(m1) = false .
  red inv2(s,k,r) implies inv2(sdrm(s,r1,m1),k,r) .
close

open IFF .
  :proof(iff)
close
